<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpCraft</name>
    </assembly>
    <members>
        <member name="T:SharpCraft.Block">
            <summary>
            Base class for blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.#ctor">
            <summary>
            Intilizes a new block object
            </summary>
        </member>
        <member name="M:SharpCraft.Block.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new block which is the given type of block
            </summary>
            <param name="type">The block's ID/Type</param>
        </member>
        <member name="M:SharpCraft.Block.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a new block which is the given type of block
            </summary>
            <param name="type">The block's ID/Type</param>
        </member>
        <member name="M:SharpCraft.Block.GetStateProperties">
            <summary>
            Gets a list of this block's state properties
            </summary>
            <returns>A list of all the state properties for this block</returns>
        </member>
        <member name="P:SharpCraft.Block.ID">
            <summary>
            The block's ID
            </summary>
        </member>
        <member name="M:SharpCraft.Block.GetStatePath">
            <summary>
            Used for getting the path to block states
            </summary>
        </member>
        <member name="M:SharpCraft.Block.GetStatePath``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Used for getting the path to a specific block state
            </summary>
            <typeparam name="T">The type of block to get state from</typeparam>
            <param name="stateProperty">The state to get</param>
        </member>
        <member name="M:SharpCraft.Block.StatePathGenerator(SharpCraft.Data.DataConvertionAttribute,System.Reflection.MemberInfo,System.Collections.Generic.IReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Used for generating state datapaths.
            </summary>
            <param name="convertionInfo">Data on how the paths should be generated</param>
            <param name="caller">The method/property calling this method</param>
            <param name="arguments">Arguments from the calling method</param>
        </member>
        <member name="P:SharpCraft.Block.HasState">
            <summary>
            Checks if the block has any block states defined
            </summary>
        </member>
        <member name="M:SharpCraft.Block.ClearStates">
            <summary>
            Clears the block's state
            </summary>
        </member>
        <member name="M:SharpCraft.Block.GetStateString">
            <summary>
            Gets the raw data for the states the block has
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="M:SharpCraft.Block.GetStateValue(System.Reflection.PropertyInfo)">
            <summary>
            Returns the states value as a string
            </summary>
            <param name="stateProperty">the property holding the state</param>
            <returns></returns>
        </member>
        <member name="M:SharpCraft.Block.GetBlockPlacementString">
            <summary>
            Gets the raw data used to set block this block
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="M:SharpCraft.Block.FullClone">
            <summary>
            Creates a clone of this block with all its data, states and its ID
            </summary>
            <returns>The new block cloned</returns>
        </member>
        <member name="M:SharpCraft.Block.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="M:SharpCraft.Block.op_Implicit(SharpCraft.BlockType)~SharpCraft.Block">
            <summary>
            Converts a block id into a block
            </summary>
            <param name="type">The block id to convert</param>
        </member>
        <member name="M:SharpCraft.Block.op_Implicit(SharpCraft.ID.Block)~SharpCraft.Block">
            <summary>
            Converts a block id into a block
            </summary>
            <param name="type">The block id to convert</param>
        </member>
        <member name="M:SharpCraft.Block.GetFullBlock(SharpCraft.ID.Block)">
            <summary>
            Converts a block id into the correct block for the given id
            </summary>
            <param name="type">the id to convert into a block</param>
            <returns>The block</returns>
        </member>
        <member name="M:SharpCraft.Block.GetAsDataObject(System.Object[])">
            <summary>
            Converts this block into a <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
            <param name="conversionData">0: the path to the block id, 1: the path to the state holding <see cref="T:SharpCraft.Data.DataPartObject"/>, 2: if it should return in json format. Or: 0: the path if block is an id, 1: path if block is group, 2: nbt path, 3: state path, 4: isjson</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartObject"/></returns>
        </member>
        <member name="M:SharpCraft.Block.GetStateData(System.Boolean)">
            <summary>
            Returns this block's states as a <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
            <param name="isJson">If its a json object</param>
            <returns>This block's states as a <see cref="T:SharpCraft.Data.DataPartObject"/></returns>
        </member>
        <member name="T:SharpCraft.Blocks.BlockStateAttribute">
            <summary>
            An attribute used to mark a block's state properties
            </summary>
        </member>
        <member name="F:SharpCraft.Blocks.BlockStateAttribute.DataName">
            <summary>
            The name of the state the attribute is being used by
            </summary>
        </member>
        <member name="F:SharpCraft.Blocks.BlockStateAttribute.ForceInt">
            <summary>
            If true converts it to an int instead of a string
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.BlockStateAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an attribute marking a block's state
            </summary>
            <param name="stateName">The Minecraft name of the state</param>
            <param name="toInt">If it should convert the state into an int</param>
        </member>
        <member name="T:SharpCraft.Blocks.BlockIntStateRange">
            <summary>
            An attribute used for marking the range a block state can be in
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.BlockIntStateRange.#ctor(SharpCraft.MCRange)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Blocks.BlockIntStateRange"/> for defining the range of the state
            </summary>
            <param name="intRange">the range the int can be in</param>
        </member>
        <member name="M:SharpCraft.Blocks.BlockIntStateRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Blocks.BlockIntStateRange"/> for defining the range of the state
            </summary>
            <param name="min">the minimum the number can be</param>
            <param name="max">the maximum the number can be</param>
        </member>
        <member name="P:SharpCraft.Blocks.BlockIntStateRange.IntRange">
            <summary>
            the range the int can be in
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Banner">
            <summary>
            An object for banner blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Banner.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a banner block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Banner.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Banner.SRotation">
            <summary>
            The way the banner is rotated.
            (0-15. Rotation = X*22.5+South (goes south-west-north-east))
            (Used for standing banners)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Banner.SFacing">
            <summary>
            The way the banner is facing.
            (Used for banners on a wall)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Banner.DCustomName">
            <summary>
            The banners name.
            This name is showed on maps which has clicked this banner.
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Banner.DPatterns">
            <summary>
            The banner's patterns
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Banner.BannerPattern">
            <summary>
            An object defining a banner pattern
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Banner.BannerPattern.#ctor(System.Nullable{SharpCraft.ID.BannerPattern},System.Nullable{SharpCraft.ID.Color})">
            <summary>
            Creates a new banner pattern
            </summary>
            <param name="SetPattern">The pattern to use</param>
            <param name="SetColor">The color of the pattern</param>
        </member>
        <member name="P:SharpCraft.Blocks.Banner.BannerPattern.Color">
            <summary>
            The pattern's color
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Banner.BannerPattern.Pattern">
            <summary>
            The pattern
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Barrel">
            <summary>
            An object for shulker box and barral blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Barrel.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a barrel block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Barrel.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a barrel block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Barrel.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Barrel.SFacing">
            <summary>
            The direction the barrel is facing (the way it opens out into )
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Barrel.SOpen">
            <summary>
            If the barrel is open or not
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Barrel.DItems">
            <summary>
            The item's inside the barrel.
            (0-26)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.BaseContainer">
            <summary>
            A base class ofr blocks with inventories
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.BaseContainer.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new inventory block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.BaseContainer.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new inventory block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="P:SharpCraft.Blocks.BaseContainer.DLootTable">
            <summary>
            The loot table with items to put into the chest when opened
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.BaseContainer.DLootTableSeed">
            <summary>
            The seed used to generate the loot
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.BaseInventory">
            <summary>
            A base class ofr blocks with inventories
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.BaseInventory.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new inventory block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.BaseInventory.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new inventory block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="P:SharpCraft.Blocks.BaseInventory.DLock">
            <summary>
            The inventory's lock.
            (Players have to use an item with the given name to open the block)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.BaseInventory.DCustomName">
            <summary>
            The custom name displayed at the top left corner when you open the block
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.BaseInventory.DItems">
            <summary>
            The items in the inventory
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Beacon">
            <summary>
            An object for beacon blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Beacon.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a beacon block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Beacon.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a beacon block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Beacon.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Beacon.DLock">
            <summary>
            The inventory's lock.
            (Players have to use an item with the given name to open the block)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Beacon.DLevels">
            <summary>
            The number of layers the beacon pyramide has
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Beacon.DPrimary">
            <summary>
            The primary effect chosen in the beacon
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Beacon.DSecondary">
            <summary>
            The secondary effect chosen in the beacon
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.BeeHive">
            <summary>
            An object for bee hive/nest blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.BeeHive.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new bee hive/nest block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.BeeHive.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.BeeHive.SFacing">
            <summary>
            The direction the bee hive isfacing
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.BeeHive.SLevel">
            <summary>
            How much honey there is in the hive.
            (0-5. 0 = empty. 5 = full and harvest able)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.BeeHive.DFlowerPosition">
            <summary>
            The position of a flower the bees should path find to
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.BeeHive.DEntitiesInside">
            <summary>
            The entities inside the bee hive
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.BeeHive.InsideBeeHive">
            <summary>
            An entity inside a bee hive
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.BeeHive.InsideBeeHive.Entity">
            <summary>
            The entity inside the bee hive
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.BeeHive.InsideBeeHive.TicksInHive">
            <summary>
            The amount of ticks the entity has been in the hive.
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.BeeHive.InsideBeeHive.MinimumTicksInHive">
            <summary>
            The minimum amount of ticks the entity has been in the hive.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.BrewingStand">
            <summary>
            An object for brewing stand blocks.
            (Blocks like bone blocks and purpur pillars)
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.BrewingStand.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a brewingstand block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.BrewingStand.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a brewingstand block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.BrewingStand.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.BrewingStand.SHasBottle0">
            <summary>
            If the brewing stand block should display a bottle in slot 0
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.BrewingStand.SHasBottle1">
            <summary>
            If the brewing stand block should display a bottle in slot 1
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.BrewingStand.SHasBottle2">
            <summary>
            If the brewing stand block should display a bottle in slot 2
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.BrewingStand.DItems">
            <summary>
            The item's inside the brewing stand.
            0-2 = potion slots (left to right). 3 = ingredient slot. 4 = fuel slot.
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.BrewingStand.DBrewTime">
            <summary>
            The amount of time the potion has brewed.
            Done when hitting 20 seconds.
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.BrewingStand.DFule">
            <summary>
            The amount of fule in the brewing stand.
            (Fuel is used up everytime the brewing stand brews)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Campfire">
            <summary>
            An object for campfire blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Campfire.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a campfire block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Campfire.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a campfire block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Campfire.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Campfire.SWaterLogged">
            <summary>
            If the block is waterlogged
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Campfire.SLit">
            <summary>
            If the fireplace's fire should be shown
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Campfire.SSignalFire">
            <summary>
            If the smoke from the fireplace should go extra high up
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Campfire.SFacing">
            <summary>
            The direction the block is facing (the way the bottom logs are facing)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Campfire.DItems">
            <summary>
            The items being burned in the fireplace.
            Use the item's slot tag to chose the slot they are in.
            (The fire place has 4 slots (0-3))
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Campfire.DCookingTimes">
            <summary>
            How long the items have been burning.
            Each index are the time for a different slot. index 0 = slot 0. index 3 = slot 3.
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Campfire.DTotalCookingTimes">
            <summary>
            How long it takes for the items to burn.
            Each index are the time for a different slot. index 0 = slot 0. index 3 = slot 3.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Chest">
            <summary>
            An object for chest blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Chest.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a chest block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Chest.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a chest block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Chest.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Chest.SWaterLogged">
            <summary>
            If the chest is water logged
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Chest.SFacing">
            <summary>
            The direction the chest is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Chest.SConnectionType">
            <summary>
            How the chest is connected to another chest
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Chest.DItems">
            <summary>
            The item's inside the chest.
            (0-26)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.CommandBlock">
            <summary>
            An object for chest blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.CommandBlock.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new chest block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.CommandBlock.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.CommandBlock.SFacing">
            <summary>
            The direction the command block is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.CommandBlock.SConditional">
            <summary>
            If the command block is conditional
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.CommandBlock.DCustomName">
            <summary>
            The name of the command block
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.CommandBlock.DCommand">
            <summary>
            The command in the command block
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.CommandBlock.DLastOutput">
            <summary>
            The last command's string output
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.CommandBlock.DSuccessCount">
            <summary>
            The last command's success output
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.CommandBlock.DLastExecution">
            <summary>
            The point in time the last command was ran
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.CommandBlock.DTrackOutput">
            <summary>
            If the command block should store <see cref="P:SharpCraft.Blocks.CommandBlock.DLastOutput"/>
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.CommandBlock.DPowered">
            <summary>
            If the command block is powered
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.CommandBlock.DAuto">
            <summary>
            If the command block doesnt haeve to be powered to run the command
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.CommandBlock.DConditionMet">
            <summary>
            If the command block ran last time
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.CommandBlock.DCanRunMultipleTimes">
            <summary>
            If the command block should be able to run multiple times in the same tick.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Comparator">
            <summary>
            An object for comparator blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Comparator.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a comparator block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Comparator.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a comparator block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Comparator.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Comparator.SFacing">
            <summary>
            The direction the comparator is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Comparator.SCompareMode">
            <summary>
            The comparator's compara mode
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Comparator.SPowered">
            <summary>
            If the comparator is powered
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Comparator.DOutputSignal">
            <summary>
            The strenght of the comparators output
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.DropperDispenser">
            <summary>
            An object for dispensers / dropper blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.DropperDispenser.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a dispenser/dropper block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.DropperDispenser.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.DropperDispenser.SFacing">
            <summary>
            The direction the dispenser / dropper is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.DropperDispenser.SPowered">
            <summary>
            If the dispenser / dropper is powered right now
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.DropperDispenser.DItems">
            <summary>
            The item's inside the dispenser / dropper.
            (0-8)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.EndGateWay">
            <summary>
            An object for end gateway blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.EndGateWay.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates an end gateway block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.EndGateWay.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates an end gateway block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.EndGateWay.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.EndGateWay.DExit">
            <summary>
            The location the entity gets teleported to when entering
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.EndGateWay.DExactTeleport">
            <summary>
            If the entity should be teleported to this exact location
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.EndGateWay.DAge">
            <summary>
            The amount of time the portal has existed.
            x&lt;200 = magenta beam.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Furnace">
            <summary>
            An object for furnace blocks.
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Furnace.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new furnace block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Furnace.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Furnace.DItems">
            <summary>
            The item's inside the furnace.
            0 = Smelting item slot. 1 = Fuel slot. 2 = Result slot.
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Furnace.SFacing">
            <summary>
            The direction the furnace is facing.
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Furnace.SLit">
            <summary>
            If the furnace is lit or not
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Furnace.DBurnTime">
            <summary>
            The amount of time till the used fuel item runs out
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Furnace.DCookTime">
            <summary>
            The amount of time the item has been smelting for
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Furnace.DCookTimeTotal">
            <summary>
            The amount of time it will take for the item to smelt.
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Furnace.DRecipesUsed">
            <summary>
            The number of used recipes in this furnace
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Furnace.DSmeltedRecipes">
            <summary>
            A list of all recipes the furnace has smelted.
            Each recipes' number shows how many of the recipe there has been smelted since the player last took out the xp.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Furnace.SmeltedRecipes">
            <summary>
            Holds a list of smelted recipes
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Furnace.SmeltedRecipes.#ctor(SharpCraft.Blocks.Furnace.SmeltedRecipe[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Blocks.Furnace.SmeltedRecipes"/> with the given recipes
            </summary>
            <param name="recipes">The smelted recipes</param>
        </member>
        <member name="P:SharpCraft.Blocks.Furnace.SmeltedRecipes.Recipes">
            <summary>
            The smelted recipes
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Furnace.SmeltedRecipes.GetRecipePath(System.Int32)">
            <summary>
            Used for getting the path to a smelted furnace recipe
            </summary>
            <param name="recipeId">The id of the smelted recipe to get</param>
        </member>
        <member name="M:SharpCraft.Blocks.Furnace.SmeltedRecipes.GetRecipeAmountPath(System.Int32)">
            <summary>
            Used for getting the path to the amount of times a recipe has been used
            </summary>
            <param name="recipeId">The id of the smelted recipe to get</param>
        </member>
        <member name="M:SharpCraft.Blocks.Furnace.SmeltedRecipes.RecipePathGenerator(SharpCraft.Data.DataConvertionAttribute,System.Reflection.MemberInfo,System.Collections.Generic.IReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Used for generating recipe datapaths.
            </summary>
            <param name="convertionInfo">Data on how the paths should be generated</param>
            <param name="caller">The method/property calling this method</param>
            <param name="arguments">Arguments from the calling method</param>
        </member>
        <member name="M:SharpCraft.Blocks.Furnace.SmeltedRecipes.GetAsDataObject(System.Object[])">
            <summary>
            Converts this <see cref="T:SharpCraft.Blocks.Furnace.SmeltedRecipes"/> object into a <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
            <param name="conversionData">Not in use</param>
            <returns>This object as a <see cref="T:SharpCraft.Data.DataPartObject"/></returns>
        </member>
        <member name="T:SharpCraft.Blocks.Furnace.SmeltedRecipe">
            <summary>
            An object used to define how many times a recipe has been smelted
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Furnace.SmeltedRecipe.#ctor(System.Int32,SharpCraft.IRecipe,System.Nullable{System.Int32})">
            <summary>
            An object used to define how many times a recipe has been smelted
            </summary>
            <param name="id">The recipe's unique ID</param>
            <param name="recipe">the recipe</param>
            <param name="timesSmelted">the amount of times the recipe has been smelted</param>
        </member>
        <member name="P:SharpCraft.Blocks.Furnace.SmeltedRecipe.Recipe">
            <summary>
            The recipe
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Furnace.SmeltedRecipe.TimesSmelted">
            <summary>
            The amount of times the recipe has been smelted
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Furnace.SmeltedRecipe.ID">
            <summary>
            The recipe's unique ID
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Hopper">
            <summary>
            An object for hopper blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Hopper.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a hopper block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Hopper.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a hopper block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Hopper.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Hopper.SEnabled">
            <summary>
            If the hopper is allowed to transfer items
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Hopper.SFacing">
            <summary>
            The direction the hopper is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Hopper.DItems">
            <summary>
            The item's inside the hopper.
            (0-4)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Hopper.DCooldown">
            <summary>
            The time till the hopper again will transfer an item.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Jigsaw">
            <summary>
            An object for jigsaw blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Jigsaw.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a jigsaw block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Jigsaw.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a jigsaw block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Jigsaw.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Jigsaw.SFacing">
            <summary>
            The way the jigsaw is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Jigsaw.DPool">
            <summary>
            The name of the structure pool to use
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Jigsaw.DFinishedBlock">
            <summary>
            The block the jigsaw should transform into when done
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Jigsaw.DName">
            <summary>
            The name of the jigsaw block.
            (Jigsaws only connects to other jigsaws with the same name)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Jukebox">
            <summary>
            An object for jukebox blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Jukebox.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a jukebox block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Jukebox.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a jukebox block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Jukebox.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Jukebox.SHasRecord">
            <summary>
            If the jukebox block should display it has an item inside
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Jukebox.DRecordItem">
            <summary>
            The item in the jukebox
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Lectern">
            <summary>
            An object for lectern blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Lectern.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a lectern block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Lectern.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a lectern block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Lectern.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Lectern.SFacing">
            <summary>
            The way the lectern is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Lectern.SHasBook">
            <summary>
            If the lectern should show a book
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Lectern.SPowered">
            <summary>
            If the lectern is outputting a redstone signal
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Lectern.DBook">
            <summary>
            The book in the lectern
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Lectern.DPage">
            <summary>
            The page the book in the lantern is on
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.MovedByPiston">
            <summary>
            An object for blocks being moved by a piston
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.MovedByPiston.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new block being moved by a piston
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.MovedByPiston.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.MovedByPiston.SFacing">
            <summary>
            The way the block is being pushed
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.MovedByPiston.SPistonBase">
            <summary>
            The type of piston base used
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.MovedByPiston.SShort">
            <summary>
            If the piston arm is short
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.MovedByPiston.DMovingBlock">
            <summary>
            The block being moved
            Note: block data is not supported
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.MovedByPiston.DDirection">
            <summary>
            The way the block is being pushed / pulled from
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.MovedByPiston.DProgress">
            <summary>
            How far the black has been moved
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.MovedByPiston.Pushed">
            <summary>
            If the block is pushed or pulled
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.MovedByPiston.PistonHead">
            <summary>
            If the block actually is the piston's piston head
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.ShulkerBox">
            <summary>
            An object for shulker box and barral blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.ShulkerBox.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new shulker box
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.ShulkerBox.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.ShulkerBox.SFacing">
            <summary>
            The direction the shulker box is facing (the way it opens out into )
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.ShulkerBox.DItems">
            <summary>
            The item's inside the shulker box.
            (0-26)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Sign">
            <summary>
            An object for sign blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Sign.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new sign block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Sign.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Sign.SWaterLogged">
            <summary>
            If the sign is water logged
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Sign.SRotation">
            <summary>
            The way the sign is rotated.
            (0-15. Rotation = X*22.5+South (goes south-west-north-east))
            (Used for standing signs)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Sign.SFacing">
            <summary>
            The way the sign is facing.
            (Used for signs on a wall)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Sign.DColor">
            <summary>
            The color of the text on the sign
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Sign.DText1">
            <summary>
            The text on line 1
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Sign.DText2">
            <summary>
            The text on line 2
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Sign.DText3">
            <summary>
            The text on line 3
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Sign.DText4">
            <summary>
            The text on line 4
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.BaseSkull">
            <summary>
            An object for skull / head blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.BaseSkull.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new skull / head block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="P:SharpCraft.Blocks.BaseSkull.DPlayerSkin">
            <summary>
            The name of the player whose skin to display
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.BaseSkull.DDataSkin">
            <summary>
            The raw data for a skin.
            (Starting from the Owner tag... so Owner:[value] (remember the {}))
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.GroundSkull">
            <summary>
            An object for skull / head blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.GroundSkull.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new skull / head block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.GroundSkull.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.GroundSkull.SRotation">
            <summary>
            The way the skull / head is rotated.
            (0-15. Rotation = X*22.5+South (goes south-west-north-east))
            (Used for standing skulls / heads)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.WallSkull">
            <summary>
            An object for skull / head blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.WallSkull.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new skull / head block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.WallSkull.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.WallSkull.SFacing">
            <summary>
            The way the skull / head is facing.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Spawner">
            <summary>
            An object for end spawner blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Spawner.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a spawner block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Spawner.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a spawner block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Spawner.#ctor(SharpCraft.Entity,System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a spawner with the specified entity inside. The entity wont move and the spawner wont spawn the entity
            </summary>
            <param name="display">The entity to display</param>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Spawner.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Spawner.DPotentials">
            <summary>
            The entities the spawner can spawn
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Spawner.DSpawnCount">
            <summary>
            How many entities to try to spawn every time
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Spawner.DSpawnRange">
            <summary>
            The range to spawn the entities in
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Spawner.DDelay">
            <summary>
            Time till the next spawn
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Spawner.DRandomDelay">
            <summary>
            The amount of ticks to randomly add to the next spawn
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Spawner.DMaxEntities">
            <summary>
            The maximum amount of entities there can be around the spawner for it to spawn
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Spawner.DPlayerRange">
            <summary>
            The range the player has to be in for the spawner to start spawning
            (<see cref="P:SharpCraft.Blocks.Spawner.DMaxEntities"/> has to be set for this to work)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.StructureBlock">
            <summary>
            An object for structure blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.StructureBlock.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a structure block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.StructureBlock.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a structure block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.StructureBlock.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.StructureBlock.SMode">
            <summary>
            The way the block should display
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.StructureBlock.DName">
            <summary>
            The name of the structure
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.StructureBlock.DMetadata">
            <summary>
            The name of the structure's creator
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.StructureBlock.DCoords">
            <summary>
            The location relative to the structure block to load/save the structure
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.StructureBlock.DSize">
            <summary>
            The size of the structure to save
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.StructureBlock.DRotation">
            <summary>
            The way the structure is rotated when loaded
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.StructureBlock.DMirror">
            <summary>
            The way the structure is mirrored when loaded
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.StructureBlock.DMode">
            <summary>
            The mode the structure block is in
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.StructureBlock.DIgnoreEntities">
            <summary>
            If the structure block should ignore entities
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.StructureBlock.DIntegrity">
            <summary>
            The percent amount of random air blocks in the structure.
            (0 = none. 1 = all)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.StructureBlock.DSeed">
            <summary>
            The seed to use when placing the random air blocks with <see cref="P:SharpCraft.Blocks.StructureBlock.DIntegrity"/>
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Interfaces.IAge">
            <summary>
            Defines a block state for the age of the block
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.IAge.SAge">
            <summary>
            The age of the block.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Interfaces.IConnected">
            <summary>
            Defines the block states for the directions the block is connected to
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.IConnected.SDown">
            <summary>
            If the block is connected downwards
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.IConnected.SUp">
            <summary>
            If the block is connected upwards
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Interfaces.IConnectedCardinal">
            <summary>
            Defines the block states for the cardinal directions the block is connected to
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.IConnectedCardinal.SEast">
            <summary>
            If the block is connected in east
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.IConnectedCardinal.SNorth">
            <summary>
            If the block is connected in north
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.IConnectedCardinal.SSouth">
            <summary>
            If the block is connected in south
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.IConnectedCardinal.SWest">
            <summary>
            If the block is connected in west
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Interfaces.IDistance">
            <summary>
            Defines a block state for the distance of the block
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.IDistance.SDistance">
            <summary>
            The distance of the block.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Interfaces.IFacing">
            <summary>
            Defines a block state for the direction a block is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.IFacing.SFacing">
            <summary>
            The direction the block is facing
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Interfaces.IFacingFull">
            <summary>
            Defines a block state for the direction a block is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.IFacingFull.SFacing">
            <summary>
            The direction the block is facing
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Interfaces.ILevel">
            <summary>
            Defines a block state for the level of the block
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.ILevel.SLevel">
            <summary>
            The level of the block.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Interfaces.ILit">
            <summary>
            Defines a block state for if the block is lit
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.ILit.SLit">
            <summary>
            If the block is lit.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Interfaces.IOpen">
            <summary>
            Defines a block state for if the block is open
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.IOpen.SOpen">
            <summary>
            If the block is open.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Interfaces.IPart">
            <summary>
            Defines a block state for what part this block is
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.IPart.SPart">
            <summary>
            The part this block is
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Interfaces.IPlaced">
            <summary>
            Defines a block state for the surface the block is placed on
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.IPlaced.SPlaced">
            <summary>
            The surface the block is placed on
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Interfaces.IPlacedOn">
            <summary>
            Defines a block state for the surface the block is placed on
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.IPlacedOn.SPlacedOn">
            <summary>
            The surface the block is placed on
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Interfaces.IPower">
            <summary>
            Defines a block state for the power of the block
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.IPower.SPower">
            <summary>
            The power of the block.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Interfaces.IPowered">
            <summary>
            Defines a block state for if the block is powered
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.IPowered.SPowered">
            <summary>
            If the block is powered.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Interfaces.IRotation">
            <summary>
            Defines a block state for the rotation of the block
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.IRotation.SRotation">
            <summary>
            The rotation of the block.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Interfaces.IStage">
            <summary>
            Defines a block state for the stage of the block
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.IStage.SStage">
            <summary>
            The stage of the block.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Interfaces.IWaterLogged">
            <summary>
            Defines a block state for if the block is water logged
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Interfaces.IWaterLogged.SWaterLogged">
            <summary>
            If the block is water logged.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Anvil">
            <summary>
            An object for anvil blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Anvil.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new anvil block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Anvil.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Anvil.SFacing">
            <summary>
            The direction the block is facing
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Bamboo">
            <summary>
            An object for bamboo blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Bamboo.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a bamboo block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Bamboo.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a barrel block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Bamboo.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Bamboo.SAge">
            <summary>
            The age of the bamboo.
            (0-1)
            1 = Bamboo looks thicker.
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Bamboo.SLeaves">
            <summary>
            The bamboo's leaves' size
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.BambooSapling">
            <summary>
            An object for bamboo sapling blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.BambooSapling.#ctor">
            <summary>
            Intilizes a new block object
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.BambooSapling.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a bamboo sapling block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.BambooSapling.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a bamboo sapling block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="P:SharpCraft.Blocks.BambooSapling.SStage">
            <summary>
            The stage of the bamboo
            (0-1)
            1 = Bamboo will grow soon.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Bed">
            <summary>
            An object for anvil blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Bed.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new bed block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Bed.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Bed.SFacing">
            <summary>
            The direction the bed is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Bed.SOccupied">
            <summary>
            If the bed is occupied
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Bed.SPart">
            <summary>
            The part of the bed this block is
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.BeetrootNetherWartBerryBush">
            <summary>
            An object for beetroot, berry bush and nether wart blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.BeetrootNetherWartBerryBush.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new beetroot, berry bush or nether wart block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.BeetrootNetherWartBerryBush.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.BeetrootNetherWartBerryBush.SAge">
            <summary>
            How far the beetroot / berry bush / nether wart has grown
            (0-3. 3 == fully grown)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Bell">
            <summary>
            An object for bell blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Bell.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a bell block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Bell.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a bell block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Bell.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Bell.SAttachement">
            <summary>
            The way the bell is attached
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Bell.SFacing">
            <summary>
            The way the bell faces
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Button">
            <summary>
            An object for button blocks.
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Button.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new button block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Button.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Button.SPlacedOn">
            <summary>
            The way the button is placed
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Button.SFacing">
            <summary>
            The way the button is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Button.SPowered">
            <summary>
            If the button is clicked
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.CactusSugarCane">
            <summary>
            An object for cactus and sugar cane blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.CactusSugarCane.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new cactus or sugar cane block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.CactusSugarCane.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.CactusSugarCane.SAge">
            <summary>
            How much the cactus / sugar cane has grown
            (0-15. 1-4 == will not grow. 15 == will try to grow)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Cake">
            <summary>
            An object for cake blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Cake.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a cake block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Cake.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a cake block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Cake.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Cake.SBites">
            <summary>
            How much cake there has been eaten
            (0-6. 0 = Full cake. 6 = One bite left)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.CarrotPotatoWheat">
            <summary>
            An object for carrot, potato or wheat blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.CarrotPotatoWheat.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new carrot, potato or wheat block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.CarrotPotatoWheat.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.CarrotPotatoWheat.SAge">
            <summary>
            How much the carrot / potato / wheat block has grown
            (0-7. 7 == fully grown)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Cauldron">
            <summary>
            An object for cauldron blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Cauldron.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a cauldron block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Cauldron.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a cauldron block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Cauldron.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Cauldron.SLevel">
            <summary>
            How much water there is in the cauldron
            (0-3. 0 = no water. 3 = full)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.ChorusFlower">
            <summary>
            An object for chorus flower blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.ChorusFlower.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a chorus flower block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.ChorusFlower.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a chorus flower block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.ChorusFlower.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.ChorusFlower.SAge">
            <summary>
            The age of the flower.
            (0-5. 1-4 = still growin. 5 = fully grown)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.ChorusPlant">
            <summary>
            An object for chorus plant blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.ChorusPlant.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a chorus plant block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.ChorusPlant.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a chorus plant block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.ChorusPlant.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.ChorusPlant.SDown">
            <summary>
            If the plant is connected downwards
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.ChorusPlant.SUp">
            <summary>
            If the plant is connected upwards
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.ChorusPlant.SEast">
            <summary>
            If the plant is connected in east
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.ChorusPlant.SNorth">
            <summary>
            If the plant is connected in north
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.ChorusPlant.SSouth">
            <summary>
            If the plant is connected in south
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.ChorusPlant.SWest">
            <summary>
            If the plant is connected in west
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.CocoaBean">
            <summary>
            An object for cocoa bean blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.CocoaBean.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a cocoa bean block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.CocoaBean.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a cocoa bean block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.CocoaBean.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.CocoaBean.SAge">
            <summary>
            How much the cocoa bean has grown
            (0-2. 2 == fully grown)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.CocoaBean.SFacing">
            <summary>
            The direction of the log the bean is placed on.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Composter">
            <summary>
            An object for composter blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Composter.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a composter block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Composter.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a composter block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Composter.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Composter.SLevel">
            <summary>
            How much compost there is in the composter
            (0-8. 0 = compost. 8 = full)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Conduit">
            <summary>
            An object for conduit blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Conduit.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a conduit block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Conduit.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a conduit block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Conduit.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Conduit.SWaterLogged">
            <summary>
            If the conduit is water logged
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Coral">
            <summary>
            An object for coral plants (not blocks)
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Coral.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new coral plant (not block)
            </summary>
            <param name="type">The type of plant</param>
        </member>
        <member name="M:SharpCraft.Blocks.Coral.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Coral.SWaterLogged">
            <summary>
            If the coral is water logged
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.CoralFan">
            <summary>
            An object for coral plants wall fans
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.CoralFan.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new coral wall plant
            </summary>
            <param name="type">The type of plant</param>
        </member>
        <member name="M:SharpCraft.Blocks.CoralFan.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.CoralFan.SFacing">
            <summary>
            The way the coral fan is facing
            Note: this is only for coral wall fans
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.DaylightDetector">
            <summary>
            An object for daylight detector blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.DaylightDetector.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a daylight detector block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.DaylightDetector.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a daylight detector block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.DaylightDetector.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.DaylightDetector.SPower">
            <summary>
            How much redstone power it outputs
            (0-15)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Door">
            <summary>
            An object for door blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Door.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new door block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Door.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Door.SFacing">
            <summary>
            The direction the door is placed in.
            (The direction the door will fill less in.)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Door.SPart">
            <summary>
            The part of the door
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Door.SHingeLocation">
            <summary>
            What side the hinges are on
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Door.SOpen">
            <summary>
            If the door is open
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Door.SPowered">
            <summary>
            If the door is powered by redstone
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.EndPortalFrame">
            <summary>
            An object for end portal frame blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.EndPortalFrame.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates an end portal frame block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.EndPortalFrame.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates an end portal frame block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.EndPortalFrame.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.EndPortalFrame.SEye">
            <summary>
            If there is an eye in the portal
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.EndPortalFrame.SFacing">
            <summary>
            The direction the frame is pointing.
            The last frame to get an eye has to face inward the portal.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.EndRod">
            <summary>
            An object for end rod blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.EndRod.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates an end rod block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.EndRod.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates an end rod block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.EndRod.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.EndRod.SFacing">
            <summary>
            The direction of the block its attached to.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Farmland">
            <summary>
            An object for farm land blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Farmland.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a farmland block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Farmland.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a farmland block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Farmland.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Farmland.SHydration">
            <summary>
            How hydrated the farmland is.
            (0-7. 7 == fully hydrated)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Fence">
            <summary>
            An object for fence blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Fence.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new fence block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Fence.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Fence.SEast">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Fence.SNorth">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Fence.SSouth">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Fence.SWest">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Fence.SWaterLogged">
            <summary>
            If the block is water logged
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.FenceGate">
            <summary>
            An object for fence gate blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.FenceGate.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new fence gate block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.FenceGate.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.FenceGate.SFacing">
            <summary>
            The direction the gate's door will swing into when open
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.FenceGate.SPartOfWall">
            <summary>
            Will lower the gate to be in the same height as a wall
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.FenceGate.SOpen">
            <summary>
            If the gate is open
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.FenceGate.SPowered">
            <summary>
            If the gate is powered by redstone
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Fire">
            <summary>
            An object for fire blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Fire.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a fire block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Fire.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a fire block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Fire.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Fire.SAge">
            <summary>
            The age of the fire.
            (0-15. Has a 1/3 chance of going up each tick)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Fire.SEast">
            <summary>
            If the fire texture shows that way
            (If there is a flameable block there)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Fire.SNorth">
            <summary>
            If the fire texture shows that way
            (If there is a flameable block there)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Fire.SSouth">
            <summary>
            If the fire texture shows that way
            (If there is a flameable block there)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Fire.SWest">
            <summary>
            If the fire texture shows that way
            (If there is a flameable block there)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Fire.SUp">
            <summary>
            If the fire texture shows that way
            (If there is a flameable block there)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.FrostedIce">
            <summary>
            An object for frosted ice blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.FrostedIce.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a frosted ice block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.FrostedIce.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a frosted ice block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.FrostedIce.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.FrostedIce.SAge">
            <summary>
            The age of the ice.
            (0-3. When 3 it has a chance to break)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Grass">
            <summary>
            An object for grass blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Grass.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a grass block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Grass.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a grass block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Grass.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Grass.SSnowy">
            <summary>
            If there is snow ontop of the block
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Grindstone">
            <summary>
            An object for grindstone blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Grindstone.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a grindstone block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Grindstone.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a grindstone block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Grindstone.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Grindstone.SPlacedOn">
            <summary>
            The way the grindstone is placed
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Grindstone.SFacing">
            <summary>
            The way the grindstone faces
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Kelp">
            <summary>
            An object for krlp blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Kelp.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a kelp block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Kelp.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a kelp block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Kelp.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Kelp.SAge">
            <summary>
            The age of the kelp.
            (0-25. 1-24 == will try to grow. 25 = won't try to grow)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Ladder">
            <summary>
            An object for ladder blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Ladder.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a ladder block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Ladder.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a ladder block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Ladder.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Ladder.SFacing">
            <summary>
            The direction of the block the ladder is on
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Ladder.SWaterLogged">
            <summary>
            If the ladder is water logged
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Lantern">
            <summary>
            An object for lantern blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Lantern.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a lantern block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Lantern.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a lantern block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Lantern.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Lantern.SHanging">
            <summary>
            If the lantern is hanging from the roof
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.LargeFlower">
            <summary>
            An object for large flower blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.LargeFlower.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new large flower block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.LargeFlower.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.LargeFlower.SPart">
            <summary>
            The part of the flower
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.LavaWater">
            <summary>
            An object for lava and water blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.LavaWater.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new lava or water block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.LavaWater.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.LavaWater.SLevel">
            <summary>
            The type of lava / water.
            (0-15. 0 == source block. 1-7 = flowing. 8-15 = falling (the number is 8+the number from the source its falling from))
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Leaves">
            <summary>
            An object for leave blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Leaves.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new leave block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Leaves.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Leaves.SDistance">
            <summary>
            The distance to the nearest wooden block.
            (1-7. 7 == Can despawn)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Leaves.SPersistant">
            <summary>
            If the leave shouldn't decay
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Lever">
            <summary>
            An object for lever blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Lever.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a lever block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Lever.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a lever block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Lever.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Lever.SPlacedOn">
            <summary>
            The way the lever is placed
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Lever.SFacing">
            <summary>
            The way the lever is facing (oppesite of the direction of the block its placed on)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Lever.SPowered">
            <summary>
            If the lever is turned on
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Loom">
            <summary>
            An object for loom blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Loom.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a loom block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Loom.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a loom block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Loom.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Loom.SFacing">
            <summary>
            The direction the block is facing
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.MushroomBlock">
            <summary>
            An object for mushroom blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.MushroomBlock.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new mushroom block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.MushroomBlock.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.MushroomBlock.SDown">
            <summary>
            If the texture should be shown downwards.
            False will show pores texture
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.MushroomBlock.SUp">
            <summary>
            If the texture should be shown upwards.
            False will show pores texture
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.MushroomBlock.SEast">
            <summary>
            If the texture should be in east.
            False will show pores texture
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.MushroomBlock.SNorth">
            <summary>
            If the texture should be in north.
            False will show pores texture
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.MushroomBlock.SSouth">
            <summary>
            If the texture should be in south.
            False will show pores texture
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.MushroomBlock.SWest">
            <summary>
            If the texture should be in west.
            False will show pores texture
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.NetherPortal">
            <summary>
            An object for nether portal blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.NetherPortal.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a nether portal block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.NetherPortal.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a nether portal block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.NetherPortal.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.NetherPortal.SAxis">
            <summary>
            The axis the portal is parallel to
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.NoteBlock">
            <summary>
            An object for note block blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.NoteBlock.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a note block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.NoteBlock.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a note block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.NoteBlock.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.NoteBlock.SInstrument">
            <summary>
            The block's instrument
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.NoteBlock.SNote">
            <summary>
            The note to play
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.NoteBlock.SPowered">
            <summary>
            If the block is powered by redstone.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Observer">
            <summary>
            An object for observer blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Observer.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a observer block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Observer.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a observer block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Observer.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Observer.SFacing">
            <summary>
            The direction the observer is observing.
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Observer.SPowered">
            <summary>
            If the observer has observed a change
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Pane">
            <summary>
            An object for pane blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Pane.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new pane block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Pane.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Pane.SEast">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Pane.SNorth">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Pane.SSouth">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Pane.SWest">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Pane.SWaterLogged">
            <summary>
            If the block is water logged
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Pillar">
            <summary>
            An object for pillar blocks.
            (Blocks like bone blocks and purpur pillars)
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Pillar.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new pillar block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Pillar.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Pillar.SAxis">
            <summary>
            The axis the pillar is parallel to
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Piston">
            <summary>
            An object for piston blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Piston.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new piston block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Piston.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Piston.SFacing">
            <summary>
            The direction the piston will push.
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Piston.SExtended">
            <summary>
            If the piston is extendend
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.PressurePlate">
            <summary>
            An object for pressure plate blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.PressurePlate.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new pressure plate block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.PressurePlate.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.PressurePlate.SPowered">
            <summary>
            If the plate is pushed down
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.PressurePlate.SPower">
            <summary>
            How much redstone power the plate outputs
            (0-15)
            Note: only works for metal plates
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Pumpkin">
            <summary>
            An object for pumpkin blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Pumpkin.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a pumpkin block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Pumpkin.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a pumpkin block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Pumpkin.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Pumpkin.SFacing">
            <summary>
            The direction the pumpkin is facing
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.PumpkinMelonStem">
            <summary>
            An object for stem blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.PumpkinMelonStem.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new stem block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.PumpkinMelonStem.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.PumpkinMelonStem.SAge">
            <summary>
            The age of the stem.
            (0-7. 7 == Fully grown)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.AttachedPumpkinMelonStem">
            <summary>
            An object for attached stem blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.AttachedPumpkinMelonStem.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new stem block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.AttachedPumpkinMelonStem.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.AttachedPumpkinMelonStem.SFacing">
            <summary>
            The direction of the block the stem is growing into
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Rail">
            <summary>
            An object for rail blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Rail.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a rail block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Rail.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a rail block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Rail.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Rail.SDirection">
            <summary>
            The direction the rail is going in
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.RedstoneDust">
            <summary>
            An object for redstone wire blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.RedstoneDust.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a redstone dust block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.RedstoneDust.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a redstone dust block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.RedstoneDust.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.RedstoneDust.SPower">
            <summary>
            How much power the dust has
            (0-15)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.RedstoneDust.SEast">
            <summary>
            The way the redstone is connected in the direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.RedstoneDust.SNorth">
            <summary>
            The way the redstone is connected in the direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.RedstoneDust.SSouth">
            <summary>
            The way the redstone is connected in the direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.RedstoneDust.SWest">
            <summary>
            The way the redstone is connected in the direction
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.RedstoneLit">
            <summary>
            An object for redstone lamp, ground torches and ore blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.RedstoneLit.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new redstone lamp, ground torches or ore block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.RedstoneLit.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.RedstoneLit.SLit">
            <summary>
            If the block is lit up
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.RedstoneRepeater">
            <summary>
            An object for redstone repeater blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.RedstoneRepeater.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a repeater block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.RedstoneRepeater.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a repeater block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.RedstoneRepeater.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.RedstoneRepeater.SPower">
            <summary>
            How many ticks delay the repeater gives.
            (1-4 ticks)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.RedstoneRepeater.SFacing">
            <summary>
            The direction the output will be send in
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.RedstoneRepeater.SLocked">
            <summary>
            If the repeater is locked
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.RedstoneRepeater.SPowered">
            <summary>
            If the repeater is powered
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.RedstoneWallTorch">
            <summary>
            An object for redstone torches
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.RedstoneWallTorch.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a redstone torch block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.RedstoneWallTorch.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a redstone torch block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.RedstoneWallTorch.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.RedstoneWallTorch.SFacing">
            <summary>
            The way the torch is facing. (The way it points)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.RedstoneWallTorch.SLit">
            <summary>
            If the block is lit up
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Sapling">
            <summary>
            An object for sapling blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Sapling.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new sapling block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Sapling.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Sapling.SStage">
            <summary>
            The stage of the sapling
            (0-1)
            1 = sapling will grow soon.
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Scaffolding">
            <summary>
            An object for scaffolding blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Scaffolding.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a scaffolding block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Scaffolding.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a scaffolding block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Scaffolding.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Scaffolding.SDistance">
            <summary>
            How far out the scaffolding has gone
            (0-7. 7 == will start to fall)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Scaffolding.SWaterLogged">
            <summary>
            If the scaffoling is water logged
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Scaffolding.SNoBlockUnder">
            <summary>
            If there isn't a block under the scaffolding
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.SeaPicles">
            <summary>
            An object for sea picle blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.SeaPicles.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a sea picle block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.SeaPicles.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a sea picle block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.SeaPicles.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.SeaPicles.SPicles">
            <summary>
            The amount of picles in the block
            (1-4)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.SeaPicles.SWaterLogged">
            <summary>
            If the picles are water logged
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Slab">
            <summary>
            An object for slab blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Slab.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new slab block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Slab.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Slab.SWaterLogged">
            <summary>
            If the slab is water logged
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Slab.SPart">
            <summary>
            The type of slab
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Snow">
            <summary>
            An object for snow blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Snow.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a snow block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Snow.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a snow block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Snow.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Snow.SLayers">
            <summary>
            The amount of snow layers
            (1-8)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.SpecialRail">
            <summary>
            An object for special rail blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.SpecialRail.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new special rail block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.SpecialRail.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.SpecialRail.SDirection">
            <summary>
            The direction the rail is going in.
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.SpecialRail.SPowered">
            <summary>
            If the rail is activated
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Stair">
            <summary>
            An object for stair blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Stair.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a stair block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Stair.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Stair.SWaterLogged">
            <summary>
            If the stair is water logged
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Stair.SShape">
            <summary>
            The shape of the stair
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Stair.SPlaced">
            <summary>
            The block the stair is placed on
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Stair.SFacing">
            <summary>
            The direction the full stair part is facing
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Stonecutter">
            <summary>
            An object for anvil blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Stonecutter.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a stonecutter block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Stonecutter.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a stonecutter block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Stonecutter.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Stonecutter.SFacing">
            <summary>
            The direction the block is facing
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Terracotta">
            <summary>
            An object for terracotta blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Terracotta.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new terracotta block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Terracotta.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Terracotta.SFacing">
            <summary>
            The direction the block is facing
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.TNT">
            <summary>
            An object for tnt blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.TNT.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a tnt block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.TNT.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a tnt block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.TNT.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.TNT.SUnstable">
            <summary>
            If the tnt gets ignited when broken
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Trapdoor">
            <summary>
            An object for trapdoor blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Trapdoor.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a trapdoor block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Trapdoor.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Trapdoor.SFacing">
            <summary>
            The direction the trapdoor will be most open in
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Trapdoor.SPlaced">
            <summary>
            The type of trapdoor
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Trapdoor.SOpen">
            <summary>
            If the trapdoor is open
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Trapdoor.SPowered">
            <summary>
            If the trapdoor is powered by redstone
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Trapdoor.SWaterLogged">
            <summary>
            If the trapdoor is water logged
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Tripwire">
            <summary>
            An object for tripwire blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Tripwire.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a tripwire block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Tripwire.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a tripwire block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Tripwire.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Tripwire.SEast">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Tripwire.SNorth">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Tripwire.SSouth">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Tripwire.SWest">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Tripwire.SAttached">
            <summary>
            If the tripwire is attached to tripwire hook
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Tripwire.SDisarmed">
            <summary>
            If the tripwire has been disarmed
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Tripwire.SPowered">
            <summary>
            If the tripwire is being stepped on
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.TripwireHook">
            <summary>
            An object for tripwire hook blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.TripwireHook.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a tripwire hook block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.TripwireHook.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a tripwire hook block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.TripwireHook.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.TripwireHook.SAttached">
            <summary>
            If the tripwire hook is attached to a tripwire
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.TripwireHook.SFacing">
            <summary>
            The direction the tripwire hook is facing into
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.TripwireHook.SPowered">
            <summary>
            If the tripwire hook's tripwire is being stepped on
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.TurtleEgg">
            <summary>
            An object for turtle egg blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.TurtleEgg.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a turtle egg block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.TurtleEgg.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a turtle egg block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.TurtleEgg.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.TurtleEgg.SEggs">
            <summary>
            The amount of eggs in the block.
            (1-4)
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.TurtleEgg.SHatching">
            <summary>
            How far the eggs has hatched.
            (0-2. 2 == Will hatch soon)
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Vine">
            <summary>
            An object for vine blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Vine.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a vine block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Vine.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a vine block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Vine.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Vine.SDown">
            <summary>
            If the vine should be displayed in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Vine.SUp">
            <summary>
            If the vine should be displayed in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Vine.SEast">
            <summary>
            If the vine should be displayed in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Vine.SNorth">
            <summary>
            If the vine should be displayed in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Vine.SSouth">
            <summary>
            If the vine should be displayed in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Vine.SWest">
            <summary>
            If the vine should be displayed in this direction
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.Wall">
            <summary>
            An object for wall blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.Wall.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a new wall block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.Wall.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.Wall.SEast">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Wall.SNorth">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Wall.SSouth">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Wall.SWest">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Wall.SWaterLogged">
            <summary>
            If the block is water logged
            </summary>
        </member>
        <member name="P:SharpCraft.Blocks.Wall.SUp">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="T:SharpCraft.Blocks.WallTorch">
            <summary>
            An object for wall torch blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Blocks.WallTorch.#ctor(SharpCraft.BlockType)">
            <summary>
            Creates a torch block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.WallTorch.#ctor(SharpCraft.ID.Block)">
            <summary>
            Creates a torch block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Blocks.WallTorch.FitsBlock(SharpCraft.ID.Block)">
            <summary>
            Tests if the given block type fits this type of block object
            </summary>
            <param name="block">The block to test</param>
            <returns>true if the block fits</returns>
        </member>
        <member name="P:SharpCraft.Blocks.WallTorch.SFacing">
            <summary>
            The way the torch is facing. (The way it points)
            </summary>
        </member>
        <member name="T:SharpCraft.Data.ArrayPathAttribute">
            <summary>
            Marks a property as a datapath array indexer
            </summary>
        </member>
        <member name="M:SharpCraft.Data.ArrayPathAttribute.#ctor(System.Int32,System.Object[])">
            <summary>
            Marks the property as a datatag holder holding a tag with the given name
            </summary>
            <param name="index">The index the property is marking</param>
            <param name="conversionParams">Extra values used for converting the object correctly</param>
        </member>
        <member name="P:SharpCraft.Data.ArrayPathAttribute.Index">
            <summary>
            The index the property is marking
            </summary>
        </member>
        <member name="T:SharpCraft.Data.CompoundPathAttribute">
            <summary>
            Marks a property as a datapath
            </summary>
        </member>
        <member name="M:SharpCraft.Data.CompoundPathAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Marks the property as a datatag holder holding a tag with the given name
            </summary>
            <param name="dataTagName">the name of the datapath to the value</param>
            <param name="conversionParams">Extra values used for converting the object correctly</param>
        </member>
        <member name="M:SharpCraft.Data.CompoundPathAttribute.#ctor(System.Int32,System.Object[])">
            <summary>
            Marks the property as a datatag holder holding a tag with the given name
            </summary>
            <param name="index">An index in the parents conversionparams to use for the datapath</param>
            <param name="conversionParams">Extra values used for converting the object correctly</param>
        </member>
        <member name="P:SharpCraft.Data.CompoundPathAttribute.DataTagName">
            <summary>
            The name of this data tag
            </summary>
        </member>
        <member name="P:SharpCraft.Data.CompoundPathAttribute.ConversionIndex">
            <summary>
            An index in the parents conversionparams to use for the datapath
            </summary>
        </member>
        <member name="T:SharpCraft.Data.DataConvertionAttribute">
            <summary>
            Base class for datapath related attributes
            </summary>
        </member>
        <member name="F:SharpCraft.Data.DataConvertionAttribute.Merge">
            <summary>
            If the property this attrbite is marking is a <see cref="T:SharpCraft.Data.DataPartObject"/> and it's inside of a <see cref="T:SharpCraft.Data.DataHolderBase"/>. 
            Setting this to true will merge them together instead of adding the <see cref="T:SharpCraft.Data.DataPartObject"/> at the end of a path in <see cref="T:SharpCraft.Data.DataHolderBase"/>
            </summary>
        </member>
        <member name="M:SharpCraft.Data.DataConvertionAttribute.#ctor(System.Object[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Data.DataConvertionAttribute"/>
            </summary>
            <param name="conversionParams">Extra values used for converting the object correctly</param>
        </member>
        <member name="P:SharpCraft.Data.DataConvertionAttribute.ForceType">
            <summary>
            The type this data actually is
            </summary>
        </member>
        <member name="P:SharpCraft.Data.DataConvertionAttribute.ConversionParams">
            <summary>
            Extra parameters used for converting the object into the correct type
            </summary>
        </member>
        <member name="P:SharpCraft.Data.DataConvertionAttribute.UseForcedType">
            <summary>
            If <see cref="P:SharpCraft.Data.DataConvertionAttribute.ForceType"/> should be used (this will be set if <see cref="P:SharpCraft.Data.DataConvertionAttribute.ForceType"/> gets set)
            </summary>
        </member>
        <member name="M:SharpCraft.Data.DataConvertionAttribute.ConvertType">
            <summary>
            The type of <see cref="P:SharpCraft.Data.DataConvertionAttribute.ForceType"/>.
            </summary>
            <returns>The type of forced type</returns>
        </member>
        <member name="T:SharpCraft.Data.DataTagAttribute">
            <summary>
            An attribute used to mark NBT data tags.
            </summary>
        </member>
        <member name="M:SharpCraft.Data.DataTagAttribute.#ctor(System.Object[])">
            <summary>
            Marks the property as a datatag holder
            </summary>
            <param name="conversionParams">Extra values used for converting the object correctly</param>
        </member>
        <member name="M:SharpCraft.Data.DataTagAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Marks the property as a datatag holder holding a tag with the given name
            </summary>
            <param name="dataTagName">the name of the data tag its holding</param>
            <param name="conversionParams">Extra values used for converting the object correctly</param>
        </member>
        <member name="P:SharpCraft.Data.DataTagAttribute.DataTagName">
            <summary>
            The name of this data tag
            </summary>
        </member>
        <member name="P:SharpCraft.Data.DataTagAttribute.JsonTag">
            <summary>
            True if the path name should be encapsulated in "'s. (Default) False if it shouldn't
            </summary>
        </member>
        <member name="M:SharpCraft.Data.DataTagAttribute.Clone``1(``0,``0)">
            <summary>
            Clones all properties with a <see cref="T:SharpCraft.Data.DataTagAttribute"/> from one object to another
            </summary>
            <typeparam name="T">The type of object to clone</typeparam>
            <param name="emptyCopy">An empty object to clone the properties to</param>
            <param name="copy">The object to clone</param>
            <returns><paramref name="emptyCopy"/></returns>
        </member>
        <member name="T:SharpCraft.Data.GeneratePathAttribute">
            <summary>
            Marks a property or method as a datapath generator
            </summary>
        </member>
        <member name="M:SharpCraft.Data.GeneratePathAttribute.#ctor(System.String,SharpCraft.ID.SimpleNBTTagType,System.Object[])">
            <summary>
            Marks the property as a datatag holder holding a tag with the given name
            </summary>
            <param name="generatorName">The name of the static method used for generating the datapath</param>
            <param name="forType">The type of tag this generator should generate</param>
            <param name="conversionParams">Extra values used for converting the object correctly</param>
        </member>
        <member name="P:SharpCraft.Data.GeneratePathAttribute.GeneratorName">
            <summary>
            The name of the static method used for generating the datapath
            </summary>
        </member>
        <member name="P:SharpCraft.Data.GeneratePathAttribute.ForType">
            <summary>
            The type of tag this generator should generate
            </summary>
        </member>
        <member name="T:SharpCraft.Data.PathArrayGetterAttribute">
            <summary>
            Marks a method as a method to get an indexer for an array
            </summary>
        </member>
        <member name="T:SharpCraft.Data.SimpleDataHolder">
            <summary>
            An interface for classes which holds data
            </summary>
        </member>
        <member name="M:SharpCraft.Data.SimpleDataHolder.GetDataString">
            <summary>
            Returns the data inside this object
            </summary>
            <returns>The data in this object</returns>
        </member>
        <member name="M:SharpCraft.Data.SimpleDataHolder.op_Implicit(System.String)~SharpCraft.Data.SimpleDataHolder">
            <summary>
            Converts a string into a <see cref="T:SharpCraft.Data.DataHoldingString"/> which is a subclass of <see cref="T:SharpCraft.Data.DataHolderBase"/>
            </summary>
            <param name="data">The data the <see cref="T:SharpCraft.Data.DataHoldingString"/> object should hold</param>
        </member>
        <member name="T:SharpCraft.Data.DataHolderBase">
            <summary>
            The base class for all classes which can hold NBT data tags
            </summary>
        </member>
        <member name="M:SharpCraft.Data.DataHolderBase.GetDataProperties">
            <summary>
            Gets a list of all the data tag properties for this object
            </summary>
            <returns>A list of all the data tag properties for this object</returns>
        </member>
        <member name="P:SharpCraft.Data.DataHolderBase.HasData">
            <summary>
            Checks if this object has any data tags defined
            </summary>
        </member>
        <member name="M:SharpCraft.Data.DataHolderBase.ClearData">
            <summary>
            Clears the object's data tags
            </summary>
        </member>
        <member name="M:SharpCraft.Data.DataHolderBase.Clone">
            <summary>
            Clones all properties with a <see cref="T:SharpCraft.Data.DataTagAttribute"/> from this object onto a newly created object
            </summary>
            <returns>the cloned object</returns>
        </member>
        <member name="M:SharpCraft.Data.DataHolderBase.GetDataString">
            <summary>
            Returns the data from this object as a string used by Minecraft
            </summary>
            <returns>the data in raw string form</returns>
        </member>
        <member name="M:SharpCraft.Data.DataHolderBase.GetDataTree">
            <summary>
            Returns a tree structure containing all the data tags for this object
            </summary>
            <returns>the bottom of the tree</returns>
        </member>
        <member name="T:SharpCraft.Data.DataHoldingString">
            <summary>
            Used for converting from a data holding string to a data holding object
            </summary>
        </member>
        <member name="M:SharpCraft.Data.DataHoldingString.#ctor(System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Data.DataHoldingString"/> holding the given data.
            </summary>
            <param name="data">The data it holds</param>
        </member>
        <member name="M:SharpCraft.Data.DataHoldingString.GetDataString">
            <summary>
            Returns the data inside this object
            </summary>
            <returns>The data in this object</returns>
        </member>
        <member name="T:SharpCraft.Data.DataPathCreator">
            <summary>
            Static class containing a method for getting datapaths
            </summary>
        </member>
        <member name="M:SharpCraft.Data.DataPathCreator.GetPath``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the datapath for the given location
            </summary>
            <typeparam name="T">The type of object to get data for</typeparam>
            <param name="pathExpression">The datapath to get</param>
            <returns>The datapath string</returns>
        </member>
        <member name="M:SharpCraft.Data.DataPathCreator.AddCompoundCheck``1(``0,SharpCraft.Data.SimpleDataHolder)">
            <summary>
            Used for adding a compound check to a datapath. Wrap this method around the path to add a check to it.
            </summary>
            <typeparam name="T">The return type of path</typeparam>
            <param name="addTo">The path to the the compund check to</param>
            <param name="check">The thing to check for</param>
            <returns>The path the compund check was added to</returns>
        </member>
        <member name="M:SharpCraft.Data.DataPathCreator.AddArrayFilter(SharpCraft.Data.SimpleDataHolder)">
            <summary>
            Used for adding a filter to arrays in datapaths. Put this into an indexer to filter it.
            </summary>
            <param name="filter">The thing to filter for. Leave null to get all items.</param>
            <returns>0 (So it can be used in indexers)</returns>
        </member>
        <member name="T:SharpCraft.Data.IDataPartPathEnding">
            <summary>
            Interface for classes which can be at the end of a <see cref="T:SharpCraft.Data.DataPartPath"/>
            </summary>
        </member>
        <member name="M:SharpCraft.Data.IDataPartPathEnding.IsEmpty">
            <summary>
            If the tree part's tags are all empty
            </summary>
            <returns>True if its empty</returns>
        </member>
        <member name="M:SharpCraft.Data.IDataPartPathEnding.GetDataString">
            <summary>
            Returns the data inside this object
            </summary>
            <returns>The data in this object</returns>
        </member>
        <member name="T:SharpCraft.Data.DataPartObject">
            <summary>
            A part of a data tag tree for holding data objects
            </summary>
        </member>
        <member name="M:SharpCraft.Data.DataPartObject.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
        </member>
        <member name="M:SharpCraft.Data.DataPartObject.AddValue(SharpCraft.Data.DataPartPath)">
            <summary>
            Adds a value to this object
            </summary>
        </member>
        <member name="M:SharpCraft.Data.DataPartObject.GetValues">
            <summary>
            Returns a list of all the values in this object
            </summary>
            <returns>All the values in this object</returns>
        </member>
        <member name="M:SharpCraft.Data.DataPartObject.MergeDataPartObject(SharpCraft.Data.DataPartObject)">
            <summary>
            Merges this <see cref="T:SharpCraft.Data.DataPartObject"/> together with another <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
            <param name="mergeWith">The other <see cref="T:SharpCraft.Data.DataPartObject"/> to merge with</param>
        </member>
        <member name="M:SharpCraft.Data.DataPartObject.GetDataString">
            <summary>
            Returns this data as a string Minecraft can use
            </summary>
            <returns>This object as a string</returns>
        </member>
        <member name="M:SharpCraft.Data.DataPartObject.IsEmpty">
            <summary>
            If the tree part's tags are all empty
            </summary>
            <returns>True if its empty</returns>
        </member>
        <member name="T:SharpCraft.Data.DataPartArray">
            <summary>
            A part of a data tag tree for holding data arrays
            </summary>
        </member>
        <member name="M:SharpCraft.Data.DataPartArray.#ctor(System.Object,System.Nullable{SharpCraft.ID.NBTTagType},System.Object[],System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Data.DataPartArray"/> with the given value
            </summary>
            <param name="data">The thing which is inside the array</param>
            <param name="conversionParams">extra parameters used for converting the thing in the array correctly</param>
            <param name="forceType">a type used for converting the thing in the array correctly</param>
            <param name="isJson">If the datatags in the array should be in json format</param>
        </member>
        <member name="P:SharpCraft.Data.DataPartArray.IsJson">
            <summary>
            If the datatags in the array should be in json format
            </summary>
        </member>
        <member name="M:SharpCraft.Data.DataPartArray.AddItem(SharpCraft.Data.IDataPartPathEnding)">
            <summary>
            Adds an item to this array
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:SharpCraft.Data.DataPartArray.GetItems">
            <summary>
            Returns all items stored in this array
            </summary>
            <returns>all items stored in this array</returns>
        </member>
        <member name="P:SharpCraft.Data.DataPartArray.ArrayType">
            <summary>
            The type of array this is
            </summary>
        </member>
        <member name="M:SharpCraft.Data.DataPartArray.GetDataString">
            <summary>
            Returns this data as a string Minecraft can use
            </summary>
            <returns>This object as a string</returns>
        </member>
        <member name="M:SharpCraft.Data.DataPartArray.IsEmpty">
            <summary>
            If the tree part's tags are all empty
            </summary>
            <returns>True if its empty</returns>
        </member>
        <member name="T:SharpCraft.Data.DataPartTag">
            <summary>
            A part of a data tag tree for ending branches
            </summary>
        </member>
        <member name="M:SharpCraft.Data.DataPartTag.#ctor(System.Object,System.Nullable{SharpCraft.ID.NBTTagType},System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Data.DataPartTag"/> with the given value
            </summary>
            <param name="value">The thing this <see cref="T:SharpCraft.Data.DataPartTag"/> should be</param>
            <param name="forceType">The type the object should be forced into. Used for enums and marking strings as objects</param>
            <param name="isJson">If the tag is a json value</param>
        </member>
        <member name="P:SharpCraft.Data.DataPartTag.Value">
            <summary>
            The thing this <see cref="T:SharpCraft.Data.DataPartTag"/> is holding
            </summary>
        </member>
        <member name="P:SharpCraft.Data.DataPartTag.TagType">
            <summary>
            The type of object saved in this tag
            </summary>
        </member>
        <member name="P:SharpCraft.Data.DataPartTag.IsJson">
            <summary>
            If the tag is a json value
            </summary>
        </member>
        <member name="M:SharpCraft.Data.DataPartTag.GetDataString">
            <summary>
            Returns this data as a string Minecraft can use
            </summary>
            <returns>This object as a string</returns>
        </member>
        <member name="M:SharpCraft.Data.DataPartTag.IsEmpty">
            <summary>
            If the tree part's tags are all empty
            </summary>
            <returns>True if its empty</returns>
        </member>
        <member name="M:SharpCraft.Data.DataPartTag.GetTypeEnding(SharpCraft.ID.NBTTagType)">
            <summary>
            Gets the letter there is at the end of the given datatype
            </summary>
            <param name="type">The type to get the ending letter for</param>
            <returns>The ending letter</returns>
        </member>
        <member name="T:SharpCraft.Data.DataPartPath">
            <summary>
            A part of a data tag tree for given branches names
            </summary>
        </member>
        <member name="M:SharpCraft.Data.DataPartPath.#ctor(System.String,SharpCraft.Data.IDataPartPathEnding,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Data.DataPartPath"/>
            </summary>
            <param name="pathName">The name of the path of the value</param>
            <param name="pathValue">The value with the path</param>
            <param name="isJson">If the path is a json path</param>
        </member>
        <member name="P:SharpCraft.Data.DataPartPath.PathName">
            <summary>
            The name of the path of the value
            </summary>
        </member>
        <member name="P:SharpCraft.Data.DataPartPath.IsJson">
            <summary>
            If the path is a json path
            </summary>
        </member>
        <member name="P:SharpCraft.Data.DataPartPath.PathValue">
            <summary>
            The value with the path
            </summary>
        </member>
        <member name="T:SharpCraft.Data.IConvertableToDataTag">
            <summary>
            Makes a class able to convert itself into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
        </member>
        <member name="M:SharpCraft.Data.IConvertableToDataTag.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts the object into a <see cref="T:SharpCraft.Data.DataPartTag"/> of the given type
            </summary>
            <param name="asType">The type of <see cref="T:SharpCraft.Data.DataPartTag"/></param>
            <param name="extraConversionData">Extra parameters for specific conversion</param>
            <returns>The object as a <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="T:SharpCraft.Data.IConvertableToDataArrayBase">
            <summary>
            Makes a class able to convert itself into a <see cref="T:SharpCraft.Data.DataPartArray"/>
            </summary>
        </member>
        <member name="M:SharpCraft.Data.IConvertableToDataArrayBase.GetAsArray(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts the object into a <see cref="T:SharpCraft.Data.DataPartArray"/> of the given type
            </summary>
            <param name="asType">The type of <see cref="T:SharpCraft.Data.DataPartArray"/></param>
            <param name="extraConversionData">Extra parameters for specific conversion</param>
            <returns>The object as a <see cref="T:SharpCraft.Data.DataPartArray"/></returns>
        </member>
        <member name="T:SharpCraft.Data.IConvertableToDataArray`1">
            <summary>
            Makes a class able to convert itself into a <see cref="T:SharpCraft.Data.DataPartArray"/>
            </summary>
            <typeparam name="T">The type of value this array outputs</typeparam>
        </member>
        <member name="M:SharpCraft.Data.IConvertableToDataArray`1.PathArray">
            <summary>
            Used for getting the datapath for this array. Method throws an exception if called.
            </summary>
            <returns>An object to continue the datapath on</returns>
        </member>
        <member name="T:SharpCraft.Data.IConvertableToDataObject">
            <summary>
            Makes a class able to convert itself into a <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
        </member>
        <member name="M:SharpCraft.Data.IConvertableToDataObject.GetAsDataObject(System.Object[])">
            <summary>
            Converts the object into a <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
            <param name="conversionData">parameters for specific conversion</param>
            <returns>The object as a <see cref="T:SharpCraft.Data.DataPartObject"/></returns>
        </member>
        <member name="T:SharpCraft.Data.PathCreatorException">
            <summary>
            Exception for when <see cref="T:SharpCraft.Data.DataPathCreator"/> fails to create a path
            </summary>
        </member>
        <member name="M:SharpCraft.Data.PathCreatorException.#ctor">
            <summary>
            Intalizes a new <see cref="T:SharpCraft.Data.PathCreatorException"/>
            </summary>
        </member>
        <member name="M:SharpCraft.Data.PathCreatorException.#ctor(System.String)">
            <summary>
            Intalizes a new <see cref="T:SharpCraft.Data.PathCreatorException"/>
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:SharpCraft.Data.PathCreatorException.#ctor(System.String,System.Exception)">
            <summary>
            Intalizes a new <see cref="T:SharpCraft.Data.PathCreatorException"/>
            </summary>
            <param name="message">The exception message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:SharpCraft.Data.PathGettingMethodCallException">
            <summary>
            Exception for when a datapath getting method was called directly.
            </summary>
        </member>
        <member name="M:SharpCraft.Data.PathGettingMethodCallException.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Data.PathGettingMethodCallException"/>
            </summary>
        </member>
        <member name="T:SharpCraft.Entity">
            <summary>
            The base class for all entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="M:SharpCraft.Entity.GetDataWithoutID">
            <summary>
            Returns this entity's data without its entity type
            </summary>
            <returns>This entity's data without its entity type</returns>
        </member>
        <member name="P:SharpCraft.Entity.EntityType">
            <summary>
            The type of the entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.BasicEntity">
            <summary>
            The basic entity data
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.BasicEntity.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.BasicEntity.Motion">
            <summary>
            The entity's motion
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BasicEntity.Rotation">
            <summary>
            The entity's rotation
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BasicEntity.Coords">
            <summary>
            The entity's location
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BasicEntity.FallDistance">
            <summary>
            The distance the entity has fallen
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BasicEntity.Fire">
            <summary>
            The time before the fire on the entity goes out.
            Negative value means how long it takes for the entity to turn on fire.
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BasicEntity.Air">
            <summary>
            How much air the entity has left.
            (Being 0 under water will make the entity drown)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BasicEntity.OnGround">
            <summary>
            If the entity is on the ground or not
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BasicEntity.NoGravity">
            <summary>
            If the entity shouldn't be effected by gravity
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BasicEntity.Dimension">
            <summary>
            The dimension the entity is in
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BasicEntity.Invulnerable">
            <summary>
            If the entity is Invulnerable.
            (Can't be killed)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BasicEntity.PortalCooldown">
            <summary>
            The amount of time before the entity can go through a portal again.
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BasicEntity.UUID">
            <summary>
            The entity's UUID
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BasicEntity.CustomName">
            <summary>
            The entity's shown name
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BasicEntity.CustomNameVisible">
            <summary>
            If the entity's name should be shown always
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BasicEntity.Silent">
            <summary>
            If the entity should be silent and not make any sounds
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BasicEntity.Passengers">
            <summary>
            The entities riding on the entity
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BasicEntity.Glowing">
            <summary>
            If the entity should glow
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BasicEntity.Tags">
            <summary>
            The entity's tags
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Interfaces.IVillager">
            <summary>
            Interface for villager like mobs
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Interfaces.IVillager.VillagerLevel">
            <summary>
            The villager's level (~Amount of trades)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Interfaces.IVillager.VillagerProfession">
            <summary>
            The villagers proffesion
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Interfaces.IVillager.VillagerType">
            <summary>
            The type of villager
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Interfaces.IVillager.Gossips">
            <summary>
            The gossips the villager has
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Interfaces.IVillager.Trades">
            <summary>
            The villager's trades
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Interfaces.Gossip">
            <summary>
            Gossip which villagerscan exchange
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Interfaces.Gossip.Type">
            <summary>
            The type of gossip
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Interfaces.Gossip.Strength">
            <summary>
            The gossip's strength 
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Interfaces.Gossip.TartgetUUID">
            <summary>
            The UUID of the player who made this gossip.
            (If its a <see cref="F:SharpCraft.ID.GossipType.golem"/> then its the villager who started the gossip)
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Interfaces.Trade">
            <summary>
            An object used to define trades
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Interfaces.Trade.RewardExp">
            <summary>
            True if the villager gives xp when traded with
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Interfaces.Trade.MaxUses">
            <summary>
            The maximum number of times the trade can be traded before closing
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Interfaces.Trade.Uses">
            <summary>
            The amount of times the trade has been used
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Interfaces.Trade.BuyItem1">
            <summary>
            The first item the villager is buying in this trade
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Interfaces.Trade.BuyItem2">
            <summary>
            The second item the villager is buying in this trade
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Interfaces.Trade.SellItem">
            <summary>
            The item the villager is selling in this trade
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.AreaCloud">
            <summary>
            An object for area effect cloud entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.AreaCloud.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new area effect cloud
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.AreaCloud.Duration">
            <summary>
            The amount of time before the cloud disapears after the <see cref="P:SharpCraft.Entities.AreaCloud.WaitTime"/> is over
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.AreaCloud.Color">
            <summary>
            The color of the particles it displays
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.AreaCloud.Age">
            <summary>
            The amount of time the cloud has existed.
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.AreaCloud.WaitTime">
            <summary>
            The time before the cloud will show up.
            (Time before the <see cref="P:SharpCraft.Entities.AreaCloud.Radius"/> will be used)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.AreaCloud.ReapplicationDealy">
            <summary>
            The time before the cloud's effect will be given out to the entities inside again.
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.AreaCloud.OwnerUUID">
            <summary>
            The UUID of the entity who made the cloud
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.AreaCloud.DurationOnUse">
            <summary>
            The amount of time to remove from the duration every time the cloud gives out its effect
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.AreaCloud.Radius">
            <summary>
            The radius of the cloud
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.AreaCloud.RadiusOnUse">
            <summary>
            The amount of radius to remove every time the cloud gives out its effect
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.AreaCloud.RadiusPerTick">
            <summary>
            The amount of radius to remove each tick.
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.AreaCloud.Particle">
            <summary>
            The particle type the cloud displays
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.AreaCloud.Effects">
            <summary>
            The effect the cloud gives
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.AreaCloud.Unspawnable">
            <summary>
            If the cloud shouldn't despawn
            (Sets <see cref="P:SharpCraft.Entities.AreaCloud.Duration"/> to its max value)
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Armorstand">
            <summary>
            An object for armor stand entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Armorstand.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new armor stand entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Armorstand.SlotRules">
            <summary>
            Choses which slots are locked
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Armorstand.LockedSlots">
            <summary>
            Used to define what slots on an armor stand are locked
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Armorstand.LockedSlots.LockHand">
            <summary>
            Locks the boots item 100%
            </summary>
            <returns>Itself</returns>
        </member>
        <member name="M:SharpCraft.Entities.Armorstand.LockedSlots.LockBoots">
            <summary>
            Locks the boots item 100%
            </summary>
            <returns>Itself</returns>
        </member>
        <member name="M:SharpCraft.Entities.Armorstand.LockedSlots.LockLeggings">
            <summary>
            Locks the leggings item 100%
            </summary>
            <returns>Itself</returns>
        </member>
        <member name="M:SharpCraft.Entities.Armorstand.LockedSlots.LockChestplate">
            <summary>
            Locks the chestplate item 100%
            </summary>
            <returns>Itself</returns>
        </member>
        <member name="M:SharpCraft.Entities.Armorstand.LockedSlots.LockHelmet">
            <summary>
            Locks the helmet item 100%
            </summary>
            <returns>Itself</returns>
        </member>
        <member name="M:SharpCraft.Entities.Armorstand.LockedSlots.LockAll">
            <summary>
            Locks all slots 100%
            </summary>
            <returns>Itself</returns>
        </member>
        <member name="F:SharpCraft.Entities.Armorstand.LockedSlots.LockRemovingHand">
            <summary>
            Makes it impossible to remove the hand item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entities.Armorstand.LockedSlots.LockRemovingBoots">
            <summary>
            Makes it impossible to remove the boots item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entities.Armorstand.LockedSlots.LockRemovingLeggings">
            <summary>
            Makes it impossible to remove the leggings item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entities.Armorstand.LockedSlots.LockRemovingChestplate">
            <summary>
            Makes it impossible to remove the chestplate item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entities.Armorstand.LockedSlots.LockRemovingHelmet">
            <summary>
            Makes it impossible to remove the helmet item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entities.Armorstand.LockedSlots.LockChangingHand">
            <summary>
            Makes it impossible to change the hand item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entities.Armorstand.LockedSlots.LockChangingBoots">
            <summary>
            Makes it impossible to change the boots item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entities.Armorstand.LockedSlots.LockChangingLeggings">
            <summary>
            Makes it impossible to change the leggings item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entities.Armorstand.LockedSlots.LockChangingChestplate">
            <summary>
            Makes it impossible to change the chestplate item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entities.Armorstand.LockedSlots.LockChangingHelmet">
            <summary>
            Makes it impossible to change the helmet item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entities.Armorstand.LockedSlots.LockAddingHand">
            <summary>
            Makes it impossible to add the hand item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entities.Armorstand.LockedSlots.LockAddingBoots">
            <summary>
            Makes it impossible to add the boots item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entities.Armorstand.LockedSlots.LockAddingLeggings">
            <summary>
            Makes it impossible to add the leggings item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entities.Armorstand.LockedSlots.LockAddingChestplate">
            <summary>
            Makes it impossible to add the chestplate item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entities.Armorstand.LockedSlots.LockAddingHelmet">
            <summary>
            Makes it impossible to add the helmet item from the armor stand
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Armorstand.LockedSlots.GetValue">
            <summary>
            Gets the value Minecraft uses to disables slots
            </summary>
            <returns>Raw data used by Minecarft</returns>
        </member>
        <member name="M:SharpCraft.Entities.Armorstand.LockedSlots.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this <see cref="T:SharpCraft.Entities.Armorstand.LockedSlots"/> object into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="extraConversionData">Not used</param>
            <param name="asType">Not used</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="P:SharpCraft.Entities.Armorstand.Marker">
            <summary>
            Makes the armor stand a marker armor stand.
            The armor stand wont have a hitbox.
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Armorstand.HandItems">
            <summary>
            The items there is in the armor stand's hands.
            0: main hand. 1: off hand.
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Armorstand.ArmorItems">
            <summary>
            The items the armor stand has on
            0: boots. 1: leggings. 2: chestplate. 3: helmet
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Armorstand.Invisible">
            <summary>
            Makes the armor stand invisible
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Armorstand.NoBasePlate">
            <summary>
            Removes the armor stand's stone plate
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Armorstand.FallFlying">
            <summary>
            Makes the armor stand fly when falling if it has an elytra on.
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Armorstand.ShowArms">
            <summary>
            If the armor stand should show its arms
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Armorstand.Small">
            <summary>
            If the armor stand is a small armor stand
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Armorstand.BodyRotation">
            <summary>
            Rotates the armor stand's body
            0: x. 1: y. 2: z.
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Armorstand.ArmLeftRotation">
            <summary>
            Rotates the armor stand's left arm
            0: x. 1: y. 2: z.
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Armorstand.ArmRightRotation">
            <summary>
            Rotates the armor stand's right arm
            0: x. 1: y. 2: z.
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Armorstand.LegLeftRotation">
            <summary>
            Rotates the armor stand's left leg
            0: x. 1: y. 2: z.
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Armorstand.LegRightRotation">
            <summary>
            Rotates the armor stand's right leg
            0: x. 1: y. 2: z.
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Armorstand.HeadRotation">
            <summary>
            Rotates the armor stand's head
            0: x. 1: y. 2: z.
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.EndCrystal">
            <summary>
            An object for end crystal entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.EndCrystal.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new end crystal
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.EndCrystal.ShowBottom">
            <summary>
            If the bedrock should be shown under the crystal
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.EndCrystal.BeamTarget">
            <summary>
            The coords the crystal's beam should point to
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.DroppedItem">
            <summary>
            An object for item entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.DroppedItem.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new item
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.DroppedItem.Age">
            <summary>
            The age of the item in ticks. When it hits 6000 it despawns
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.DroppedItem.Health">
            <summary>
            The health of the item. despawns when at 0
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.DroppedItem.PickupDelay">
            <summary>
            The delay before the item can be picked up in ticks
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.DroppedItem.Owner">
            <summary>
            The <see cref="T:SharpCraft.UUID"/> of the entity who can pick up the item
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.DroppedItem.Thrower">
            <summary>
            The <see cref="T:SharpCraft.UUID"/> of the entity who threw the item
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.DroppedItem.ItemData">
            <summary>
            The item itself
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.DroppedItem.Unpickable">
            <summary>
            Makes the item unpickable
            (This overwrites <see cref="P:SharpCraft.Entities.DroppedItem.PickupDelay"/>)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.DroppedItem.IgnoreAge">
            <summary>
            Makes the item not despawn
            (This overwrites <see cref="P:SharpCraft.Entities.DroppedItem.Age"/>)
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.FallingBlock">
            <summary>
            An object for falling block entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.FallingBlock.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new falling block
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.FallingBlock.Time">
            <summary>
            The time the entity has been falling.
            If this number is 0 the entity will dissapear the next tick
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.FallingBlock.TheBlock">
            <summary>
            The falling block
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.FallingBlock.DropItem">
            <summary>
            If the block should be dropped if the falling block is destroyed
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.FallingBlock.HurtEntities">
            <summary>
            If the block should damage entities it lands on
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.FallingBlock.MaxDamage">
            <summary>
            The maximum amount of damage it can cause
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.FallingBlock.DamageAmount">
            <summary>
            The amount of damage it should cause per block fallen
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.EvokerFangs">
            <summary>
            An object for evoker fangs entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.EvokerFangs.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new evoker fangs
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.EvokerFangs.Warmup">
            <summary>
            The amount of time before the fangs appear
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.EvokerFangs.OwnerUUID">
            <summary>
            The <see cref="T:SharpCraft.UUID"/> of the entity who summoned the fangs
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.EvokerFangs.Marker">
            <summary>
            Makes the fang into a marker entity
            (Sets <see cref="P:SharpCraft.Entities.EvokerFangs.Warmup"/> to its max value which makes the entity invisible)
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Firework">
            <summary>
            An object for firework entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Firework.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new firework rocket
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Firework.Angled">
            <summary>
            Makes the firework stop flying upwards automatically
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Firework.Life">
            <summary>
            The amount of time the firework has been flying
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Firework.LifeTime">
            <summary>
            The time before the firework blows up
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Firework.Fireworks">
            <summary>
            The firework displayed when the rocket blows up.
            This also sets <see cref="P:SharpCraft.Entities.Firework.ItemID"/> and <see cref="P:SharpCraft.Entities.Firework.ItemCount"/>
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Firework.ItemID">
            <summary>
            The id of the firework item (is normally <see cref="F:SharpCraft.ID.Item.firework_rocket"/>).
            This is automatically set by <see cref="P:SharpCraft.Entities.Firework.Fireworks"/>
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Firework.ItemCount">
            <summary>
            The amount of firework items (is normally 1).
            This is automatically set by <see cref="P:SharpCraft.Entities.Firework.Fireworks"/>
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Firework.Flight">
            <summary>
            The amount of time the firework will fly
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.ItemPainting">
            <summary>
            An object for item frames and painting entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.ItemPainting.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new item frame or painting entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.ItemPainting.InTile">
            <summary>
            The block the entity is inside
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.ItemPainting.Facing">
            <summary>
            The direction the entity is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.ItemPainting.Painting">
            <summary>
            The type of painting
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.ItemPainting.FrameItem">
            <summary>
            The item in the item frame
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.ItemPainting.FrameDropChance">
            <summary>
            The chance of the frame dropping its item
            (0-1)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.ItemPainting.FrameRotation">
            <summary>
            The rotation of the item in the item frame.
            Rotation = <see cref="P:SharpCraft.Entities.ItemPainting.FrameRotation"/> * 45 degrees clockwise
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.TNT">
            <summary>
            An object for primed tnt entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.TNT.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates new primed tnt
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.TNT.Fuse">
            <summary>
            The time in ticks before the tnt blows up
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.XP">
            <summary>
            An object for xp orb entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.XP.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new xp orb
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.XP.Age">
            <summary>
            The age of the item in ticks. When it hits 6000 it despawns
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.XP.Health">
            <summary>
            The health of the item. despawns when at 0
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.XP.Value">
            <summary>
            The amount of xp in the orb
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.XP.IgnoreAge">
            <summary>
            Makes the orb not despawn
            (This overwrites <see cref="P:SharpCraft.Entities.XP.Age"/>)
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.BreedableMob">
            <summary>
            The basic entity data for breedable mobs
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.BreedableMob.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.BreedableMob.InLove">
            <summary>
            The amount of time the mob will be in love
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BreedableMob.Age">
            <summary>
            When negative it's the time till the mob turns into an adult
            When positive it's the time till the mob can breed again
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BreedableMob.ForcedAge">
            <summary>
            A age which will be given to the mob when it has grown up.
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BreedableMob.LoveCause">
            <summary>
            The <see cref="T:SharpCraft.UUID"/> of the entity who fed the mob
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.BaseIllager">
            <summary>
            The basic entity data for illagers
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.BaseIllager.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.BaseIllager.HasGoal">
            <summary>
            If the illager has a raid goal
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BaseIllager.Patrolling">
            <summary>
            If the illager is patrolling
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BaseIllager.Leader">
            <summary>
            If the illager is the leader
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BaseIllager.PatrolTarget">
            <summary>
            The place the illager is patrolling to
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BaseIllager.RaidID">
            <summary>
            The id of the raid the illager is in
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BaseIllager.Wave">
            <summary>
            the wave number the illager is in
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Illager">
            <summary>
            Entity data for illagers
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Illager.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new illager
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="T:SharpCraft.Entities.Mob">
            <summary>
            The basic entity data for mobs
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Mob.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Mob.Health">
            <summary>
            The amount of health the mob has
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.AbsorptionAmount">
            <summary>
            The amount of extra health the mob has
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.HurtTime">
            <summary>
            Makes the entity turn red for the given time
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.HurtByTimestamp">
            <summary>
            The time since the mob last was hit
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.DeathTime">
            <summary>
            The time the mob has been dead for.
            (0 = alive)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.FallFlying">
            <summary>
            Makes the mob fly when falling if it has an elytra on.
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.DeathLootTable">
            <summary>
            The loot table the mob drops on death
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.DeathLootTableSeed">
            <summary>
            The seed to use when dropping the <see cref="P:SharpCraft.Entities.Mob.DeathLootTable"/>
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.CanPickUpLoot">
            <summary>
            If the mob can pick up armor and items from the ground
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.NoAI">
            <summary>
            If the mob doesn't have an AI
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.PersistenceRequired">
            <summary>
            If the mob shouldn't despawn
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.LeftHanded">
            <summary>
            If the mob's main hand is its left hand
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.Team">
            <summary>
            The team the mob is on
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.LeashCoords">
            <summary>
            The location the mob is leashed to
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.LeashUUID">
            <summary>
            The <see cref="T:SharpCraft.UUID"/> of the leash
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.HandItems">
            <summary>
            The items there is in the mob's hands.
            0: main hand. 1: off hand.
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.ArmorItems">
            <summary>
            The items the mob has on
            0: boots. 1: leggings. 2: chestplate. 3: helmet
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.HandDropChances">
            <summary>
            The chance that the mob will drop its hand items when killed (number between 0-1)
            0: main hand. 1: off hand
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.ArmorDropChances">
            <summary>
            The chance that the mob will drop its armor items when killed (number between 0-1)
            0: boots. 1: leggings. 2: chestplate. 3: helmet
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.ActiveEffects">
            <summary>
            The <see cref="T:SharpCraft.Effect"/>s the mob has
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Mob.Attributes">
            <summary>
            The attributes the mob has
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.TameableMob">
            <summary>
            The basic entity data for tameable
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.TameableMob.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.TameableMob.Sitting">
            <summary>
            If the mob is sitting (wont follow / tp to its owner)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.TameableMob.OwnerUUID">
            <summary>
            the <see cref="T:SharpCraft.UUID"/> of the owner
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Bat">
            <summary>
            Entity data for bats
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Bat.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new bat
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Bat.BatFlags">
            <summary>
            True when flying. False when hanging
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Bee">
            <summary>
            Entity data for Bees
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Bee.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new bee
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Bee.HivePosition">
            <summary>
            The location of the bee's hive
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Bee.FlowerPosition">
            <summary>
            The location of the flower the bee should fly around
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Bee.HasNectar">
            <summary>
            If the bee has pollen
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Bee.HasStung">
            <summary>
            If the bee has stung
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Bee.LastPollination">
            <summary>
            Time since the bee last pollinated
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Bee.ToEnterHive">
            <summary>
            Time till the bee is allowed to enter a hive
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Bee.CropsGrownSincePollination">
            <summary>
            The amount of crops the bee has grown since it last pollinated
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Bee.Anger">
            <summary>
            The amount of time the bee is angry for
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Bee.AngryOn">
            <summary>
            The <see cref="T:SharpCraft.UUID"/> of the entity this bee is angry on
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Cat">
            <summary>
            Entity data for cats
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Cat.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new cat
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Cat.CatType">
            <summary>
            The cat's skin
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Cat.CollarColor">
            <summary>
            The color of the cat's collar
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Chicken">
            <summary>
            Entity data for chickens
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Chicken.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new chicken
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Chicken.IsChickenJockey">
            <summary>
            Makes the chicken despawnable and drop 10 xp
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Chicken.EggLayTime">
            <summary>
            The time till the chicken lays another egg
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Creeper">
            <summary>
            Entity data for creepers
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Creeper.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new creeper
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Creeper.Charged">
            <summary>
            If the creeper is charged (was hit by lightning)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Creeper.ExplosionRadius">
            <summary>
            The size of the explosion caused by the exploded creeper
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Creeper.Fuse">
            <summary>
            The time till the creeper will explode when trying to explode
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Creeper.Ignited">
            <summary>
            If the creeper is ignited and is forced to blow up
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Dolphin">
            <summary>
            Entity data for dolphins
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Dolphin.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new dolphin
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Dolphin.TreasureLocation">
            <summary>
            The location of the treasure the dolphin will lead the player to
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Dolphin.GotFish">
            <summary>
            If the dolphin has gotten any fish from the player
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Dolphin.CanFindTreasure">
            <summary>
            If the dolphin will lead the player to a treasure
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Dragon">
            <summary>
            Entity data for ender dragons
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Dragon.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new ender dragon
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Dragon.Phase">
            <summary>
            The phase the ender dragon is in
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Enderman">
            <summary>
            Entity data for endermen
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Enderman.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new enderman
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Enderman.Holding">
            <summary>
            The block the enderman is holding.
            Note: block data is not supported
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Endermite">
            <summary>
            Entity data for endermites
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Endermite.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new endermite
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Endermite.LifeTime">
            <summary>
            The time the endermite has existed. When hitting 24000 it despawns
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Endermite.PlayerSpawned">
            <summary>
            If the endermite was spawned by a player. If true endermen will attack it.
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Fish">
            <summary>
            Entity data for fishs
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Fish.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new fish
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Fish.FishVariant">
            <summary>
            Fow the tropical fish looks
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Fish.Variant">
            <summary>
            A object used to define how a fish looks
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Fish.Variant.Size">
            <summary>
            The size of the fish
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Fish.Variant.Pattern">
            <summary>
            The fish's pattern
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Fish.Variant.BodyColor">
            <summary>
            The color of the body of the fish
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Fish.Variant.PatternColor">
            <summary>
            The color of the pattern on the fish
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Fish.Variant.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this <see cref="T:SharpCraft.Entities.Fish.Variant"/> object into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">Not used</param>
            <param name="extraConversionData">Not used</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="M:SharpCraft.Entities.Fish.Variant.GetValue">
            <summary>
            Gets the value Minecraft uses
            </summary>
            <returns>Gets raw data used by Minecraft</returns>
        </member>
        <member name="P:SharpCraft.Entities.Fish.FromBucket">
            <summary>
            If the fish comes from a bucket.
            It wont despawn.
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Fish.PuffState">
            <summary>
            The puff state for pufferfish.
            0 = deflated. 1 = halfway puffed-up. 2 = puffed-up.
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Fox">
            <summary>
            Entity data for foxes
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Fox.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new fox
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Fox.FoxType">
            <summary>
            The fox' skin
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Fox.Sleeping">
            <summary>
            If the fox is sleeping
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Fox.Crouching">
            <summary>
            If the fox is crouching
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Ghast">
            <summary>
            Entity data for ghasts
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Ghast.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new ghast
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Ghast.ExplosionPower">
            <summary>
            The size of the explosion caused by the ghast's fireballs
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Horse">
            <summary>
            Entity data for horses, llamas, donkeys and mules
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Horse.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new horse, llama, donkeys or mule
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Horse.Bred">
            <summary>
            Makes the mob stay close to other mobs of the same time with this tag being true
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Horse.EatingHayStack">
            <summary>
            Makes the horse graze
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Horse.Temper">
            <summary>
            Makes the horse easier to tame.
            (Goes up when the horse is fed.)
            (A number between 0-100. the higher the easier to tame)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Horse.OwnerUUID">
            <summary>
            The <see cref="T:SharpCraft.UUID"/> of the owner of the horse
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Horse.HorseSaddle">
            <summary>
            The item the horse has as it's saddle
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Horse.HorseArmor">
            <summary>
            The armor the horse has on
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Horse.DonkeyChested">
            <summary>
            If the donkey has a chest
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Horse.DonkeyItems">
            <summary>
            The items inside the donkeys inventory
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Horse.HorseVariant">
            <summary>
            The horse variant
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Horse.Variant">
            <summary>
            A object used to defina a horse variant
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Horse.Variant.Color">
            <summary>
            The color of the horse
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Horse.Variant.Markings">
            <summary>
            The markings
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Horse.Variant.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this <see cref="T:SharpCraft.Entities.Horse.Variant"/> object into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">Not used</param>
            <param name="extraConversionData">Not used</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="M:SharpCraft.Entities.Horse.Variant.GetValue">
            <summary>
            Gets the value Minecraft uses to define horse variants
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="P:SharpCraft.Entities.Horse.LlamaStrenght">
            <summary>
            How many items the llama can hold
            (1-5. Slots = x * 3)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Horse.LlamaDecorItem">
            <summary>
            The item the llama has on. (Normally carpet)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Horse.SkeletonTrap">
            <summary>
            If the skeleton horse is a trap
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Horse.SkeletonTrapTime">
            <summary>
            The time the skeleton trap has existed. When at 18000 ticks it despawns
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Horse.Tame">
            <summary>
            If the mob is tame
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.IronGolem">
            <summary>
            Entity data for iron golems
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.IronGolem.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new iron golem
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.IronGolem.PlayerCreated">
            <summary>
            If true the golem wont attack players
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.MagicIllager">
            <summary>
            Entity data for evokers and illusioners
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.MagicIllager.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new evoker or illusioner
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.MagicIllager.SpellTicks">
            <summary>
            The time till the next spell is casted
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Ocelot">
            <summary>
            Entity data for ocelots
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Ocelot.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new ocelot
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Ocelot.Trust">
            <summary>
            If the ocelot trusts the player
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Panda">
            <summary>
            Entity data for pandas
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Panda.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new panda
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Panda.MainType">
            <summary>
            The type of the panda
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Panda.HiddenType">
            <summary>
            The panda's hidden type which can be transfered to it's children
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Parrot">
            <summary>
            Entity data for parrots
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Parrot.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new parrot
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Parrot.ParrotType">
            <summary>
            How the parrot looks
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Phantom">
            <summary>
            Entity data for phantoms
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Phantom.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new phantom
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Phantom.Area">
            <summary>
            The phantom will circle around this location when not attacking
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Phantom.Size">
            <summary>
            The size of the phantom.
            (0-64) Damage = 6+size
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Pig">
            <summary>
            Entity data for pigs
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Pig.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new pigs
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Pig.Saddle">
            <summary>
            If the pig has a saddle on
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Player">
            <summary>
            Entity data for players
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Player.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new player
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Player.Version">
            <summary>
            The ID of the Minecraft version the player is in
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.Gamemode">
            <summary>
            The player's gamemode
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.DeathScore">
            <summary>
            The score displayed on death
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.SelectedSlot">
            <summary>
            The slot the player has selected
            (0-8)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.SelectedItem">
            <summary>
            The item the player has selected
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.Spawn">
            <summary>
            The player's spawnpoint
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.ForceSpawn">
            <summary>
            If the player should spawn at the given <see cref="P:SharpCraft.Entities.Player.Spawn"/> even if there is no bed
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.Sleeping">
            <summary>
            If the player is sleeping
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.SleepTime">
            <summary>
            The amount of time the player has been sleeping
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.Food">
            <summary>
            How much food the player has
            (0-20)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.FoodExhaustion">
            <summary>
            How close a food bar is from dissapearing
            (4=lose one bar)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.FoodSaturation">
            <summary>
            How much saturation the player has
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.FoodTimer">
            <summary>
            When this hits 80 ticks and the player has enough food, they will be healed
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.Level">
            <summary>
            The level the player has
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.XPPogress">
            <summary>
            How far the player is to hit next level
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.Totalxp">
            <summary>
            The total amount of xp the player has picked up since last death
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.EnchantSeed">
            <summary>
            The seed used to determine which enchantments should show up for the player
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.Inventory">
            <summary>
            The player's inventory.
            (Slot 0-8 = hotbar left to right)
            (Slot 9-35 = inventory left top to right bottom)
            (Slot 100 = boots, 101 = leggings, 102 = chestplate, 103 = helmet)
            (Slot -106 = off hand)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.Enderchest">
            <summary>
            The items in the player's enderchest
            (Slot 0-26 = left top to right bottom slots)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.Riding">
            <summary>
            The entity the player is riding
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.ShoulderEntityLeft">
            <summary>
            The entity on the player's left shoulder
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.ShoulderEntityRight">
            <summary>
            The entity on the player's right shoulder
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.SeenCredits">
            <summary>
            True if the player has seen the end to overworld credits
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.RecipeCraftingBookFiltered">
            <summary>
            True if the player only sees the crafting recipes they have unlocked
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.RecipeSmeltBookFiltered">
            <summary>
            True if the player only sees the furnace recipes they have unlocked
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.RecipeCraftingBookOpen">
            <summary>
            True if the player has the crafting book open
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.RecipeSmeltBookOpen">
            <summary>
            True if the player has the crafting book open
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.UnlockedRecipes">
            <summary>
            A list of recipes the player has unlocked
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Player.NotSeenRecipes">
            <summary>
            A list of recipes the player has unlocked, but still haven't seen in the recipe book.
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Rabbit">
            <summary>
            Entity data for rabbits
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Rabbit.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new rabbit
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Rabbit.RabbitType">
            <summary>
            The type of rabbit
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Rabbit.MoreCarrotTicks">
            <summary>
            Set to 40 when the rabbit has eaten a carrot.
            Goes down by 0-2 every tick.
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Ravager">
            <summary>
            Entity data for ravagers
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Ravager.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new ravager
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Ravager.Attack">
            <summary>
            Cooldown till it can attack again
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Ravager.Roar">
            <summary>
            Cooldown till it can roar again
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Ravager.Stun">
            <summary>
            Cooldown till it can stun again
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Sheep">
            <summary>
            Entity data for sheeps
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Sheep.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new sheep
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Sheep.Color">
            <summary>
            The sheep's color
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Sheep.Sheared">
            <summary>
            If the sheep is sheared
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Shulker">
            <summary>
            Entity data for shulker
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Shulker.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new shulker
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Shulker.PlacedOn">
            <summary>
            The direction of the block the shulker is placed on
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Shulker.Color">
            <summary>
            The shulker's color.
            Setting this to (ID.Color)16 makes it the normal shulker color
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Shulker.Peek">
            <summary>
            The height of the shulker peek
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Shulker.ApproxCoords">
            <summary>
            The approximate location of the shulker
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Slime">
            <summary>
            Entity data for slimes and magma cubes
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Slime.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new slime or magma cube
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Slime.Size">
            <summary>
            The size of the slime
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Slime.WasOnGround">
            <summary>
            True if the slime touches the ground
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Snowman">
            <summary>
            Entity data for snowmen
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Snowman.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new snowman
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Snowman.Pumpkin">
            <summary>
            True if the snowman has a pumpkin on
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Turtle">
            <summary>
            Entity data for turtles
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Turtle.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new turtle
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Turtle.HomePos">
            <summary>
            The location of the turtles home
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Turtle.TravelPos">
            <summary>
            The location the turtle is traveling to
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Turtle.HasEgg">
            <summary>
            True if the turtle has eggs
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Vex">
            <summary>
            Entity data for vexes
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Vex.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new vex
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Vex.LifeTicks">
            <summary>
            The time till the vex dissapears
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Vex.Bound">
            <summary>
            The location the vex should fly around in
            (It flies to random location in a 15x11x15 around this spot)
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Villager">
            <summary>
            Entity data for villagers
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Villager.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new villager
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Villager.VillagerLevel">
            <summary>
            The villager's level (~Amount of trades)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Villager.VillagerProfession">
            <summary>
            The villagers proffesion
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Villager.VillagerType">
            <summary>
            The type of villager
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Villager.Gossips">
            <summary>
            The gossips the villager has
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Villager.Trades">
            <summary>
            The villager's trades
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Villager.Willing">
            <summary>
            If the villager is willing to mate.
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Villager.LastRestock">
            <summary>
            Time since the villager last restocked
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Villager.LastGossipDecay">
            <summary>
            Time since the villager's gossips escreased in strength
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Villager.RestocksToday">
            <summary>
            The amount of times the villager has restocked since the <see cref="P:SharpCraft.Entities.Villager.LastRestock"/> time.
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Villager.Xp">
            <summary>
            The amount of XP the villager has
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Villager.Inventory">
            <summary>
            The items in the villagers inventory (up to 8 slots)
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Vindicator">
            <summary>
            Entity data for vindicators
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Vindicator.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new vindicator
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Vindicator.Johnny">
            <summary>
            If the vindicator is a Johnny vindicator (attacks everything)
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Wither">
            <summary>
            Entity data for withers
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Wither.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new wither
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Wither.Invul">
            <summary>
            The time before the wither actually spawns / can be fought
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Wolf">
            <summary>
            Entity data for wolves
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Wolf.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new wolf
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Wolf.Color">
            <summary>
            The color of the wolf's collar
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Wolf.Angry">
            <summary>
            If the wolf is angry
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Zombie">
            <summary>
            Entity data for zombies and drowned
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Zombie.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new zombie or drowned
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Zombie.IsBaby">
            <summary>
            If its a baby
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Zombie.CanBreakDoors">
            <summary>
            If its allowed to break doors
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Zombie.DrownedConversionTime">
            <summary>
            Time till it converts into its next drowning type
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Zombie.InWaterTime">
            <summary>
            The amount of time the zombie has been in water
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.ZombiePigman">
            <summary>
            Entity data for zombie pigmen
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.ZombiePigman.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new zombie pigman
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.ZombiePigman.Anger">
            <summary>
            The time till the zombie pigman stops being angry (0 or smaller if not angry)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.ZombiePigman.AngryOn">
            <summary>
            The <see cref="T:SharpCraft.UUID"/> of the entity this pigman is angry on
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.ZombieVillager">
            <summary>
            Entity data for zombie villagers
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.ZombieVillager.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new zombie villager
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.ZombieVillager.VillagerLevel">
            <summary>
            The villager's level (~Amount of trades)
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.ZombieVillager.VillagerProfession">
            <summary>
            The villagers proffesion
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.ZombieVillager.VillagerType">
            <summary>
            The type of villager
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.ZombieVillager.Gossips">
            <summary>
            The gossips the villager has
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.ZombieVillager.Trades">
            <summary>
            The villager's trades
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.ZombieVillager.ConversionTime">
            <summary>
            The time till this zombie villager turns into a villager. -1 when not being converted
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.ZombieVillager.ConverterUUID">
            <summary>
            The <see cref="T:SharpCraft.UUID"/> of the player who is converting this zombie villager
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Arrow">
            <summary>
            Entity data for arrows
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Arrow.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new arrow
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Arrow.Shake">
            <summary>
            The arrow shaking when hitting a block
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Arrow.Pickupable">
            <summary>
            Rules for picking up the arrow
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Arrow.PlayerShot">
            <summary>
            If the arrow is shot by a player
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Arrow.Life">
            <summary>
            When it hits 1200 ticks while not moving the arrow despawns
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Arrow.Damage">
            <summary>
            The amount of damage dealt by the arrow
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Arrow.InGround">
            <summary>
            If the arrow is in the ground
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Arrow.Crit">
            <summary>
            If the deals critical damage
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Arrow.Color">
            <summary>
            The color of the arrow
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Arrow.CustomPotionEffects">
            <summary>
            The effects given by the arrow
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Arrow.CustomPotionColor">
            <summary>
            The color of the arrow's particles
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Arrow.SpectralDuration">
            <summary>
            The amount of duration of the glowing effect given by the spectral arrow
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.BaseProjectile">
            <summary>
            The base of all projectile entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.BaseProjectile.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.BaseProjectile.TileCoords">
            <summary>
            The coords of the block
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.BaseProjectile.InBlock">
            <summary>
            The block this projectile is in
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.MobProjectile">
            <summary>
            Entity data for <see cref="F:SharpCraft.ID.Entity.dragon_fireball"/>s, <see cref="F:SharpCraft.ID.Entity.fireball"/>s, <see cref="F:SharpCraft.ID.Entity.small_fireball"/> and <see cref="F:SharpCraft.ID.Entity.wither_skull"/>s
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.MobProjectile.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new <see cref="F:SharpCraft.ID.Entity.dragon_fireball"/>, <see cref="F:SharpCraft.ID.Entity.fireball"/>, <see cref="F:SharpCraft.ID.Entity.small_fireball"/> or <see cref="F:SharpCraft.ID.Entity.wither_skull"/>
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.MobProjectile.Direction">
            <summary>
            The direction the projectile flies in
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MobProjectile.Life">
            <summary>
            The amount of time the projectile hasnt been moving
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MobProjectile.Power">
            <summary>
            The direction the projectile flies in nonestop
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MobProjectile.GhastExplosionPower">
            <summary>
            The power of the explosion caused by the ghast ball
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.ShulkerBullet">
            <summary>
            An object for shulker bullets
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.ShulkerBullet.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new shulker bullet
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.ShulkerBullet.Owner">
            <summary>
            The owner of the bullet
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.ShulkerBullet.OwnerCoords">
            <summary>
            The owner's location
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.ShulkerBullet.Target">
            <summary>
            The bullet's target
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.ShulkerBullet.TargetCoords">
            <summary>
            The target's location
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.ShulkerBullet.Steps">
            <summary>
            The amount of steps it takes to get to the target
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.ShulkerBullet.OffsetTarget">
            <summary>
            The offset distance from the bullet to the target
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.LlamaSpit">
            <summary>
            An object for llama spit entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.LlamaSpit.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates new llama spit
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.LlamaSpit.OwnerUUID">
            <summary>
            The owner of the spit
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Throwable">
            <summary>
            Entity data for <see cref="F:SharpCraft.ID.Entity.egg"/>s, <see cref="F:SharpCraft.ID.Entity.ender_pearl"/>s, <see cref="F:SharpCraft.ID.Entity.experience_bottle"/>s, <see cref="F:SharpCraft.ID.Entity.potion"/>s and <see cref="F:SharpCraft.ID.Entity.snowball"/>s
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Throwable.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new <see cref="F:SharpCraft.ID.Entity.egg"/>, <see cref="F:SharpCraft.ID.Entity.ender_pearl"/>, <see cref="F:SharpCraft.ID.Entity.experience_bottle"/>, <see cref="F:SharpCraft.ID.Entity.potion"/> or <see cref="F:SharpCraft.ID.Entity.snowball"/>
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Throwable.Shake">
            <summary>
            The entity shaking when hitting a block
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Throwable.Owner">
            <summary>
            The owner of the projectile
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Throwable.Potion">
            <summary>
            The type of thrown potion
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Throwable.DisplayItem">
            <summary>
            The item the entity is displayed as
            (Potions do not support use this)
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Minecart">
            <summary>
            The basic entity data for minecarts
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Minecart.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Minecart.CustomDisplayTile">
            <summary>
            If <see cref="P:SharpCraft.Entities.Minecart.DisplayBlock"/> should be displayed
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Minecart.DisplayBlock">
            <summary>
            The block to display
            Note: block data is not supported
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.Minecart.DisplayOffset">
            <summary>
            The y-offset the block is displayed with
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.Boat">
            <summary>
            Entity data for boats
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.Boat.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new boat
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.Boat.Type">
            <summary>
            The type of boat
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.MinecartChest">
            <summary>
            Entity data for chest minecarts
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.MinecartChest.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new chest minecart
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.MinecartChest.LootTable">
            <summary>
            The chest's loottable
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MinecartChest.LootTableSeed">
            <summary>
            The seed used to generate the loot
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MinecartChest.Items">
            <summary>
            The items in the chest
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.MinecartCommand">
            <summary>
            Entity data for command block minecarts
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.MinecartCommand.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new command block minecart
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.MinecartCommand.Command">
            <summary>
            The command to run
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MinecartCommand.LastOutput">
            <summary>
            The command's text output
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MinecartCommand.SuccessCount">
            <summary>
            The command's output
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MinecartCommand.TrackOutput">
            <summary>
            Makes it so last output will be stored in <see cref="P:SharpCraft.Entities.MinecartCommand.LastOutput"/>
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.MinecartFurnace">
            <summary>
            Entity data for furnace minecarts
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.MinecartFurnace.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new furnace minecart
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.MinecartFurnace.PushX">
            <summary>
            Force along the x axis
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MinecartFurnace.PushZ">
            <summary>
            Force along the y axis
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MinecartFurnace.Fuel">
            <summary>
            The time till the furnace's fuel runs out
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.MinecartHopper">
            <summary>
            Entity data for hopper minecarts
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.MinecartHopper.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new hopper minecart
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.MinecartHopper.LootTable">
            <summary>
            The hopper's loottable
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MinecartHopper.LootTableSeed">
            <summary>
            The seed used to generate the loot
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MinecartHopper.Items">
            <summary>
            The items in the hopper
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MinecartHopper.Enabled">
            <summary>
            If the hopper is enabled
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MinecartHopper.TransferCooldown">
            <summary>
            Time until it transfer another item
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.MinecartSpawner">
            <summary>
            Entity data for spawner minecarts
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.MinecartSpawner.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new spawner minecart
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.MinecartSpawner.Potentials">
            <summary>
            The entities the spawner can spawn
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MinecartSpawner.SpawnCount">
            <summary>
            How many entities to try to spawn every time
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MinecartSpawner.SpawnRange">
            <summary>
            The range to spawn the entities in
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MinecartSpawner.Delay">
            <summary>
            Time till the next spawn
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MinecartSpawner.RandomDelay">
            <summary>
            The amount of ticks to randomly add to the next spawn
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MinecartSpawner.MaxEntities">
            <summary>
            The maximum amount of entities there can be around the spawner for it to spawn
            </summary>
        </member>
        <member name="P:SharpCraft.Entities.MinecartSpawner.PlayerRange">
            <summary>
            The range the player has to be in for the spawner to start spawning
            (<see cref="P:SharpCraft.Entities.MinecartSpawner.MaxEntities"/> has to be set for this to work)
            </summary>
        </member>
        <member name="T:SharpCraft.Entities.MinecartTNT">
            <summary>
            Entity data for tnt minecarts
            </summary>
        </member>
        <member name="M:SharpCraft.Entities.MinecartTNT.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new tnt minecart
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entities.MinecartTNT.TNTFuse">
            <summary>
            Time till it explodes
            (-1 ticks = not exploding)
            </summary>
        </member>
        <member name="T:SharpCraft.Items.BucketFish">
            <summary>
            An object for fish in a bucket
            </summary>
        </member>
        <member name="M:SharpCraft.Items.BucketFish.#ctor">
            <summary>
            Creates an item without an id or anything but which can have data
            This is used to test for item with data
            </summary>
        </member>
        <member name="M:SharpCraft.Items.BucketFish.#ctor(SharpCraft.ItemType,System.Nullable{System.SByte},System.Nullable{System.SByte})">
            <summary>
            Creates a new item
            </summary>
            <param name="ItemID">The type of the item. If null the item has no type</param>
            <param name="Count">The amount of the item. If null the item has no amount</param>
            <param name="Slot">The slot the item is in. If null the item isn't in a slot</param>
        </member>
        <member name="P:SharpCraft.Items.BucketFish.Variant">
            <summary>
            The variant of tropical fish in the bucket
            </summary>
        </member>
        <member name="T:SharpCraft.Items.Crossbow">
            <summary>
            An object for crossbow
            </summary>
        </member>
        <member name="M:SharpCraft.Items.Crossbow.#ctor">
            <summary>
            Creates an item without an id or anything but which can have data
            This is used to test for item with data
            </summary>
        </member>
        <member name="M:SharpCraft.Items.Crossbow.#ctor(SharpCraft.ItemType,System.Nullable{System.SByte},System.Nullable{System.SByte})">
            <summary>
            Creates a new item
            </summary>
            <param name="ItemID">The type of the item. If null the item has no type</param>
            <param name="Count">The amount of the item. If null the item has no amount</param>
            <param name="Slot">The slot the item is in. If null the item isn't in a slot</param>
        </member>
        <member name="P:SharpCraft.Items.Crossbow.Projectile">
            <summary>
            The item there is in the crossbow
            </summary>
        </member>
        <member name="P:SharpCraft.Items.Crossbow.Charged">
            <summary>
            If the crossbow is charged
            </summary>
        </member>
        <member name="T:SharpCraft.Items.DebugStick">
            <summary>
            An object for debug sticks
            </summary>
        </member>
        <member name="M:SharpCraft.Items.DebugStick.#ctor">
            <summary>
            Creates an item without an id or anything but which can have data
            This is used to test for item with data
            </summary>
        </member>
        <member name="M:SharpCraft.Items.DebugStick.#ctor(SharpCraft.ItemType,System.Nullable{System.SByte},System.Nullable{System.SByte})">
            <summary>
            Creates a new item
            </summary>
            <param name="ItemID">The type of the item. If null the item has no type</param>
            <param name="Count">The amount of the item. If null the item has no amount</param>
            <param name="Slot">The slot the item is in. If null the item isn't in a slot</param>
        </member>
        <member name="P:SharpCraft.Items.DebugStick.LatestProperties">
            <summary>
            List of properties this debug stick last edited.
            </summary>
        </member>
        <member name="T:SharpCraft.Items.DebugStick.StateList">
            <summary>
            Class for holding a list of states
            </summary>
        </member>
        <member name="M:SharpCraft.Items.DebugStick.StateList.#ctor(SharpCraft.Items.DebugStick.State[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Items.DebugStick.StateList"/>
            </summary>
            <param name="states">states this list is holding</param>
        </member>
        <member name="M:SharpCraft.Items.DebugStick.StateList.GetStatePath(SharpCraft.BlockType)">
            <summary>
            Used for getting the path to the remembered state for a block
            </summary>
            <param name="block">The block to get the remembered state for</param>
            <returns></returns>
        </member>
        <member name="M:SharpCraft.Items.DebugStick.StateList.StatePathGenerator(SharpCraft.Data.DataConvertionAttribute,System.Reflection.MemberInfo,System.Collections.Generic.IReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Used for generating state datapaths.
            </summary>
            <param name="convertionInfo">Data on how the paths should be generated</param>
            <param name="caller">The method/property calling this method</param>
            <param name="arguments">Arguments from the calling method</param>
        </member>
        <member name="P:SharpCraft.Items.DebugStick.StateList.States">
            <summary>
            states this list is holding
            </summary>
        </member>
        <member name="M:SharpCraft.Items.DebugStick.StateList.GetAsDataObject(System.Object[])">
            <summary>
            Converts this object into a <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
            <param name="conversionData">Not used</param>
            <returns>This object into a <see cref="T:SharpCraft.Data.DataPartObject"/></returns>
        </member>
        <member name="T:SharpCraft.Items.DebugStick.State">
            <summary>
            Class for holding a property a debug stick should remember
            </summary>
        </member>
        <member name="M:SharpCraft.Items.DebugStick.State.New``1(SharpCraft.BlockType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Items.DebugStick.State"/>
            </summary>
            <typeparam name="T">Block to get the state for</typeparam>
            <param name="stateOwner">The block id of the block holding the state</param>
            <param name="stateHoldingProperty">The state</param>
            <returns></returns>
        </member>
        <member name="P:SharpCraft.Items.DebugStick.State.StateOwner">
            <summary>
            The block type holding the property
            </summary>
        </member>
        <member name="M:SharpCraft.Items.DebugStick.State.SetState``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Sets the state saved in the debug stick
            </summary>
            <param name="stateHoldingProperty"></param>
        </member>
        <member name="M:SharpCraft.Items.DebugStick.State.GetState">
            <summary>
            Returns the property holding the state
            </summary>
            <returns>Property holding the state</returns>
        </member>
        <member name="M:SharpCraft.Items.DebugStick.State.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this object into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">Not used</param>
            <param name="extraConversionData">Not used</param>
            <returns>This object into a <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="T:SharpCraft.Items.EnchantedBook">
            <summary>
            An object for enchanted book items
            </summary>
        </member>
        <member name="M:SharpCraft.Items.EnchantedBook.#ctor">
            <summary>
            Creates an item without an id or anything but which can have data
            This is used to test for item with data
            </summary>
        </member>
        <member name="M:SharpCraft.Items.EnchantedBook.#ctor(SharpCraft.ItemType,System.Nullable{System.SByte},System.Nullable{System.SByte})">
            <summary>
            Creates a new item
            </summary>
            <param name="ItemID">The type of the item. If null the item has no type</param>
            <param name="Count">The amount of the item. If null the item has no amount</param>
            <param name="Slot">The slot the item is in. If null the item isn't in a slot</param>
        </member>
        <member name="P:SharpCraft.Items.EnchantedBook.StoredEnchants">
            <summary>
            The stored enchantments the item has. These enchants does not effect anything. but can be extracted from the book with an anvil.
            </summary>
        </member>
        <member name="T:SharpCraft.Items.FireworkRocket">
            <summary>
            An object for firework rocket items
            </summary>
        </member>
        <member name="M:SharpCraft.Items.FireworkRocket.#ctor">
            <summary>
            Creates an item without an id or anything but which can have data
            This is used to test for item with data
            </summary>
        </member>
        <member name="M:SharpCraft.Items.FireworkRocket.#ctor(SharpCraft.ItemType,System.Nullable{System.SByte},System.Nullable{System.SByte})">
            <summary>
            Creates a new item
            </summary>
            <param name="ItemID">The type of the item. If null the item has no type</param>
            <param name="Count">The amount of the item. If null the item has no amount</param>
            <param name="Slot">The slot the item is in. If null the item isn't in a slot</param>
        </member>
        <member name="P:SharpCraft.Items.FireworkRocket.Explosion">
            <summary>
            The data for a firework rocket
            </summary>
        </member>
        <member name="P:SharpCraft.Items.FireworkRocket.RocketFlight">
            <summary>
            How many seconds the rocket will fly for
            </summary>
        </member>
        <member name="T:SharpCraft.Items.FireworkStar">
            <summary>
            An object for firework star items
            </summary>
        </member>
        <member name="M:SharpCraft.Items.FireworkStar.#ctor">
            <summary>
            Creates an item without an id or anything but which can have data
            This is used to test for item with data
            </summary>
        </member>
        <member name="M:SharpCraft.Items.FireworkStar.#ctor(SharpCraft.ItemType,System.Nullable{System.SByte},System.Nullable{System.SByte})">
            <summary>
            Creates a new item
            </summary>
            <param name="ItemID">The type of the item. If null the item has no type</param>
            <param name="Count">The amount of the item. If null the item has no amount</param>
            <param name="Slot">The slot the item is in. If null the item isn't in a slot</param>
        </member>
        <member name="P:SharpCraft.Items.FireworkStar.Explosion">
            <summary>
            The data for a single firework star item
            </summary>
        </member>
        <member name="T:SharpCraft.Items.Leather">
            <summary>
            An object for colorable leather items
            </summary>
        </member>
        <member name="M:SharpCraft.Items.Leather.#ctor">
            <summary>
            Creates an item without an id or anything but which can have data
            This is used to test for item with data
            </summary>
        </member>
        <member name="M:SharpCraft.Items.Leather.#ctor(SharpCraft.ItemType,System.Nullable{System.SByte},System.Nullable{System.SByte})">
            <summary>
            Creates a new item
            </summary>
            <param name="ItemID">The type of the item. If null the item has no type</param>
            <param name="Count">The amount of the item. If null the item has no amount</param>
            <param name="Slot">The slot the item is in. If null the item isn't in a slot</param>
        </member>
        <member name="P:SharpCraft.Items.Leather.Color">
            <summary>
            The color of the leather armor
            </summary>
        </member>
        <member name="T:SharpCraft.Items.Map">
            <summary>
            An object for map items
            </summary>
        </member>
        <member name="M:SharpCraft.Items.Map.#ctor">
            <summary>
            Creates an item without an id or anything but which can have data
            This is used to test for item with data
            </summary>
        </member>
        <member name="M:SharpCraft.Items.Map.#ctor(SharpCraft.ItemType,System.Nullable{System.SByte},System.Nullable{System.SByte})">
            <summary>
            Creates a new item
            </summary>
            <param name="ItemID">The type of the item. If null the item has no type</param>
            <param name="Count">The amount of the item. If null the item has no amount</param>
            <param name="Slot">The slot the item is in. If null the item isn't in a slot</param>
        </member>
        <member name="T:SharpCraft.Items.Map.Icon">
            <summary>
            A class used to define map icons
            </summary>
        </member>
        <member name="P:SharpCraft.Items.Map.Icon.ID">
            <summary>
            A random name for the marker
            </summary>
        </member>
        <member name="P:SharpCraft.Items.Map.Icon.MarkerType">
            <summary>
            The type of marker symbol
            </summary>
        </member>
        <member name="P:SharpCraft.Items.Map.Icon.X">
            <summary>
            The location to show it at.
            </summary>
        </member>
        <member name="P:SharpCraft.Items.Map.Icon.Z">
            <summary>
            Tge location to show it at.
            </summary>
        </member>
        <member name="P:SharpCraft.Items.Map.Icon.Rotation">
            <summary>
            The icon's rotation
            </summary>
        </member>
        <member name="P:SharpCraft.Items.Map.Icon.IconString">
            <summary>
            The raw data used by the game to make icons on maps
            </summary>
        </member>
        <member name="P:SharpCraft.Items.Map.MapID">
            <summary>
            The map's ID
            </summary>
        </member>
        <member name="P:SharpCraft.Items.Map.Icons">
            <summary>
            The icons displayed on the map.
            </summary>
        </member>
        <member name="P:SharpCraft.Items.Map.Color">
            <summary>
            The color the map item has.
            (The small black text like things on the paper)
            </summary>
        </member>
        <member name="T:SharpCraft.Items.PlayerHead">
            <summary>
            An object for player heads
            </summary>
        </member>
        <member name="M:SharpCraft.Items.PlayerHead.#ctor">
            <summary>
            Creates an item without an id or anything but which can have data
            This is used to test for item with data
            </summary>
        </member>
        <member name="M:SharpCraft.Items.PlayerHead.#ctor(SharpCraft.ItemType,System.Nullable{System.SByte},System.Nullable{System.SByte})">
            <summary>
            Creates a new item
            </summary>
            <param name="ItemID">The type of the item. If null the item has no type</param>
            <param name="Count">The amount of the item. If null the item has no amount</param>
            <param name="Slot">The slot the item is in. If null the item isn't in a slot</param>
        </member>
        <member name="P:SharpCraft.Items.PlayerHead.PlayerName">
            <summary>
            The name of the player whose skin to display. Tag doesn't work with other head tags.
            </summary>
        </member>
        <member name="P:SharpCraft.Items.PlayerHead.UUID">
            <summary>
            The UUID of the player to show the skin for.
            </summary>
        </member>
        <member name="P:SharpCraft.Items.PlayerHead.HeadName">
            <summary>
            The name of the player whose skin to display.
            </summary>
        </member>
        <member name="P:SharpCraft.Items.PlayerHead.Textures">
            <summary>
            Textures saved in the skull.
            </summary>
        </member>
        <member name="T:SharpCraft.Items.Potion">
            <summary>
            The data for potions
            </summary>
        </member>
        <member name="M:SharpCraft.Items.Potion.#ctor">
            <summary>
            Creates an item without an id or anything but which can have data
            This is used to test for item with data
            </summary>
        </member>
        <member name="M:SharpCraft.Items.Potion.#ctor(SharpCraft.ItemType,System.Nullable{System.SByte},System.Nullable{System.SByte})">
            <summary>
            Creates a new item
            </summary>
            <param name="ItemID">The type of the item. If null the item has no type</param>
            <param name="Count">The amount of the item. If null the item has no amount</param>
            <param name="Slot">The slot the item is in. If null the item isn't in a slot</param>
        </member>
        <member name="P:SharpCraft.Items.Potion.PotionEffects">
            <summary>
            The effects given by the potion
            </summary>
        </member>
        <member name="P:SharpCraft.Items.Potion.PotionColor">
            <summary>
            The color of the potion
            </summary>
        </member>
        <member name="P:SharpCraft.Items.Potion.PotionType">
            <summary>
            The effect given by the potion using minecraft values.
            </summary>
        </member>
        <member name="T:SharpCraft.Items.RecipeBook">
            <summary>
            An object for recipe book items
            </summary>
        </member>
        <member name="M:SharpCraft.Items.RecipeBook.#ctor">
            <summary>
            Creates an item without an id or anything but which can have data
            This is used to test for item with data
            </summary>
        </member>
        <member name="M:SharpCraft.Items.RecipeBook.#ctor(SharpCraft.ItemType,System.Nullable{System.SByte},System.Nullable{System.SByte})">
            <summary>
            Creates a new item
            </summary>
            <param name="ItemID">The type of the item. If null the item has no type</param>
            <param name="Count">The amount of the item. If null the item has no amount</param>
            <param name="Slot">The slot the item is in. If null the item isn't in a slot</param>
        </member>
        <member name="P:SharpCraft.Items.RecipeBook.UnlockRecipes">
            <summary>
            The recipes unlocked when right clicking a recipe book
            </summary>
        </member>
        <member name="T:SharpCraft.Items.SuspiciousStew">
            <summary>
            An object for suspicious stew
            </summary>
        </member>
        <member name="M:SharpCraft.Items.SuspiciousStew.#ctor">
            <summary>
            Creates an item without an id or anything but which can have data
            This is used to test for item with data
            </summary>
        </member>
        <member name="M:SharpCraft.Items.SuspiciousStew.#ctor(SharpCraft.ItemType,System.Nullable{System.SByte},System.Nullable{System.SByte})">
            <summary>
            Creates a new item
            </summary>
            <param name="ItemID">The type of the item. If null the item has no type</param>
            <param name="Count">The amount of the item. If null the item has no amount</param>
            <param name="Slot">The slot the item is in. If null the item isn't in a slot</param>
        </member>
        <member name="P:SharpCraft.Items.SuspiciousStew.Effect">
            <summary>
            The effect the stew gives
            </summary>
        </member>
        <member name="P:SharpCraft.Items.SuspiciousStew.Duration">
            <summary>
            The duration of the effect.
            </summary>
        </member>
        <member name="T:SharpCraft.Items.WrittenBook">
            <summary>
            An object for written book items
            </summary>
        </member>
        <member name="M:SharpCraft.Items.WrittenBook.#ctor">
            <summary>
            Creates an item without an id or anything but which can have data
            This is used to test for item with data
            </summary>
        </member>
        <member name="M:SharpCraft.Items.WrittenBook.#ctor(SharpCraft.ItemType,System.Nullable{System.SByte},System.Nullable{System.SByte})">
            <summary>
            Creates a new item
            </summary>
            <param name="ItemID">The type of the item. If null the item has no type</param>
            <param name="Count">The amount of the item. If null the item has no amount</param>
            <param name="Slot">The slot the item is in. If null the item isn't in a slot</param>
        </member>
        <member name="P:SharpCraft.Items.WrittenBook.Generation">
            <summary>
            The generation of the book.
            (How much it has been copied)
            </summary>
        </member>
        <member name="P:SharpCraft.Items.WrittenBook.Author">
            <summary>
            The auther of the book
            </summary>
        </member>
        <member name="P:SharpCraft.Items.WrittenBook.Title">
            <summary>
            The book's title
            </summary>
        </member>
        <member name="P:SharpCraft.Items.WrittenBook.Pages">
            <summary>
            The book's pages.
            Each index in the first array means a new page.
            </summary>
        </member>
        <member name="T:SharpCraft.Item">
            <summary>
            Class for items
            </summary>
        </member>
        <member name="M:SharpCraft.Item.#ctor">
            <summary>
            Creates an item without an id or anything but which can have data
            This is used to test for item with data
            </summary>
        </member>
        <member name="M:SharpCraft.Item.#ctor(SharpCraft.ItemType,System.Nullable{System.SByte},System.Nullable{System.SByte})">
            <summary>
            Creates a new item
            </summary>
            <param name="itemID">The type of the item. If null the item has no type</param>
            <param name="count">The amount of the item. If null the item has no amount</param>
            <param name="slot">The slot the item is in. If null the item isn't in a slot</param>
        </member>
        <member name="P:SharpCraft.Item.Count">
            <summary>
            The count of this item.
            If null the item doesnt have a count
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Slot">
            <summary>
            The slot this item is in
            If null the item isnt in a slot
            </summary>
        </member>
        <member name="P:SharpCraft.Item.ID">
            <summary>
            The item type
            If null the item isnt any item type
            </summary>
        </member>
        <member name="T:SharpCraft.Item.Enchantment">
            <summary>
            An object used to define item enchantments
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Enchantment.ID">
            <summary>
            The type of the enchantment
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Enchantment.LVL">
            <summary>
            The level of the enchantment
            </summary>
        </member>
        <member name="M:SharpCraft.Item.Enchantment.#ctor(System.Nullable{SharpCraft.ID.Enchant},System.Nullable{System.Int32})">
            <summary>
            Creates a new enchantment
            </summary>
            <param name="id">The enchantment type</param>
            <param name="level">The enchantment level</param>
        </member>
        <member name="T:SharpCraft.Item.HideFlags">
            <summary>
            An object used to define what flags on an item are hidden
            </summary>
        </member>
        <member name="P:SharpCraft.Item.HideFlags.Enchants">
            <summary>
            If enchantments should be hidden
            </summary>
        </member>
        <member name="P:SharpCraft.Item.HideFlags.Attributes">
            <summary>
            If attributes should be hidden
            </summary>
        </member>
        <member name="P:SharpCraft.Item.HideFlags.Unbreakable">
            <summary>
            If it should be hidden its unbreakabel
            </summary>
        </member>
        <member name="P:SharpCraft.Item.HideFlags.CanDestroy">
            <summary>
            If the blocks it can destroy should be hidden
            </summary>
        </member>
        <member name="P:SharpCraft.Item.HideFlags.CanPlaceOn">
            <summary>
            If the blocks it can place on should be hidden
            </summary>
        </member>
        <member name="P:SharpCraft.Item.HideFlags.NormalLore">
            <summary>
            If the lore should be hidden
            </summary>
        </member>
        <member name="P:SharpCraft.Item.HideFlags.HideFlagsNumber">
            <summary>
            Gets the raw data used by the game to hide flags
            </summary>
        </member>
        <member name="M:SharpCraft.Item.HideFlags.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this <see cref="T:SharpCraft.Item.HideFlags"/> object into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">Not used</param>
            <param name="extraConversionData">Not used</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="P:SharpCraft.Item.Unbreakable">
            <summary>
            Makes the item unbreakable
            </summary>
        </member>
        <member name="P:SharpCraft.Item.CanDestroy">
            <summary>
            A list of blocks the item can destroy in adventure mode
            </summary>
        </member>
        <member name="P:SharpCraft.Item.CanPlaceOn">
            <summary>
            A list of blocks the item can be placed on in adventure mode
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Damage">
            <summary>
            How much damage the item has taken
            </summary>
        </member>
        <member name="P:SharpCraft.Item.BlockData">
            <summary>
            The data the block will have when the item is placed
            </summary>
        </member>
        <member name="P:SharpCraft.Item.EntityTag">
            <summary>
            The data the entity will have when the item is placed
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Enchants">
            <summary>
            The enchants the item has on
            </summary>
        </member>
        <member name="P:SharpCraft.Item.RepairCost">
            <summary>
            Number of levels to add to the base levels when using an anvil
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Name">
            <summary>
            The item's shown name
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Lore">
            <summary>
            The item's lore.
            Each index in the first array means a new line.
            </summary>
        </member>
        <member name="P:SharpCraft.Item.HiddenFlags">
            <summary>
            The things to hide on the item.
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Attributes">
            <summary>
            The attributes the item has
            </summary>
        </member>
        <member name="P:SharpCraft.Item.FakeTag">
            <summary>
            A fake tag. A place to write directly in the item's data.
            </summary>
        </member>
        <member name="P:SharpCraft.Item.ExtraData">
            <summary>
            Extra data for this item to hold
            </summary>
        </member>
        <member name="P:SharpCraft.Item.CustomModelData">
            <summary>
            The item's model ID
            </summary>
        </member>
        <member name="M:SharpCraft.Item.Clone(System.SByte)">
            <summary>
            Clones the item and change the count of the item
            </summary>
            <param name="count">The new count of the item</param>
            <returns>The new cloned item</returns>
        </member>
        <member name="M:SharpCraft.Item.Clone(System.SByte,System.SByte)">
            <summary>
            Clones the item and change the count and slot of the item
            </summary>
            <param name="count">The new count of the item</param>
            <param name="slot">The new slot the item is in</param>
            <returns>The new cloned item</returns>
        </member>
        <member name="M:SharpCraft.Item.GetItemTagString">
            <summary>
            Returns the item's data from the .tag tag
            </summary>
            <returns>the .tag data. Null if there is not data there</returns>
        </member>
        <member name="M:SharpCraft.Item.GetIDDataString">
            <summary>
            The items raw data with id at the start
            Used for give item commands
            </summary>
        </member>
        <member name="M:SharpCraft.Item.AddExtraData(SharpCraft.Data.DataHolderBase[])">
            <summary>
            Adds extra data to this item
            </summary>
            <param name="data">The data to add to the item</param>
        </member>
        <member name="M:SharpCraft.Item.op_Implicit(SharpCraft.ID.Item)~SharpCraft.Item">
            <summary>
            Converts an item id into a simple item
            </summary>
            <param name="item">The item id to convert</param>
        </member>
        <member name="T:SharpCraft.Item.ExtraDataList">
            <summary>
            A list of <see cref="T:SharpCraft.Data.SimpleDataHolder"/>
            </summary>
        </member>
        <member name="M:SharpCraft.Item.ExtraDataList.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Item.ExtraDataList"/>
            </summary>
        </member>
        <member name="M:SharpCraft.Item.ExtraDataList.#ctor(SharpCraft.Data.DataHolderBase[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Item.ExtraDataList"/>
            </summary>
            <param name="startData">Data which is in the list from the start</param>
        </member>
        <member name="M:SharpCraft.Item.ExtraDataList.#ctor(System.Collections.Generic.List{SharpCraft.Data.DataHolderBase})">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Item.ExtraDataList"/>
            </summary>
            <param name="data">Data the list should start with</param>
        </member>
        <member name="P:SharpCraft.Item.ExtraDataList.Data">
            <summary>
            Data this list is holding
            </summary>
        </member>
        <member name="M:SharpCraft.Item.ExtraDataList.AddData(SharpCraft.Data.DataHolderBase[])">
            <summary>
            Adds the given data to the list
            </summary>
            <param name="data">The data to add</param>
        </member>
        <member name="M:SharpCraft.Item.ExtraDataList.ContinuePath``1">
            <summary>
            Used for getting the paths for a <see cref="T:SharpCraft.Data.DataHolderBase"/>. Do not call this method without using <see cref="T:SharpCraft.Data.DataPathCreator"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:SharpCraft.Data.DataHolderBase"/> to get the path for</typeparam>
        </member>
        <member name="M:SharpCraft.Item.ExtraDataList.GetAsDataObject(System.Object[])">
            <summary>
            Converts this <see cref="T:SharpCraft.Data.SimpleDataHolder"/> into a <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
            <param name="conversionData">Not used</param>
            <returns>This as a <see cref="T:SharpCraft.Data.DataPartObject"/></returns>
        </member>
        <member name="T:SharpCraft.Effect">
            <summary>
            An object for effects
            </summary>
        </member>
        <member name="M:SharpCraft.Effect.#ctor">
            <summary>
            Creates an empty effect
            </summary>
        </member>
        <member name="M:SharpCraft.Effect.#ctor(SharpCraft.ID.Effect,SharpCraft.Time,System.Nullable{System.SByte},System.Nullable{System.Boolean})">
            <summary>
            Creates an effect with the specified parameters
            </summary>
            <param name="type">the type of effect</param>
            <param name="duration">the duration of the effect (in ticks)</param>
            <param name="amplifier">the amplifier of the effect (0 = level 1)</param>
            <param name="showParticles">if the effect should show particles or not</param>
        </member>
        <member name="P:SharpCraft.Effect.Duration">
            <summary>
            The duration of the effect (in ticks)
            </summary>
        </member>
        <member name="P:SharpCraft.Effect.Amplifier">
            <summary>
            The amplifier of the effect
            (0 = level 1)
            </summary>
        </member>
        <member name="P:SharpCraft.Effect.Type">
            <summary>
            The type of effect
            </summary>
        </member>
        <member name="P:SharpCraft.Effect.ShowParticles">
            <summary>
            If the effect should show particles or not
            </summary>
        </member>
        <member name="P:SharpCraft.Effect.Ambient">
            <summary>
            If the effect is an ambiant effect
            (comes from a beacon / conduit)
            </summary>
        </member>
        <member name="P:SharpCraft.Effect.HiddenEffect">
            <summary>
            Replaces the other effect when it runs out. (Duration also decreases for this effect)
            </summary>
        </member>
        <member name="T:SharpCraft.Firework">
            <summary>
            An object for firework parts
            </summary>
        </member>
        <member name="P:SharpCraft.Firework.Flicker">
            <summary>
            If the firework should flicker
            </summary>
        </member>
        <member name="P:SharpCraft.Firework.Trail">
            <summary>
            if the firework explosion should have trails
            </summary>
        </member>
        <member name="P:SharpCraft.Firework.Type">
            <summary>
            the type of the firework explosion
            </summary>
        </member>
        <member name="P:SharpCraft.Firework.Colors">
            <summary>
            the colors of the explosion
            </summary>
        </member>
        <member name="P:SharpCraft.Firework.FadeColors">
            <summary>
            the colors the explosion fades into
            </summary>
        </member>
        <member name="T:SharpCraft.HeadTexture">
            <summary>
            An object for skins for player heads
            </summary>
        </member>
        <member name="P:SharpCraft.HeadTexture.Signature">
            <summary>
            No idea
            </summary>
        </member>
        <member name="P:SharpCraft.HeadTexture.Value">
            <summary>
            Data about the skin bas64 encoded.
            </summary>
        </member>
        <member name="M:SharpCraft.HeadTexture.op_Implicit(SharpCraft.HeadTexture)~SharpCraft.HeadTexture[]">
            <summary>
            Converts a single <see cref="T:SharpCraft.HeadTexture"/> into an array of textures.
            </summary>
            <param name="texture">The <see cref="T:SharpCraft.HeadTexture"/> to convert</param>
        </member>
        <member name="T:SharpCraft.AttributeModifier">
            <summary>
            Used for modifying an attribute
            </summary>
        </member>
        <member name="M:SharpCraft.AttributeModifier.#ctor(System.Double,SharpCraft.ID.AttributeOperation,System.String,SharpCraft.UUID)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AttributeModifier"/>
            </summary>
            <param name="name">The name of the modifier. Leave null to use UUID as name</param>
            <param name="amount">The amount to modify with</param>
            <param name="operation">The way to modify</param>
            <param name="uuid">The UUID of the modifier. Leave null to generate a UUID.</param>
        </member>
        <member name="M:SharpCraft.AttributeModifier.#ctor">
            <summary>
            Intializes a new empty <see cref="T:SharpCraft.AttributeModifier"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AttributeModifier.Name">
            <summary>
            The name of the modifier
            </summary>
        </member>
        <member name="P:SharpCraft.AttributeModifier.Amount">
            <summary>
            The amount to modify with
            </summary>
        </member>
        <member name="P:SharpCraft.AttributeModifier.Operation">
            <summary>
            The operation used for modifying
            </summary>
        </member>
        <member name="P:SharpCraft.AttributeModifier.UUID">
            <summary>
            The UUID of the modifier
            </summary>
        </member>
        <member name="T:SharpCraft.EntityAttribute">
            <summary>
            Used for attributes for entities
            </summary>
        </member>
        <member name="M:SharpCraft.EntityAttribute.#ctor(SharpCraft.ID.AttributeType,System.Double,SharpCraft.AttributeModifier[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.EntityAttribute"/>
            </summary>
            <param name="attribute">The attribute</param>
            <param name="value">The value of the attribute</param>
            <param name="modifiers">Modifiers for the attribute</param>
        </member>
        <member name="M:SharpCraft.EntityAttribute.#ctor">
            <summary>
            Intializes a new empty <see cref="T:SharpCraft.EntityAttribute"/>
            </summary>
        </member>
        <member name="P:SharpCraft.EntityAttribute.Attribute">
            <summary>
            The name of the attribute
            </summary>
        </member>
        <member name="P:SharpCraft.EntityAttribute.Base">
            <summary>
            The base value of the attribute
            </summary>
        </member>
        <member name="P:SharpCraft.EntityAttribute.Modifiers">
            <summary>
            Modifiers for modifying the attribute
            </summary>
        </member>
        <member name="T:SharpCraft.ItemAttribute">
            <summary>
            Used for attributes for items
            </summary>
        </member>
        <member name="M:SharpCraft.ItemAttribute.#ctor(SharpCraft.ID.AttributeType,SharpCraft.ID.AttributeSlot,System.Double,SharpCraft.ID.AttributeOperation,System.String,SharpCraft.UUID)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.ItemAttribute"/>
            </summary>
            <param name="attribute">The attribute the item should modify</param>
            <param name="slot">The slot the item has to be in for the modifier to work</param>
            <param name="name">The name of the modifier. Leave null to use UUID as name</param>
            <param name="amount">The amount to modify with</param>
            <param name="operation">The way to modify</param>
            <param name="uuid">The UUID of the modifier. Leave null to generate a UUID.</param>
        </member>
        <member name="M:SharpCraft.ItemAttribute.#ctor">
            <summary>
            Intializes a new empty <see cref="T:SharpCraft.ItemAttribute"/>
            </summary>
        </member>
        <member name="P:SharpCraft.ItemAttribute.Attribute">
            <summary>
            The attribute the item should modify
            </summary>
        </member>
        <member name="P:SharpCraft.ItemAttribute.Slot">
            <summary>
            The slot the item has to be in for the modifier to work
            </summary>
        </member>
        <member name="T:SharpCraft.SpawnerPotential">
            <summary>
            An object used to define an entity's spawner potential
            </summary>
        </member>
        <member name="M:SharpCraft.SpawnerPotential.#ctor">
            <summary>
            Creates a new <see cref="T:SharpCraft.SpawnerPotential"/>
            </summary>
        </member>
        <member name="M:SharpCraft.SpawnerPotential.#ctor(SharpCraft.Entity,System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpCraft.SpawnerPotential"/> for the entity with the given weight
            </summary>
            <param name="Entity">The entity to spawn</param>
            <param name="Weight">The weight of the entity</param>
        </member>
        <member name="P:SharpCraft.SpawnerPotential.Entity">
            <summary>
            The entity this spawner potential is for
            </summary>
        </member>
        <member name="P:SharpCraft.SpawnerPotential.Weight">
            <summary>
            The weight for this potential to be selected
            </summary>
        </member>
        <member name="T:SharpCraft.BossBar">
            <summary>
            An object used for boss bars
            </summary>
        </member>
        <member name="M:SharpCraft.BossBar.#ctor(System.String)">
            <summary>
            Creates a new boss bar object.
            Note that this doesnt add the boss bar to the world
            </summary>
            <param name="bossBarName">The name of the bossbar</param>
        </member>
        <member name="M:SharpCraft.BossBar.#ctor(SharpCraft.BasePackNamespace,System.String)">
            <summary>
            Creates a new boss bar object.
            Note that this doesnt add the boss bar to the world
            </summary>
            <param name="bossBarName">The name of the bossbar</param>
            <param name="namespace">The namespace the bossbar is in. Null = minecraft namespace.</param>
        </member>
        <member name="P:SharpCraft.BossBar.Name">
            <summary>
            The name of the bossbar
            </summary>
        </member>
        <member name="P:SharpCraft.BossBar.Namespace">
            <summary>
            The namespace the bossbar is in. Null = minecraft namespace.
            </summary>
        </member>
        <member name="M:SharpCraft.BossBar.GetFullName">
            <summary>
            Get string used for refering this bossbar
            </summary>
            <returns>String used for refering this bossbar</returns>
        </member>
        <member name="T:SharpCraft.IDataLocation">
            <summary>
            Interface for classes which marks a place there is data
            </summary>
        </member>
        <member name="P:SharpCraft.IDataLocation.DataPath">
            <summary>
            The path to the data to get
            </summary>
        </member>
        <member name="M:SharpCraft.IDataLocation.GetLocationString">
            <summary>
            Returns a string used in commands for getting the data
            </summary>
            <returns>A string used in commands for getting the data</returns>
        </member>
        <member name="T:SharpCraft.BlockDataLocation">
            <summary>
            Used for holding a block location and a datapath for getting data
            </summary>
        </member>
        <member name="M:SharpCraft.BlockDataLocation.#ctor(SharpCraft.Vector,System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.BlockDataLocation"/>
            </summary>
            <param name="coordinates">The location of the block holding the data</param>
            <param name="dataPath">The path to the data to get</param>
        </member>
        <member name="P:SharpCraft.BlockDataLocation.Coordinates">
            <summary>
            The location of the block holding the data
            </summary>
        </member>
        <member name="P:SharpCraft.BlockDataLocation.DataPath">
            <summary>
            The path to the data to get
            </summary>
        </member>
        <member name="M:SharpCraft.BlockDataLocation.GetLocationString">
            <summary>
            Returns a string used in commands for getting the data
            </summary>
            <returns>A string used in commands for getting the data</returns>
        </member>
        <member name="T:SharpCraft.EntityDataLocation">
            <summary>
            Used for holding an entity selector and a datapath for getting data
            </summary>
        </member>
        <member name="M:SharpCraft.EntityDataLocation.#ctor(SharpCraft.BaseSelector,System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.BlockDataLocation"/>
            </summary>
            <param name="selector">Selector selecting the entity holding the data</param>
            <param name="dataPath">The path to the data to get</param>
        </member>
        <member name="P:SharpCraft.EntityDataLocation.Selector">
            <summary>
            Selector selecting the entity holding the data
            </summary>
        </member>
        <member name="P:SharpCraft.EntityDataLocation.DataPath">
            <summary>
            The path to the data to get
            </summary>
        </member>
        <member name="M:SharpCraft.EntityDataLocation.GetLocationString">
            <summary>
            Returns a string used in commands for getting the data
            </summary>
            <returns>A string used in commands for getting the data</returns>
        </member>
        <member name="T:SharpCraft.StorageDataLocation">
            <summary>
            Used for holding a storage location and a datapath for getting data
            </summary>
        </member>
        <member name="M:SharpCraft.StorageDataLocation.#ctor(SharpCraft.Storage,System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.StorageDataLocation"/>
            </summary>
            <param name="storage">The storage holding the data</param>
            <param name="dataPath">The path to the data to get</param>
        </member>
        <member name="P:SharpCraft.StorageDataLocation.Storage">
            <summary>
            The storage holding the data
            </summary>
        </member>
        <member name="P:SharpCraft.StorageDataLocation.DataPath">
            <summary>
            The path to the data to get
            </summary>
        </member>
        <member name="M:SharpCraft.StorageDataLocation.GetLocationString">
            <summary>
            Returns a string used in commands for getting the data
            </summary>
            <returns>A string used in commands for getting the data</returns>
        </member>
        <member name="T:SharpCraft.Slots.IItemSlot">
            <summary>
            Interface for slots which can hold items
            </summary>
        </member>
        <member name="M:SharpCraft.Slots.IItemSlot.GetSlotString">
            <summary>
            Returns a string for selecting the slot
            </summary>
            <returns>A string for selecting the slot</returns>
        </member>
        <member name="T:SharpCraft.Slots.ArmorSlot">
            <summary>
            Used for selecting an armor slot
            </summary>
        </member>
        <member name="M:SharpCraft.Slots.ArmorSlot.#ctor(SharpCraft.ID.ArmorSlot)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Slots.ArmorSlot"/>
            </summary>
            <param name="slot">The armor slot to select</param>
        </member>
        <member name="P:SharpCraft.Slots.ArmorSlot.Slot">
            <summary>
            The armor slot to select
            </summary>
        </member>
        <member name="M:SharpCraft.Slots.ArmorSlot.GetSlotString">
            <summary>
            Returns a string for selecting the slot
            </summary>
            <returns>A string for selecting the slot</returns>
        </member>
        <member name="T:SharpCraft.Slots.WeaponSlot">
            <summary>
            Used for selecting a weapon slot
            </summary>
        </member>
        <member name="M:SharpCraft.Slots.WeaponSlot.#ctor(System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Slots.WeaponSlot"/>
            </summary>
            <param name="mainHand">True if it should select the main hand. False if it should select the off hand</param>
        </member>
        <member name="P:SharpCraft.Slots.WeaponSlot.MainHand">
            <summary>
            True if it should select the main hand. False if it should select the off hand
            </summary>
        </member>
        <member name="M:SharpCraft.Slots.WeaponSlot.GetSlotString">
            <summary>
            Returns a string for selecting the slot
            </summary>
            <returns>A string for selecting the slot</returns>
        </member>
        <member name="T:SharpCraft.Slots.ContainerSlot">
            <summary>
            Used for selecting a container slot (eg: chest slot)
            </summary>
        </member>
        <member name="M:SharpCraft.Slots.ContainerSlot.#ctor(System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Slots.ContainerSlot"/>
            </summary>
            <param name="slot">The slot to select</param>
        </member>
        <member name="P:SharpCraft.Slots.ContainerSlot.Slot">
            <summary>
            The slot to select
            </summary>
        </member>
        <member name="M:SharpCraft.Slots.ContainerSlot.GetSlotString">
            <summary>
            Returns a string for selecting the slot
            </summary>
            <returns>A string for selecting the slot</returns>
        </member>
        <member name="T:SharpCraft.Slots.EnderChestSlot">
            <summary>
            Used for selecting an ender chest slot
            </summary>
        </member>
        <member name="M:SharpCraft.Slots.EnderChestSlot.#ctor(System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Slots.EnderChestSlot"/>
            </summary>
            <param name="slot">The slot to select</param>
        </member>
        <member name="P:SharpCraft.Slots.EnderChestSlot.Slot">
            <summary>
            The slot to select
            </summary>
        </member>
        <member name="M:SharpCraft.Slots.EnderChestSlot.GetSlotString">
            <summary>
            Returns a string for selecting the slot
            </summary>
            <returns>A string for selecting the slot</returns>
        </member>
        <member name="T:SharpCraft.Slots.HotbarSlot">
            <summary>
            Used for selecting a hotbar slot
            </summary>
        </member>
        <member name="M:SharpCraft.Slots.HotbarSlot.#ctor(System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Slots.HotbarSlot"/>
            </summary>
            <param name="slot">The slot to select</param>
        </member>
        <member name="P:SharpCraft.Slots.HotbarSlot.Slot">
            <summary>
            The slot to select
            </summary>
        </member>
        <member name="M:SharpCraft.Slots.HotbarSlot.GetSlotString">
            <summary>
            Returns a string for selecting the slot
            </summary>
            <returns>A string for selecting the slot</returns>
        </member>
        <member name="T:SharpCraft.Slots.InventorySlot">
            <summary>
            Used for selecting an inventory slot
            </summary>
        </member>
        <member name="M:SharpCraft.Slots.InventorySlot.#ctor(System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Slots.InventorySlot"/>
            </summary>
            <param name="slot">The slot to select</param>
        </member>
        <member name="P:SharpCraft.Slots.InventorySlot.Slot">
            <summary>
            The slot to select
            </summary>
        </member>
        <member name="M:SharpCraft.Slots.InventorySlot.GetSlotString">
            <summary>
            Returns a string for selecting the slot
            </summary>
            <returns>A string for selecting the slot</returns>
        </member>
        <member name="T:SharpCraft.Slots.HorseInventorySlot">
            <summary>
            Used for selecting a horse inventory slot
            </summary>
        </member>
        <member name="M:SharpCraft.Slots.HorseInventorySlot.#ctor(System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Slots.HorseInventorySlot"/>
            </summary>
            <param name="slot">The slot to select</param>
        </member>
        <member name="P:SharpCraft.Slots.HorseInventorySlot.Slot">
            <summary>
            The slot to select
            </summary>
        </member>
        <member name="M:SharpCraft.Slots.HorseInventorySlot.GetSlotString">
            <summary>
            Returns a string for selecting the slot
            </summary>
            <returns>A string for selecting the slot</returns>
        </member>
        <member name="T:SharpCraft.Slots.VillagerInventorySlot">
            <summary>
            Used for selecting a villager inventory slot
            </summary>
        </member>
        <member name="M:SharpCraft.Slots.VillagerInventorySlot.#ctor(System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Slots.VillagerInventorySlot"/>
            </summary>
            <param name="slot">The slot to select</param>
        </member>
        <member name="P:SharpCraft.Slots.VillagerInventorySlot.Slot">
            <summary>
            The slot to select
            </summary>
        </member>
        <member name="M:SharpCraft.Slots.VillagerInventorySlot.GetSlotString">
            <summary>
            Returns a string for selecting the slot
            </summary>
            <returns>A string for selecting the slot</returns>
        </member>
        <member name="T:SharpCraft.Slots.HorseSlot">
            <summary>
            Used for selecting a horse slot
            </summary>
        </member>
        <member name="M:SharpCraft.Slots.HorseSlot.#ctor(SharpCraft.ID.HorseSlot)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Slots.HorseSlot"/>
            </summary>
            <param name="slot">The slot to select</param>
        </member>
        <member name="P:SharpCraft.Slots.HorseSlot.Slot">
            <summary>
            The slot to select
            </summary>
        </member>
        <member name="M:SharpCraft.Slots.HorseSlot.GetSlotString">
            <summary>
            Returns a string for selecting the slot
            </summary>
            <returns>A string for selecting the slot</returns>
        </member>
        <member name="T:SharpCraft.BaseJsonText">
            <summary>
            Base class for json text
            </summary>
        </member>
        <member name="P:SharpCraft.BaseJsonText.Color">
            <summary>
            The color of the text
            </summary>
        </member>
        <member name="P:SharpCraft.BaseJsonText.Obfuscated">
            <summary>
            If the text is obfuscated or not
            </summary>
        </member>
        <member name="P:SharpCraft.BaseJsonText.Bold">
            <summary>
            If the text is bold or not
            </summary>
        </member>
        <member name="P:SharpCraft.BaseJsonText.Italic">
            <summary>
            If the text is italic or not
            </summary>
        </member>
        <member name="P:SharpCraft.BaseJsonText.Strikethrough">
            <summary>
            If the text is strikethroughed or not
            </summary>
        </member>
        <member name="P:SharpCraft.BaseJsonText.Underline">
            <summary>
            If the text is underlined or not
            </summary>
        </member>
        <member name="P:SharpCraft.BaseJsonText.Reset">
            <summary>
            If the text should reset the text look defined by its parent
            </summary>
        </member>
        <member name="P:SharpCraft.BaseJsonText.ShiftClickInsertion">
            <summary>
            Text which should be inserted into the players chat when shift clicked
            </summary>
        </member>
        <member name="P:SharpCraft.BaseJsonText.ClickEvent">
            <summary>
            The thing which should happen when the text is clicked
            </summary>
        </member>
        <member name="P:SharpCraft.BaseJsonText.HoverEvent">
            <summary>
            The the which shows up when the text is hovered over
            </summary>
        </member>
        <member name="P:SharpCraft.BaseJsonText.Extra">
            <summary>
            Extra text
            </summary>
        </member>
        <member name="M:SharpCraft.BaseJsonText.GetJsonString">
            <summary>
            Gets the raw JSON string
            </summary>
            <returns>the raw JSON string used by the game</returns>
        </member>
        <member name="M:SharpCraft.BaseJsonText.GetSpecificJsonString">
            <summary>
            Should return the part of the json string which is special for the object inheriting this class
            </summary>
            <returns>The special part of the json string gotten from the inheriting class</returns>
        </member>
        <member name="M:SharpCraft.BaseJsonText.ShallowClone">
            <summary>
            Returns a shallow clone of this <see cref="T:SharpCraft.BaseJsonText"/>
            </summary>
            <returns>A shallow clone of this <see cref="T:SharpCraft.BaseJsonText"/></returns>
        </member>
        <member name="M:SharpCraft.BaseJsonText.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this <see cref="T:SharpCraft.BaseJsonText"/> into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">Not used</param>
            <param name="extraConversionData">Not used</param>
            <returns>This <see cref="T:SharpCraft.BaseJsonText"/> as a <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="M:SharpCraft.BaseJsonText.op_Implicit(SharpCraft.BaseJsonText)~SharpCraft.BaseJsonText[]">
            <summary>
            Converts a single <see cref="T:SharpCraft.BaseJsonText"/> into an array of <see cref="T:SharpCraft.BaseJsonText"/> only containing the <see cref="T:SharpCraft.BaseJsonText"/>
            </summary>
            <param name="jsonText">the <see cref="T:SharpCraft.BaseJsonText"/> to convert</param>
        </member>
        <member name="M:SharpCraft.BaseJsonText.op_Implicit(SharpCraft.BaseJsonText[])~SharpCraft.BaseJsonText">
            <summary>
            Converts an array of <see cref="T:SharpCraft.BaseJsonText"/> into a single <see cref="T:SharpCraft.BaseJsonText"/> object
            </summary>
            <param name="array">the array of <see cref="T:SharpCraft.BaseJsonText"/> to convert</param>
        </member>
        <member name="M:SharpCraft.BaseJsonText.op_Addition(SharpCraft.BaseJsonText,SharpCraft.BaseJsonText)">
            <summary>
            Adds 2 <see cref="T:SharpCraft.BaseJsonText"/>s together into one object
            </summary>
            <param name="text1">The parent <see cref="T:SharpCraft.BaseJsonText"/></param>
            <param name="text2">The <see cref="T:SharpCraft.BaseJsonText"/> to add to the parent</param>
            <returns>The <see cref="T:SharpCraft.BaseJsonText"/>s added together</returns>
        </member>
        <member name="M:SharpCraft.BaseJsonText.op_Implicit(System.String)~SharpCraft.BaseJsonText">
            <summary>
            Converts a string into a <see cref="T:SharpCraft.BaseJsonText"/> object
            </summary>
            <param name="text">the string to convert</param>
        </member>
        <member name="M:SharpCraft.BaseJsonText.op_Implicit(SharpCraft.ScoreValue)~SharpCraft.BaseJsonText">
            <summary>
            Converts a <see cref="T:SharpCraft.ScoreValue"/> into a <see cref="T:SharpCraft.BaseJsonText"/> object
            </summary>
            <param name="score">the <see cref="T:SharpCraft.ScoreValue"/> to convert</param>
        </member>
        <member name="M:SharpCraft.BaseJsonText.op_Implicit(SharpCraft.Selector)~SharpCraft.BaseJsonText">
            <summary>
            Converts a <see cref="T:SharpCraft.Selector"/> into a <see cref="T:SharpCraft.BaseJsonText"/> object
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.Selector"/> to convert</param>
        </member>
        <member name="M:SharpCraft.BaseJsonText.op_Implicit(SharpCraft.ID.Key)~SharpCraft.BaseJsonText">
            <summary>
            Converts a <see cref="T:SharpCraft.ID.Key"/> into a <see cref="T:SharpCraft.BaseJsonText"/> object
            </summary>
            <param name="key">the <see cref="T:SharpCraft.ID.Key"/> to convert</param>
        </member>
        <member name="T:SharpCraft.JsonText.BaseClickEvent">
            <summary>
            Base class for click events in json text
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.BaseClickEvent.#ctor(System.String)">
            <summary>
            Intializes <see cref="T:SharpCraft.JsonText.BaseClickEvent"/>
            </summary>
            <param name="eventType">The type of click event</param>
        </member>
        <member name="M:SharpCraft.JsonText.BaseClickEvent.GetEventValue">
            <summary>
            Should return the value of the click event
            </summary>
            <returns>The value of the click event</returns>
        </member>
        <member name="M:SharpCraft.JsonText.BaseClickEvent.GetEventString">
            <summary>
            Returns the string for this click event used in <see cref="T:SharpCraft.BaseJsonText"/>
            </summary>
            <returns>The string used in <see cref="T:SharpCraft.BaseJsonText"/></returns>
        </member>
        <member name="M:SharpCraft.JsonText.BaseClickEvent.op_Implicit(SharpCraft.Commands.BaseCommand)~SharpCraft.JsonText.BaseClickEvent">
            <summary>
            Converts a <see cref="T:SharpCraft.Commands.BaseCommand"/> into a <see cref="T:SharpCraft.JsonText.BaseClickEvent"/> object
            </summary>
            <param name="command">the <see cref="T:SharpCraft.Commands.BaseCommand"/> to convert</param>
        </member>
        <member name="M:SharpCraft.JsonText.BaseClickEvent.op_Implicit(System.Int32)~SharpCraft.JsonText.BaseClickEvent">
            <summary>
            Converts a number into a <see cref="T:SharpCraft.JsonText.BaseClickEvent"/> object used for changing page in a book.
            </summary>
            <param name="page">the number to convert</param>
        </member>
        <member name="T:SharpCraft.JsonText.OpenUrlClickEvent">
            <summary>
            Opens an url when clicked
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.OpenUrlClickEvent.#ctor(System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonText.OpenUrlClickEvent"/>
            </summary>
            <param name="url">The url to open</param>
        </member>
        <member name="P:SharpCraft.JsonText.OpenUrlClickEvent.Url">
            <summary>
            The url to open
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.OpenUrlClickEvent.GetEventValue">
            <summary>
            Returns the value of the event
            </summary>
            <returns>The value of the event</returns>
        </member>
        <member name="T:SharpCraft.JsonText.RunCommandClickEvent">
            <summary>
            Runs a command when clicked. Note that the player has to have the right permission to run the command.
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.RunCommandClickEvent.#ctor(SharpCraft.Commands.BaseCommand)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonText.RunCommandClickEvent"/>
            </summary>
            <param name="command">The command to run</param>
        </member>
        <member name="P:SharpCraft.JsonText.RunCommandClickEvent.Command">
            <summary>
            The command to run
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.RunCommandClickEvent.GetEventValue">
            <summary>
            Returns the value of the event
            </summary>
            <returns>The value of the event</returns>
        </member>
        <member name="T:SharpCraft.JsonText.ChangePageClickEvent">
            <summary>
            Changes the page the player is on in a book
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.ChangePageClickEvent.#ctor(System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonText.ChangePageClickEvent"/>
            </summary>
            <param name="page">The page to switch to</param>
        </member>
        <member name="P:SharpCraft.JsonText.ChangePageClickEvent.Page">
            <summary>
            The page to switch to
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.ChangePageClickEvent.GetEventValue">
            <summary>
            Returns the value of the event
            </summary>
            <returns>The value of the event</returns>
        </member>
        <member name="T:SharpCraft.JsonText.SuggestTextClickEvent">
            <summary>
            Sets the given text into the players chat when clicked
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.SuggestTextClickEvent.#ctor(System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonText.SuggestTextClickEvent"/>
            </summary>
            <param name="text">the text to suggest</param>
        </member>
        <member name="P:SharpCraft.JsonText.SuggestTextClickEvent.Text">
            <summary>
            the text to suggest
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.SuggestTextClickEvent.GetEventValue">
            <summary>
            Returns the value of the event
            </summary>
            <returns>The value of the event</returns>
        </member>
        <member name="T:SharpCraft.JsonText.SetClipboardClickEvent">
            <summary>
            Inserts the given text into the players click board when clicked
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.SetClipboardClickEvent.#ctor(System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonText.SetClipboardClickEvent"/>
            </summary>
            <param name="text">The text to insert into clip board</param>
        </member>
        <member name="P:SharpCraft.JsonText.SetClipboardClickEvent.Text">
            <summary>
            The text to insert into clip board
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.SetClipboardClickEvent.GetEventValue">
            <summary>
            Returns the value of the event
            </summary>
            <returns>The value of the event</returns>
        </member>
        <member name="T:SharpCraft.JsonText.BaseHoverEvent">
            <summary>
            Base class for hover events in json text
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.BaseHoverEvent.#ctor(System.String)">
            <summary>
            Intializes <see cref="T:SharpCraft.JsonText.BaseHoverEvent"/>
            </summary>
            <param name="eventType">The type of hover event</param>
        </member>
        <member name="M:SharpCraft.JsonText.BaseHoverEvent.GetEventValue">
            <summary>
            Should return the value of the hovet event
            </summary>
            <returns>The value of the hover event</returns>
        </member>
        <member name="M:SharpCraft.JsonText.BaseHoverEvent.GetEventString">
            <summary>
            Returns the string for this hover event used in <see cref="T:SharpCraft.BaseJsonText"/>
            </summary>
            <returns>The string used in <see cref="T:SharpCraft.BaseJsonText"/></returns>
        </member>
        <member name="M:SharpCraft.JsonText.BaseHoverEvent.op_Implicit(SharpCraft.BaseJsonText)~SharpCraft.JsonText.BaseHoverEvent">
            <summary>
            Converts a <see cref="T:SharpCraft.BaseJsonText"/> into a <see cref="T:SharpCraft.JsonText.BaseHoverEvent"/> object
            </summary>
            <param name="text">the <see cref="T:SharpCraft.BaseJsonText"/> to convert</param>
        </member>
        <member name="T:SharpCraft.JsonText.TextHoverEvent">
            <summary>
            Shows text when the text is being hovered
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.TextHoverEvent.#ctor(SharpCraft.BaseJsonText)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonText.TextHoverEvent"/>
            </summary>
            <param name="text">The text to show when the text gets hovered</param>
        </member>
        <member name="P:SharpCraft.JsonText.TextHoverEvent.Text">
            <summary>
            The text to show when the text gets hovered
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.TextHoverEvent.GetEventValue">
            <summary>
            Returns the value of the event
            </summary>
            <returns>The value of the event</returns>
        </member>
        <member name="T:SharpCraft.JsonText.ItemHoverEvent">
            <summary>
            Shows the item hover effect when the text is hovered
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.ItemHoverEvent.#ctor(SharpCraft.Item)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonText.ItemHoverEvent"/>
            </summary>
            <param name="item">The item to show</param>
        </member>
        <member name="P:SharpCraft.JsonText.ItemHoverEvent.Item">
            <summary>
            The item to show
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.ItemHoverEvent.GetEventValue">
            <summary>
            Returns the value of the event
            </summary>
            <returns>The value of the event</returns>
        </member>
        <member name="T:SharpCraft.JsonText.EntityHoverEvent">
            <summary>
            Shows some information about an entity when the text is hovered
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.EntityHoverEvent.#ctor(SharpCraft.EntityType,SharpCraft.BaseJsonText,SharpCraft.UUID)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonText.EntityHoverEvent"/>
            </summary>
            <param name="type">The type of entity</param>
            <param name="name">The entity's name (Not really used)</param>
            <param name="uuid">The entity's uuid</param>
        </member>
        <member name="P:SharpCraft.JsonText.EntityHoverEvent.Type">
            <summary>
            The type of entity
            </summary>
        </member>
        <member name="P:SharpCraft.JsonText.EntityHoverEvent.Name">
            <summary>
            The entity's name (Not really used)
            </summary>
        </member>
        <member name="P:SharpCraft.JsonText.EntityHoverEvent.UUID">
            <summary>
            The entity's uuid
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.EntityHoverEvent.GetEventValue">
            <summary>
            Returns the value of the event
            </summary>
            <returns>The value of the event</returns>
        </member>
        <member name="T:SharpCraft.JsonText.Text">
            <summary>
            Class for displaying json text
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.Text.#ctor(System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonText.Text"/>
            </summary>
            <param name="displayText">The text to display</param>
        </member>
        <member name="M:SharpCraft.JsonText.Text.#ctor(System.String,SharpCraft.ID.MinecraftColor)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonText.Text"/>
            </summary>
            <param name="displayText">The text to display</param>
            <param name="color">The color of the text</param>
        </member>
        <member name="P:SharpCraft.JsonText.Text.DisplayText">
            <summary>
            The text to display
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.Text.GetSpecificJsonString">
            <summary>
            returns the raw string specific for this class
            </summary>
            <returns>The raw string specific for this class</returns>
        </member>
        <member name="T:SharpCraft.JsonText.Translate">
            <summary>
            Class for displaying translated json text
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.Translate.#ctor(System.String,SharpCraft.BaseJsonText[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonText.Translate"/>
            </summary>
            <param name="translateString">The translation string to translate</param>
            <param name="insert">Values to insert into the translation string (at places with %s)</param>
        </member>
        <member name="P:SharpCraft.JsonText.Translate.TranslateString">
            <summary>
            The translation string to translate
            </summary>
        </member>
        <member name="P:SharpCraft.JsonText.Translate.Insert">
            <summary>
            Values to insert into the translation string (at places with %s)
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.Translate.GetSpecificJsonString">
            <summary>
            returns the raw string specific for this class
            </summary>
            <returns>The raw string specific for this class</returns>
        </member>
        <member name="T:SharpCraft.JsonText.Names">
            <summary>
            Class for displaying the names of some selected entities as json text
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.Names.#ctor(SharpCraft.Selector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonText.Names"/>
            </summary>
            <param name="namesSelector">Selector selecting the entities whose names to show</param>
        </member>
        <member name="P:SharpCraft.JsonText.Names.NamesSelector">
            <summary>
            Selector selecting the entities whose names to show
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.Names.GetSpecificJsonString">
            <summary>
            returns the raw string specific for this class
            </summary>
            <returns>The raw string specific for this class</returns>
        </member>
        <member name="T:SharpCraft.JsonText.KeyBind">
            <summary>
            Class for displaying a key bind as json text
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.KeyBind.#ctor(SharpCraft.ID.Key)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonText.KeyBind"/>
            </summary>
            <param name="key">The key to display</param>
        </member>
        <member name="P:SharpCraft.JsonText.KeyBind.Key">
            <summary>
            The key to display
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.KeyBind.GetSpecificJsonString">
            <summary>
            returns the raw string specific for this class
            </summary>
            <returns>The raw string specific for this class</returns>
        </member>
        <member name="T:SharpCraft.JsonText.Data">
            <summary>
            Class for displaying data saved somewhere as json text
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.Data.#ctor(SharpCraft.IDataLocation,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonText.Data"/>
            </summary>
            <param name="dataLocation">The location of the data to display</param>
            <param name="interpret">If the data should be interpreted as json text</param>
        </member>
        <member name="P:SharpCraft.JsonText.Data.DataLocation">
            <summary>
            The location of the data to display
            </summary>
        </member>
        <member name="P:SharpCraft.JsonText.Data.Interpret">
            <summary>
            If the data should be interpreted as json text
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.Data.GetSpecificJsonString">
            <summary>
            returns the raw string specific for this class
            </summary>
            <returns>The raw string specific for this class</returns>
        </member>
        <member name="T:SharpCraft.JsonText.Score">
            <summary>
            Class for displaying a scoreboard score as json text
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.Score.#ctor(SharpCraft.BaseSelector,SharpCraft.Objective)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonText.Score"/>
            </summary>
            <param name="selector">Selects the entity to show the score for</param>
            <param name="scoreObject">The objective to get the score from</param>
        </member>
        <member name="P:SharpCraft.JsonText.Score.Selector">
            <summary>
            Selects the entity to show the score for
            </summary>
        </member>
        <member name="P:SharpCraft.JsonText.Score.ScoreObject">
            <summary>
            The objective to get the score from
            </summary>
        </member>
        <member name="M:SharpCraft.JsonText.Score.GetSpecificJsonString">
            <summary>
            returns the raw string specific for this class
            </summary>
            <returns>The raw string specific for this class</returns>
        </member>
        <member name="T:SharpCraft.MCRange">
            <summary>
            An object for ranges
            </summary>
        </member>
        <member name="M:SharpCraft.MCRange.#ctor(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Creates a range.
            </summary>
            <param name="minimum">The smallest number in the range</param>
            <param name="maximum">The highest number in the range</param>
        </member>
        <member name="M:SharpCraft.MCRange.#ctor(System.Double)">
            <summary>
            Creates a range which only contains one number
            </summary>
            <param name="equals">The only number the range contains</param>
        </member>
        <member name="P:SharpCraft.MCRange.Minimum">
            <summary>
            The smallest number in the range
            </summary>
        </member>
        <member name="P:SharpCraft.MCRange.Maximum">
            <summary>
            The highest number in the range
            </summary>
        </member>
        <member name="M:SharpCraft.MCRange.SelectorString(System.String)">
            <summary>
            Gets the raw data used in commands
            x..y or name=x..y
            </summary>
            <param name="name">The thing which has to be equal the range</param>
            <returns>Raw data used in commands</returns>
        </member>
        <member name="M:SharpCraft.MCRange.SelectorString">
            <summary>
            Gets string in the format x..y
            </summary>
            <returns>x..y</returns>
        </member>
        <member name="M:SharpCraft.MCRange.GetAsDataObject(System.Object[])">
            <summary>
            Converts this range into a <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
            <param name="conversionData">0: min path name, 1: max path name, 2: type of the range values, 3: is json</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartObject"/></returns>
        </member>
        <member name="M:SharpCraft.MCRange.op_Implicit(System.Double)~SharpCraft.MCRange">
            <summary>
            Converts a single number into a range only containing that number
            </summary>
            <param name="exactNumber">The number the range contains</param>
        </member>
        <member name="M:SharpCraft.MCRange.op_Implicit(System.Range)~SharpCraft.MCRange">
            <summary>
            Implicit converts a <see cref="T:System.Range"/> into a <see cref="T:SharpCraft.MCRange"/>
            </summary>
            <param name="range">The range to convert</param>
        </member>
        <member name="M:SharpCraft.MCRange.op_Implicit(System.Index)~SharpCraft.MCRange">
            <summary>
            Converts a <see cref="T:System.Index"/> into a <see cref="T:System.Range"/>
            </summary>
            <param name="index">The index to convert</param>
        </member>
        <member name="T:SharpCraft.Objective">
            <summary>
            An object used for scoreboard objectives
            </summary>
        </member>
        <member name="M:SharpCraft.Objective.#ctor(System.String)">
            <summary>
            Creates a new scoreboard objective object.
            Note that this doesnt add the objective to the world
            </summary>
            <param name="scoreName">The name of the score</param>
        </member>
        <member name="P:SharpCraft.Objective.Name">
            <summary>
            The name of this score objective
            </summary>
        </member>
        <member name="T:SharpCraft.RGBColor">
            <summary>
            An object for rgb colors
            </summary>
        </member>
        <member name="M:SharpCraft.RGBColor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Makes a rgb color with the specified colors
            </summary>
            <param name="redColor">the amount of red</param>
            <param name="greenColor">the amount of green</param>
            <param name="blueColor">the amount of blue</param>
        </member>
        <member name="M:SharpCraft.RGBColor.#ctor(System.String)">
            <summary>
            Makes an rgb color out of a string with a hex color value.
            (Like #56a5fd)
            </summary>
            <param name="hexColor">the string to convert</param>
        </member>
        <member name="P:SharpCraft.RGBColor.Red">
            <summary>
            The amount of red this color is (goes from 0-255)
            </summary>
        </member>
        <member name="P:SharpCraft.RGBColor.Green">
            <summary>
            The amount of green this color is (goes from 0-255)
            </summary>
        </member>
        <member name="P:SharpCraft.RGBColor.Blue">
            <summary>
            The amount of blue this color is (goes from 0-255)
            </summary>
        </member>
        <member name="P:SharpCraft.RGBColor.ColorInt">
            <summary>
            Outputs the color as an int
            </summary>
        </member>
        <member name="M:SharpCraft.RGBColor.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this HexColor into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">Not in use</param>
            <param name="extraConversionData">Not in use</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="M:SharpCraft.RGBColor.op_Implicit(System.String)~SharpCraft.RGBColor">
            <summary>
            Converts a string with a hex color value into an <see cref="T:SharpCraft.RGBColor"/> object
            </summary>
            <param name="hexColor">the string to convert</param>
        </member>
        <member name="T:SharpCraft.Rotation">
            <summary>
            An object for rotations
            </summary>
        </member>
        <member name="M:SharpCraft.Rotation.#ctor(System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Creates a new rotation object with the specified rotation
            </summary>
            <param name="xRotation">The vertical rotation</param>
            <param name="yRotation">The horizontal rotation</param>
            <param name="xRelative">if the vertical rotation is relative or not</param>
            <param name="yRelative">if the horizontal rotation is relative or not</param>
        </member>
        <member name="M:SharpCraft.Rotation.#ctor(System.Boolean,System.Double,System.Double)">
            <summary>
            Creates a new rotation of the specified type
            </summary>
            <param name="relative">If the whole rotation is relative or not</param>
            <param name="xRotation">The vertical rotation</param>
            <param name="yRotation">The horizontal rotation</param>
        </member>
        <member name="P:SharpCraft.Rotation.X">
            <summary>
            The vertical rotation
            </summary>
        </member>
        <member name="P:SharpCraft.Rotation.Y">
            <summary>
            The horizontal rotation
            </summary>
        </member>
        <member name="P:SharpCraft.Rotation.XRelative">
            <summary>
            If the Horizontal rotation is relative or not
            </summary>
        </member>
        <member name="P:SharpCraft.Rotation.YRelative">
            <summary>
            If the Vertical rotation is relative or not
            </summary>
        </member>
        <member name="M:SharpCraft.Rotation.GetRotationString">
            <summary>
            Gets the raw rotation
            </summary>
            <returns>the raw rotation used by the game</returns>
        </member>
        <member name="M:SharpCraft.Rotation.GetAsArray(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this rotation into a <see cref="T:SharpCraft.Data.DataPartArray"/>
            </summary>
            <param name="extraConversionData">Not used</param>
            <param name="asType">The type of array</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartArray"/></returns>
        </member>
        <member name="M:SharpCraft.Rotation.PathArray">
            <summary>
            Used for getting the datapath for this array. Method throws an exception if called.
            </summary>
            <returns>An object to continue the datapath on</returns>
        </member>
        <member name="T:SharpCraft.ScoreValue">
            <summary>
            Way of storing a scoreboard balue
            </summary>
        </member>
        <member name="M:SharpCraft.ScoreValue.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.ScoreValue"/> for holding a value.
            </summary>
        </member>
        <member name="M:SharpCraft.ScoreValue.#ctor(SharpCraft.BaseSelector,SharpCraft.Objective)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.ScoreValue"/>
            </summary>
            <param name="selector">Selector for selecting the score</param>
            <param name="scoreObject">The objective the score is in</param>
        </member>
        <member name="P:SharpCraft.ScoreValue.Selector">
            <summary>
            Selector for selecting the score
            </summary>
        </member>
        <member name="P:SharpCraft.ScoreValue.ScoreObject">
            <summary>
            The objective the score is in
            </summary>
        </member>
        <member name="M:SharpCraft.ScoreValue.op_Implicit(SharpCraft.ScoreValue)~SharpCraft.BaseSelector">
            <summary>
            returns the <see cref="T:SharpCraft.ScoreValue"/>'s selector
            </summary>
            <param name="score">The <see cref="T:SharpCraft.ScoreValue"/>'s selector</param>
        </member>
        <member name="M:SharpCraft.ScoreValue.op_Implicit(SharpCraft.ScoreValue)~SharpCraft.Objective">
            <summary>
            returns the <see cref="T:SharpCraft.ScoreValue"/>'s scoreObject
            </summary>
            <param name="score">The <see cref="T:SharpCraft.ScoreValue"/>'s scoreObject</param>
        </member>
        <member name="M:SharpCraft.ScoreValue.op_Addition(SharpCraft.ScoreValue,SharpCraft.ValueParameter)">
            <summary>
            Adds the two values together into a <see cref="T:SharpCraft.FunctionWriters.CustomCommands.ScoreOperation"/>
            </summary>
            <param name="value1">One of the numbers to add together</param>
            <param name="value2">One of the numbers to add together</param>
            <returns>The score operation for doing the math</returns>
        </member>
        <member name="M:SharpCraft.ScoreValue.op_Addition(System.Int32,SharpCraft.ScoreValue)">
            <summary>
            Adds the two values together into a <see cref="T:SharpCraft.FunctionWriters.CustomCommands.ScoreOperation"/>
            </summary>
            <param name="value1">One of the numbers to add together</param>
            <param name="value2">One of the numbers to add together</param>
            <returns>The score operation for doing the math</returns>
        </member>
        <member name="M:SharpCraft.ScoreValue.op_Subtraction(SharpCraft.ScoreValue,SharpCraft.ValueParameter)">
            <summary>
            subtracts the two values from each other into a <see cref="T:SharpCraft.FunctionWriters.CustomCommands.ScoreOperation"/>
            </summary>
            <param name="value1">The number to subtract from</param>
            <param name="value2">The number to subtract with</param>
            <returns>The score operation for doing the math</returns>
        </member>
        <member name="M:SharpCraft.ScoreValue.op_Subtraction(System.Int32,SharpCraft.ScoreValue)">
            <summary>
            subtracts the two values from each other into a <see cref="T:SharpCraft.FunctionWriters.CustomCommands.ScoreOperation"/>
            </summary>
            <param name="value1">The number to subtract from</param>
            <param name="value2">The number to subtract with</param>
            <returns>The score operation for doing the math</returns>
        </member>
        <member name="M:SharpCraft.ScoreValue.op_Multiply(SharpCraft.ScoreValue,SharpCraft.ValueParameter)">
            <summary>
            multiplies the two values together into a <see cref="T:SharpCraft.FunctionWriters.CustomCommands.ScoreOperation"/>
            </summary>
            <param name="value1">One of the values to multiply with</param>
            <param name="value2">One of the values to multiply with</param>
            <returns>The score operation for doing the math</returns>
        </member>
        <member name="M:SharpCraft.ScoreValue.op_Multiply(System.Int32,SharpCraft.ScoreValue)">
            <summary>
            multiplies the two values together into a <see cref="T:SharpCraft.FunctionWriters.CustomCommands.ScoreOperation"/>
            </summary>
            <param name="value1">One of the values to multiply with</param>
            <param name="value2">One of the values to multiply with</param>
            <returns>The score operation for doing the math</returns>
        </member>
        <member name="M:SharpCraft.ScoreValue.op_Division(SharpCraft.ScoreValue,SharpCraft.ValueParameter)">
            <summary>
            divides the two values by each other into a <see cref="T:SharpCraft.FunctionWriters.CustomCommands.ScoreOperation"/>
            </summary>
            <param name="value1">The number to divide</param>
            <param name="value2">The number to divide with</param>
            <returns>The score operation for doing the math</returns>
        </member>
        <member name="M:SharpCraft.ScoreValue.op_Division(System.Int32,SharpCraft.ScoreValue)">
            <summary>
            divides the two values by each other into a <see cref="T:SharpCraft.FunctionWriters.CustomCommands.ScoreOperation"/>
            </summary>
            <param name="value1">The number to divide</param>
            <param name="value2">The number to divide with</param>
            <returns>The score operation for doing the math</returns>
        </member>
        <member name="M:SharpCraft.ScoreValue.op_Modulus(SharpCraft.ScoreValue,SharpCraft.ValueParameter)">
            <summary>
            modulos the two values into a <see cref="T:SharpCraft.FunctionWriters.CustomCommands.ScoreOperation"/>
            </summary>
            <param name="value1">The number to divide</param>
            <param name="value2">The number to divide with</param>
            <returns>The score operation for doing the math</returns>
        </member>
        <member name="M:SharpCraft.ScoreValue.op_Modulus(System.Int32,SharpCraft.ScoreValue)">
            <summary>
            modulos the two values into a <see cref="T:SharpCraft.FunctionWriters.CustomCommands.ScoreOperation"/>
            </summary>
            <param name="value1">The number to divide</param>
            <param name="value2">The number to divide with</param>
            <returns>The score operation for doing the math</returns>
        </member>
        <member name="T:SharpCraft.AllSelector">
            <summary>
            Selector which selects everything
            </summary>
        </member>
        <member name="M:SharpCraft.AllSelector.GetSelector">
            <summary>
            Returns a singleton <see cref="T:SharpCraft.AllSelector"/>
            </summary>
            <returns>A singleton <see cref="T:SharpCraft.AllSelector"/></returns>
        </member>
        <member name="M:SharpCraft.AllSelector.IsLimited">
            <summary>
            Returns false. Selector selects everything
            </summary>
            <returns>False. Selector selects everything</returns>
        </member>
        <member name="M:SharpCraft.AllSelector.LimitSelector">
            <summary>
            Throws an exception since the selector can't be limited
            </summary>
        </member>
        <member name="M:SharpCraft.AllSelector.GetSelectorString">
            <summary>
            The selector string used by the game
            </summary>
            <returns>The selector string used by the game</returns>
        </member>
        <member name="T:SharpCraft.BaseSelector">
            <summary>
            Interface for selectors
            </summary>
        </member>
        <member name="M:SharpCraft.BaseSelector.IsLimited">
            <summary>
            Returns true if the selector is limited to selecting a single entity
            </summary>
            <returns>True if the selector is limited to selecting a single entity</returns>
        </member>
        <member name="M:SharpCraft.BaseSelector.LimitSelector">
            <summary>
            Forces the selector to only select 1 entity
            </summary>
        </member>
        <member name="M:SharpCraft.BaseSelector.GetSelectorString">
            <summary>
            The selector string used by the game
            </summary>
            <returns>The selector string used by the game</returns>
        </member>
        <member name="M:SharpCraft.BaseSelector.op_Implicit(SharpCraft.ID.Selector)~SharpCraft.BaseSelector">
            <summary>
            Converts a selector type into a selector
            </summary>
            <param name="selector">the selector type to convert into a selector</param>
        </member>
        <member name="M:SharpCraft.BaseSelector.op_Implicit(System.String)~SharpCraft.BaseSelector">
            <summary>
            Converts a string into a selector selecting a name
            </summary>
            <param name="name">The name to select</param>
        </member>
        <member name="T:SharpCraft.NameSelector">
            <summary>
            Selector which selects a name
            </summary>
        </member>
        <member name="M:SharpCraft.NameSelector.#ctor(System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.NameSelector"/>
            </summary>
            <param name="name">The name to select</param>
        </member>
        <member name="M:SharpCraft.NameSelector.#ctor(System.String,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.NameSelector"/>
            </summary>
            <param name="name">The name to select</param>
            <param name="isHidden">If the name should be hidden</param>
        </member>
        <member name="P:SharpCraft.NameSelector.Name">
            <summary>
            The name to select
            </summary>
        </member>
        <member name="P:SharpCraft.NameSelector.IsHidden">
            <summary>
            if the name should be hidden on scoreboard lists. (If the name should start with a #)
            </summary>
        </member>
        <member name="M:SharpCraft.NameSelector.IsLimited">
            <summary>
            Returns true. Selector can only select 1 thing
            </summary>
            <returns>True. Selector can only select 1 thing</returns>
        </member>
        <member name="M:SharpCraft.NameSelector.LimitSelector">
            <summary>
            Does nothing. Selector is already limited
            </summary>
        </member>
        <member name="M:SharpCraft.NameSelector.GetSelectorString">
            <summary>
            The selector string used by the game
            </summary>
            <returns>The selector string used by the game</returns>
        </member>
        <member name="M:SharpCraft.NameSelector.op_Implicit(System.String)~SharpCraft.NameSelector">
            <summary>
            Converts a string into a selector selecting a name
            </summary>
            <param name="name">The name to select</param>
        </member>
        <member name="T:SharpCraft.Selector">
            <summary>
            An object for selectors
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.#ctor">
            <summary>
            Creates a new @s selector
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.#ctor(SharpCraft.ID.Selector,SharpCraft.Tag)">
            <summary>
            Creates a new selecter of the given type
            </summary>
            <param name="SelectWay">the type of selector</param>
            <param name="HasTag">a tag the selected entity must have. Note that this can be overwritten by <see cref="P:SharpCraft.Selector.Tags"/></param>
        </member>
        <member name="P:SharpCraft.Selector.SelectorType">
            <summary>
            The type of this selector
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.Level">
            <summary>
            The amount of levels the selected entity must have to be selected
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.Distance">
            <summary>
            The distance there has to be to the selected entity
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.XRotation">
            <summary>
            The x-rotation the selected entity must have (Vertical rotation. 90 = down, -90 = up)
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.YRotation">
            <summary>
            The y-rotation the selected entity must have (Horizontal rotation. 0 = +z, 90 = -x)
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.Limit">
            <summary>
            The maximum amount of entities this selector can select
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.X">
            <summary>
            The X coords the selector should search from
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.Y">
            <summary>
            The Y coords the selector should search from
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.Z">
            <summary>
            The Z coords the selector should search from
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.BoxX">
            <summary>
            The amount of blocks in the x direction to select in
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.BoxY">
            <summary>
            The amount of blocks in the y direction to select in
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.BoxZ">
            <summary>
            The amount of blocks in the z direction to select in
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.Names">
            <summary>
            The names the selected entity must have / must not have to be selected
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.Types">
            <summary>
            The types the selected entity must be / must not be to be selected
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.Tags">
            <summary>
            The tags the selected entity must have / must not have to be selected
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.Scores">
            <summary>
            The scores the selected entity must have
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.Teams">
            <summary>
            The teams the selected entity must be on / must not be on to be selected
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.Modes">
            <summary>
            The gamemode the selected entity must be in / must not be in to be selected
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.Predicates">
            <summary>
            The predicates the selected entity must turn successfull / not successfull
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.Sort">
            <summary>
            The way the selected entities should be sorted in
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.NBT">
            <summary>
            The NBT the selected entity have to have to be selected
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.NotNBT">
            <summary>
            If the entity shouldnt have the NBT in <see cref="P:SharpCraft.Selector.NBT"/>
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.SingleType">
            <summary>
            The type the entity has to be. Note that <see cref="P:SharpCraft.Selector.Types"/> overwrites this value
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.SingleName">
            <summary>
            The name the entity has to have. Note that <see cref="P:SharpCraft.Selector.Names"/> overwrites this value
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.SingleTeam">
            <summary>
            The team the entity has to be. Note that <see cref="P:SharpCraft.Selector.Teams"/> overwrites this value
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.SingleScore">
            <summary>
            The score the entity has to have. Note that <see cref="P:SharpCraft.Selector.Scores"/> overwrites this value
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.SingleTag">
            <summary>
            The tag the entity has to be. Note that <see cref="P:SharpCraft.Selector.Tags"/> overwrites this value
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.SingleMode">
            <summary>
            The gamemode the entity has to be. Note that <see cref="P:SharpCraft.Selector.Modes"/> overwrites this value
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.SinglePredicate">
            <summary>
            A predicate which should be true for the selected entity. Note that <see cref="P:SharpCraft.Selector.Predicates"/> overwrites this value
            </summary>
        </member>
        <member name="T:SharpCraft.Selector.ISelectorArgument">
            <summary>
            Interface for selector arguments there can be multiple of
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.ISelectorArgument.GetSelectionString">
            <summary>
            Gets the argument string
            </summary>
            <returns>The argument string</returns>
        </member>
        <member name="T:SharpCraft.Selector.EntityType">
            <summary>
            An object used to define a type an entity has to be / not to be
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityType.#ctor(SharpCraft.EntityType,System.Boolean)">
            <summary>
            Creates the object with the given parameters
            </summary>
            <param name="id">The type of entity the entity has / has not to be</param>
            <param name="wanted">If the entity should be the type or not</param>
        </member>
        <member name="P:SharpCraft.Selector.EntityType.Wanted">
            <summary>
            If the entity should be the type or not
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.EntityType.ID">
            <summary>
            The type of entity the entity has / has not to be
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityType.GetSelectionString">
            <summary>
            The <see cref="P:SharpCraft.Selector.SelectorType"/>'s raw data
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityType.op_Implicit(SharpCraft.Selector.EntityType)~SharpCraft.Selector.EntityType[]">
            <summary>
            Converts a single <see cref="T:SharpCraft.Selector.EntityType"/> into an array containing only that one <see cref="T:SharpCraft.Selector.EntityType"/>
            </summary>
            <param name="entity">the <see cref="T:SharpCraft.Selector.EntityType"/> to convert into an array</param>
        </member>
        <member name="M:SharpCraft.Selector.EntityType.op_Implicit(SharpCraft.EntityType)~SharpCraft.Selector.EntityType">
            <summary>
            Converts a <see cref="T:SharpCraft.EntityType"/> into a <see cref="T:SharpCraft.Selector.EntityTag"/>
            </summary>
            <param name="type">the <see cref="T:SharpCraft.EntityType"/> to convert</param>
        </member>
        <member name="M:SharpCraft.Selector.EntityType.op_Implicit(SharpCraft.ID.Entity)~SharpCraft.Selector.EntityType">
            <summary>
            Converts a <see cref="T:SharpCraft.ID.Entity"/> into a <see cref="T:SharpCraft.Selector.EntityTag"/>
            </summary>
            <param name="type">the <see cref="T:SharpCraft.ID.Entity"/> to convert</param>
        </member>
        <member name="T:SharpCraft.Selector.EntityName">
            <summary>
            An object used to define a name an entity has to have / not to have
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityName.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an object defining a name an entity has to have / not to have
            </summary>
            <param name="name">The name the entity has to have / not to have</param>
            <param name="wanted">If the entity has to have the name</param>
        </member>
        <member name="P:SharpCraft.Selector.EntityName.Wanted">
            <summary>
            If the entity should have the name or not
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.EntityName.Name">
            <summary>
            The name the entity has to have / not to have
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityName.GetSelectionString">
            <summary>
            The <see cref="T:SharpCraft.Selector.EntityName"/>'s raw data
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityName.op_Implicit(SharpCraft.Selector.EntityName)~SharpCraft.Selector.EntityName[]">
            <summary>
            Converts a single <see cref="T:SharpCraft.Selector.EntityName"/> into an array containing only that one <see cref="T:SharpCraft.Selector.EntityName"/>
            </summary>
            <param name="name">the <see cref="T:SharpCraft.Selector.EntityName"/> to convert into an array</param>
        </member>
        <member name="T:SharpCraft.Selector.EntityTag">
            <summary>
            An object used to define a name an entity has to have / not to have
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityTag.#ctor(SharpCraft.Tag,System.Boolean)">
            <summary>
            Creates an object defining a tag an entity has to have / not to have
            </summary>
            <param name="tag">The tag the entity has to have / not to have</param>
            <param name="wanted">If the entity has to have the tag or not</param>
        </member>
        <member name="P:SharpCraft.Selector.EntityTag.Wanted">
            <summary>
            If the entity should have the tag or not
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.EntityTag.Tag">
            <summary>
            The tag the entity has to have / not to have
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityTag.GetSelectionString">
            <summary>
            The <see cref="T:SharpCraft.Selector.EntityTag"/>'s raw data
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityTag.op_Implicit(SharpCraft.Selector.EntityTag)~SharpCraft.Selector.EntityTag[]">
            <summary>
            Converts a single <see cref="T:SharpCraft.Selector.EntityTag"/> into an array containing only that one <see cref="T:SharpCraft.Selector.EntityTag"/>
            </summary>
            <param name="tag">the <see cref="T:SharpCraft.Selector.EntityTag"/> to convert into an array</param>
        </member>
        <member name="M:SharpCraft.Selector.EntityTag.op_Implicit(SharpCraft.Tag)~SharpCraft.Selector.EntityTag">
            <summary>
            Converts a <see cref="T:SharpCraft.Tag"/> into a <see cref="T:SharpCraft.Selector.EntityTag"/>
            </summary>
            <param name="tag">the <see cref="T:SharpCraft.Tag"/> to convert</param>
        </member>
        <member name="T:SharpCraft.Selector.EntityScore">
            <summary>
            An object used to define a score an entity has to have
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityScore.#ctor(SharpCraft.Objective,SharpCraft.MCRange)">
            <summary>
            Creates an object defining a score an entity has to have
            </summary>
            <param name="objective">The score objective to look in</param>
            <param name="score">The range the score has to be inside</param>
        </member>
        <member name="P:SharpCraft.Selector.EntityScore.Objective">
            <summary>
            The score objective to look in
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.EntityScore.Score">
            <summary>
            The range the score has to be inside
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityScore.GetSelectionString">
            <summary>
            The <see cref="T:SharpCraft.Selector.EntityScore"/>'s raw data
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityScore.op_Implicit(SharpCraft.Selector.EntityScore)~SharpCraft.Selector.EntityScore[]">
            <summary>
            Converts a single <see cref="T:SharpCraft.Selector.EntityScore"/> into an array containing only that one <see cref="T:SharpCraft.Selector.EntityScore"/>
            </summary>
            <param name="score">the <see cref="T:SharpCraft.Selector.EntityScore"/> to convert into an array</param>
        </member>
        <member name="T:SharpCraft.Selector.EntityTeam">
            <summary>
            An object used to define a team an entity has to be on / not to be on
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityTeam.#ctor(SharpCraft.Team,System.Boolean)">
            <summary>
            Creates an object defining a team an entity has to be / not to be on
            </summary>
            <param name="team">The team the entity has to be on / not to be on</param>
            <param name="wanted">If the entity has to be on the team or not</param>
        </member>
        <member name="P:SharpCraft.Selector.EntityTeam.Wanted">
            <summary>
            If the entity should have the tag or not
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.EntityTeam.Team">
            <summary>
            The team the entity has to be on / not to be on
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityTeam.GetSelectionString">
            <summary>
            The <see cref="T:SharpCraft.Selector.EntityTeam"/>'s raw data
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityTeam.op_Implicit(SharpCraft.Selector.EntityTeam)~SharpCraft.Selector.EntityTeam[]">
            <summary>
            Converts a single <see cref="T:SharpCraft.Selector.EntityTeam"/> into an array containing only that one <see cref="T:SharpCraft.Selector.EntityTeam"/>
            </summary>
            <param name="team">the <see cref="T:SharpCraft.Selector.EntityTeam"/> to convert into an array</param>
        </member>
        <member name="M:SharpCraft.Selector.EntityTeam.op_Implicit(SharpCraft.Team)~SharpCraft.Selector.EntityTeam">
            <summary>
            Converts a <see cref="T:SharpCraft.Team"/> into a <see cref="T:SharpCraft.Selector.EntityTag"/>
            </summary>
            <param name="team">the <see cref="T:SharpCraft.Team"/> to convert</param>
        </member>
        <member name="T:SharpCraft.Selector.EntityMode">
            <summary>
            An object used to define a gamemode an entity has to be in / not to be in
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityMode.#ctor(SharpCraft.ID.Gamemode,System.Boolean)">
            <summary>
            Creates an object defining a gamemode an entity has to be in / not to be in
            </summary>
            <param name="mode">The gamemode the entity has to be in / not to be in</param>
            <param name="wanted">If the entity has to be in the gamemode or not</param>
        </member>
        <member name="P:SharpCraft.Selector.EntityMode.Wanted">
            <summary>
            If the entity has to be in the gamemode or not
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.EntityMode.Mode">
            <summary>
            The gamemode the entity has to be in / not to be in
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityMode.GetSelectionString">
            <summary>
            The <see cref="T:SharpCraft.Selector.EntityMode"/>'s raw data
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityMode.op_Implicit(SharpCraft.Selector.EntityMode)~SharpCraft.Selector.EntityMode[]">
            <summary>
            Converts a single <see cref="T:SharpCraft.Selector.EntityMode"/> into an array containing only that one <see cref="T:SharpCraft.Selector.EntityMode"/>
            </summary>
            <param name="mode">the <see cref="T:SharpCraft.Selector.EntityMode"/> to convert into an array</param>
        </member>
        <member name="M:SharpCraft.Selector.EntityMode.op_Implicit(SharpCraft.ID.Gamemode)~SharpCraft.Selector.EntityMode">
            <summary>
            Converts a <see cref="T:SharpCraft.ID.Gamemode"/> into a <see cref="T:SharpCraft.Selector.EntityMode"/>
            </summary>
            <param name="mode">the <see cref="T:SharpCraft.ID.Gamemode"/> to convert</param>
        </member>
        <member name="T:SharpCraft.Selector.EntityPredicate">
            <summary>
            An object used to define a predicate an entity has to have / not have
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityPredicate.#ctor(SharpCraft.IPredicate,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Selector.EntityPredicate"/>
            </summary>
            <param name="predicate">The predicate to check</param>
            <param name="wanted">If the predicate should be wanted successfull or not</param>
        </member>
        <member name="P:SharpCraft.Selector.EntityPredicate.Predicate">
            <summary>
            The predicate to check
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.EntityPredicate.Wanted">
            <summary>
            If the predicate should be wanted successfull or not
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityPredicate.GetSelectionString">
            <summary>
            The <see cref="T:SharpCraft.Selector.EntityMode"/>'s raw data
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityPredicate.op_Implicit(SharpCraft.Selector.EntityPredicate)~SharpCraft.Selector.EntityPredicate[]">
            <summary>
            Converts a single <see cref="T:SharpCraft.Selector.EntityPredicate"/> into an array containing only that one <see cref="T:SharpCraft.Selector.EntityPredicate"/>
            </summary>
            <param name="predicate">the <see cref="T:SharpCraft.Selector.EntityPredicate"/> to convert into an array</param>
        </member>
        <member name="M:SharpCraft.Selector.GetSelectorString">
            <summary>
            The selector string used by the game
            </summary>
            <returns>The selector string used by the game</returns>
        </member>
        <member name="M:SharpCraft.Selector.LimitSelector">
            <summary>
            Limits the selector to only selecting 1 entity
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.IsLimited">
            <summary>
            Returns true if the selector is limited to only one entity
            </summary>
            <returns>True if the selector is limited to only one entity</returns>
        </member>
        <member name="M:SharpCraft.Selector.op_Implicit(SharpCraft.ID.Selector)~SharpCraft.Selector">
            <summary>
            Converts a selector type into a selector
            </summary>
            <param name="selector">the selector type to convert into a selector</param>
        </member>
        <member name="M:SharpCraft.Selector.GetSelectionString(SharpCraft.Selector.ISelectorArgument[])">
            <summary>
            Returns the string used for selecting the thing in the array
            </summary>
            <param name="array">An array of things to select</param>
            <returns>The string used for selecting the thing in the array</returns>
        </member>
        <member name="M:SharpCraft.Selector.ShallowClone">
            <summary>
            Returns a shallow clone of this selector
            </summary>
            <returns>A shallow clone of this selector</returns>
        </member>
        <member name="T:SharpCraft.Storage">
            <summary>
            Storage for holding NBT
            </summary>
        </member>
        <member name="M:SharpCraft.Storage.#ctor(SharpCraft.BasePackNamespace,System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Storage"/>
            </summary>
            <param name="packNamespace">The namespace for the storage</param>
            <param name="name">The name of the storage</param>
        </member>
        <member name="P:SharpCraft.Storage.PackNamespace">
            <summary>
            The namespace for the storage
            </summary>
        </member>
        <member name="P:SharpCraft.Storage.Name">
            <summary>
            The name of the storage
            </summary>
        </member>
        <member name="M:SharpCraft.Storage.GetNamespacedName">
            <summary>
            Returns the namespaced name of this storage
            </summary>
            <returns>The namespaced name of this storage</returns>
        </member>
        <member name="T:SharpCraft.Tag">
            <summary>
            An object used for tags
            </summary>
        </member>
        <member name="M:SharpCraft.Tag.#ctor(System.String)">
            <summary>
            Creates a new tag with the given name
            </summary>
            <param name="TagName">The name of the tag</param>
        </member>
        <member name="P:SharpCraft.Tag.Name">
            <summary>
            The name of the tag
            </summary>
        </member>
        <member name="M:SharpCraft.Tag.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this tag into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="extraConversionData">set to <see cref="F:SharpCraft.ID.NBTTagType.TagString"/></param>
            <param name="asType">The type of tag</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="M:SharpCraft.Tag.op_Implicit(System.String)~SharpCraft.Tag">
            <summary>
            Converts a string into a <see cref="T:SharpCraft.Tag"/>
            </summary>
            <param name="tag">the string to convert</param>
        </member>
        <member name="M:SharpCraft.Tag.op_Implicit(SharpCraft.Tag)~SharpCraft.Tag[]">
            <summary>
            Converts a <see cref="T:SharpCraft.Tag"/> into an <see cref="T:SharpCraft.Tag"/> array containing only that one <see cref="T:SharpCraft.Tag"/>
            </summary>
            <param name="tag">the <see cref="T:SharpCraft.Tag"/> to convert</param>
        </member>
        <member name="T:SharpCraft.Team">
            <summary>
            An object used for teams
            </summary>
        </member>
        <member name="M:SharpCraft.Team.#ctor(System.String)">
            <summary>
            Creates a new team object.
            Note that this doesnt add the team to the world
            </summary>
            <param name="TeamName">The team's name</param>
        </member>
        <member name="P:SharpCraft.Team.Name">
            <summary>
            The name of the team
            </summary>
        </member>
        <member name="M:SharpCraft.Team.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this team into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">The type of tag (accepts <see cref="F:SharpCraft.ID.NBTTagType.TagString"/>)</param>
            <param name="extraConversionData">Unused</param>
            <returns>This team as a <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="T:SharpCraft.Time">
            <summary>
            An object used to define time
            </summary>
        </member>
        <member name="T:SharpCraft.Time.TimerType">
            <summary>
            The type of time to output
            </summary>
        </member>
        <member name="F:SharpCraft.Time.TimerType.Int">
            <summary>
            Will output a time which can be in an int
            </summary>
        </member>
        <member name="F:SharpCraft.Time.TimerType.Short">
            <summary>
            Will output a time which can be in an short
            </summary>
        </member>
        <member name="M:SharpCraft.Time.#ctor(System.Int32,SharpCraft.ID.TimeType)">
            <summary>
            Creates a new time object with the specified time
            </summary>
            <param name="time">the amount of time</param>
            <param name="timeType">the time measuring type</param>
        </member>
        <member name="M:SharpCraft.Time.GetTimeString">
            <summary>
            Converts the time into raw data used by the game
            </summary>
            <returns>Raw data used by the game</returns>
        </member>
        <member name="M:SharpCraft.Time.op_Implicit(System.Int32)~SharpCraft.Time">
            <summary>
            Converts a number into a new time object in ticks
            </summary>
            <param name="ticks">The amount of ticks the time should be</param>
        </member>
        <member name="M:SharpCraft.Time.IsNegative">
            <summary>
            Returns true if the time in this time object is negative
            </summary>
            <returns>True if the time in this time object is negative</returns>
        </member>
        <member name="M:SharpCraft.Time.AsTicks(SharpCraft.Time.TimerType)">
            <summary>
            Outputs this time amount in ticks
            </summary>
            <param name="type">The type of output</param>
            <returns>This time amount in ticks</returns>
        </member>
        <member name="M:SharpCraft.Time.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this time into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="extraConversionData">Not used</param>
            <param name="asType">The type of tag</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="T:SharpCraft.Utils">
            <summary>
            A class containing helpful method extensions
            </summary>
        </member>
        <member name="M:SharpCraft.Utils.Escape(System.String)">
            <summary>
            Adds escape characters to the given text
            </summary>
            <param name="text">The text to escape</param>
            <returns>The escaped text</returns>
        </member>
        <member name="M:SharpCraft.Utils.ToMinecraftDouble(System.Double)">
            <summary>
            Converts the given double into a double Minecraft can use
            </summary>
            <param name="Double">The double to convert</param>
            <returns>The converted double</returns>
        </member>
        <member name="M:SharpCraft.Utils.ToMinecraftDouble(System.Nullable{System.Double})">
            <summary>
            Converts the given double into a double Minecraft can use
            </summary>
            <param name="Double">The double to convert</param>
            <returns>The converted double</returns>
        </member>
        <member name="M:SharpCraft.Utils.ToMinecraftFloat(System.Single)">
            <summary>
            Converts the given float into a double Minecraft can use
            </summary>
            <param name="Float">The float to convert</param>
            <returns>The converted float</returns>
        </member>
        <member name="M:SharpCraft.Utils.ToMinecraftFloat(System.Nullable{System.Single})">
            <summary>
            Converts the given float into a float Minecraft can use
            </summary>
            <param name="Float">The float to convert</param>
            <returns>The converted float</returns>
        </member>
        <member name="M:SharpCraft.Utils.MinecraftValue(SharpCraft.ID.Item)">
            <summary>
            Takes the item and converts it into an value Minecraft can use
            </summary>
            <param name="item">The item to convert</param>
            <returns>The converted item</returns>
        </member>
        <member name="M:SharpCraft.Utils.MinecraftValue(System.Nullable{SharpCraft.ID.Item})">
            <summary>
            Takes the item and converts it into an value Minecraft can use
            </summary>
            <param name="item">The item to convert</param>
            <returns>The converted item</returns>
        </member>
        <member name="M:SharpCraft.Utils.ToMinecraftBool(System.Boolean)">
            <summary>
            Takes a bool and converts it into a value Minecraft can use
            </summary>
            <param name="Bool">The bool to convert</param>
            <returns>The converted bool</returns>
        </member>
        <member name="M:SharpCraft.Utils.ToMinecraftBool(System.Nullable{System.Boolean})">
            <summary>
            Takes a bool and converts it into a value Minecraft can use
            </summary>
            <param name="Bool">The bool to convert</param>
            <returns>The converted bool</returns>
        </member>
        <member name="M:SharpCraft.Utils.ConvertToBlock(SharpCraft.ID.Item)">
            <summary>
            Converts the given <see cref="T:SharpCraft.ID.Item"/> into an <see cref="T:SharpCraft.ID.Block"/>
            </summary>
            <param name="item">The item to convert</param>
            <returns>The block</returns>
        </member>
        <member name="M:SharpCraft.Utils.ConvertToBlock(System.Nullable{SharpCraft.ID.Item})">
            <summary>
            Converts the given <see cref="T:SharpCraft.ID.Item"/> into an <see cref="T:SharpCraft.ID.Block"/>
            </summary>
            <param name="item">The item to convert</param>
            <returns>The block</returns>
        </member>
        <member name="M:SharpCraft.Utils.ConvertToItem(SharpCraft.ID.Block)">
            <summary>
            Converts the given <see cref="T:SharpCraft.ID.Block"/> into an <see cref="T:SharpCraft.ID.Item"/>
            </summary>
            <param name="block">The block to convert</param>
            <returns>The item</returns>
        </member>
        <member name="M:SharpCraft.Utils.ConvertToItem(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Converts the given <see cref="T:SharpCraft.ID.Item"/> into an <see cref="T:SharpCraft.ID.Block"/>
            </summary>
            <param name="block">The block to convert</param>
            <returns>The item</returns>
        </member>
        <member name="M:SharpCraft.Utils.ValidateName(System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Checks if the given name is valid or not
            </summary>
            <param name="name">The name to check</param>
            <param name="allowCapitialized">If capitialized letters are allowed</param>
            <param name="allowSlash">If / is allowed</param>
            <param name="maxLength">The maximum length of the name</param>
            <returns>True if the name is valid</returns>
        </member>
        <member name="T:SharpCraft.UUID">
            <summary>
            An object used for UUID's
            </summary>
        </member>
        <member name="M:SharpCraft.UUID.SetRandomSeed(System.Int32)">
            <summary>
            Sets the seed for the randomiser whcih generates random UUID's
            </summary>
        </member>
        <member name="M:SharpCraft.UUID.#ctor">
            <summary>
            Intializes a new random <see cref="T:SharpCraft.UUID"/>
            </summary>
        </member>
        <member name="M:SharpCraft.UUID.#ctor(System.Int64,System.Int64)">
            <summary>
            Creates a UUID Out of a UUIDLeast and a UUIDMost
            </summary>
            <param name="least">the UUIDLeast</param>
            <param name="most">the UUIDMost</param>
        </member>
        <member name="M:SharpCraft.UUID.#ctor(System.String)">
            <summary>
            Creates a uuid object out of a UUID in a string format
            </summary>
            <param name="uuid">the string to convert</param>
        </member>
        <member name="P:SharpCraft.UUID.Least">
            <summary>
            the UUIDLeast
            </summary>
        </member>
        <member name="P:SharpCraft.UUID.Most">
            <summary>
            the UUIDMost
            </summary>
        </member>
        <member name="P:SharpCraft.UUID.UUIDString">
            <summary>
            The UUID string
            </summary>
        </member>
        <member name="M:SharpCraft.UUID.GetAsDataObject(System.Object[])">
            <summary>
            Converts this UUID into a <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
            <param name="conversionData">0: UUIDMost path, 1: UUIDLeast path</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartObject"/></returns>
        </member>
        <member name="M:SharpCraft.UUID.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this UUID into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">The type to convert the uuid into</param>
            <param name="extraConversionData">Not used</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="T:SharpCraft.ValueParameter">
            <summary>
            Struct for holding making parameters which accepts scores and ints
            </summary>
        </member>
        <member name="M:SharpCraft.ValueParameter.#ctor(SharpCraft.ScoreValue)">
            <summary>
            Creates a new <see cref="T:SharpCraft.ValueParameter"/> holding a <see cref="F:SharpCraft.ValueParameter.ScoreValue"/>
            </summary>
            <param name="scoreValue">The <see cref="F:SharpCraft.ValueParameter.ScoreValue"/> its holding</param>
        </member>
        <member name="M:SharpCraft.ValueParameter.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpCraft.ValueParameter"/> holding an <see cref="T:System.Int32"/>
            </summary>
            <param name="intValue">The <see cref="T:System.Int32"/> its holding</param>
        </member>
        <member name="F:SharpCraft.ValueParameter.IntValue">
            <summary>
            The <see cref="T:System.Int32"/> its holding
            </summary>
        </member>
        <member name="F:SharpCraft.ValueParameter.ScoreValue">
            <summary>
            The <see cref="F:SharpCraft.ValueParameter.ScoreValue"/> its holding
            </summary>
        </member>
        <member name="M:SharpCraft.ValueParameter.IsInt">
            <summary>
            If this <see cref="T:SharpCraft.ValueParameter"/> is holding an <see cref="T:System.Int32"/>
            </summary>
            <returns>True if it's holding an <see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:SharpCraft.ValueParameter.IsScore">
            <summary>
            If this <see cref="T:SharpCraft.ValueParameter"/> is holding a <see cref="F:SharpCraft.ValueParameter.ScoreValue"/>
            </summary>
            <returns>True if it's holding a <see cref="F:SharpCraft.ValueParameter.ScoreValue"/></returns>
        </member>
        <member name="M:SharpCraft.ValueParameter.op_Implicit(System.Int32)~SharpCraft.ValueParameter">
            <summary>
            Converts a <see cref="T:System.Int32"/> into a <see cref="T:SharpCraft.ValueParameter"/>
            </summary>
            <param name="value">The new <see cref="T:SharpCraft.ValueParameter"/></param>
        </member>
        <member name="M:SharpCraft.ValueParameter.op_Implicit(SharpCraft.ScoreValue)~SharpCraft.ValueParameter">
            <summary>
            Converts a <see cref="F:SharpCraft.ValueParameter.ScoreValue"/> into a <see cref="T:SharpCraft.ValueParameter"/>
            </summary>
            <param name="value">The new <see cref="T:SharpCraft.ValueParameter"/></param>
        </member>
        <member name="T:SharpCraft.Coords">
            <summary>
            Class for relative and world coordinates
            </summary>
        </member>
        <member name="M:SharpCraft.Coords.#ctor(System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Coords"/>
            </summary>
            <param name="x">The X coordinate</param>
            <param name="y">The Y coordinate</param>
            <param name="z">The Z coordinate</param>
            <param name="relativeX">If the X coordinate should be relative</param>
            <param name="relativeY">If the Y coordinate should be relative</param>
            <param name="relativeZ">If the Z coordinate should be relative</param>
        </member>
        <member name="M:SharpCraft.Coords.#ctor">
            <summary>
            Intializes a new relative <see cref="T:SharpCraft.Coords"/> (same as ~ ~ ~)
            </summary>
        </member>
        <member name="M:SharpCraft.Coords.#ctor(System.Double,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Coords"/>
            </summary>
            <param name="number">The number in the x,y and z direction</param>
            <param name="relative">If the coordinates should be relative</param>
        </member>
        <member name="M:SharpCraft.Coords.#ctor(System.Boolean,System.Double,System.Double,System.Double)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Coords"/>
            </summary>
            <param name="x">The X coordinate</param>
            <param name="y">The Y coordinate</param>
            <param name="z">The Z coordinate</param>
            <param name="relative">If the coordinates should be relative</param>
        </member>
        <member name="P:SharpCraft.Coords.RelativeX">
            <summary>
            If the X coordinate should be relative
            </summary>
        </member>
        <member name="P:SharpCraft.Coords.RelativeY">
            <summary>
            If the Y coordinate should be relative
            </summary>
        </member>
        <member name="P:SharpCraft.Coords.RelativeZ">
            <summary>
            If the Z coordinate should be relative
            </summary>
        </member>
        <member name="M:SharpCraft.Coords.GetXString">
            <summary>
            Get's the string for the X coordinate
            </summary>
            <returns>The string for the X coordinate</returns>
        </member>
        <member name="M:SharpCraft.Coords.GetYString">
            <summary>
            Get's the string for the Y coordinate
            </summary>
            <returns>The string for the Y coordinate</returns>
        </member>
        <member name="M:SharpCraft.Coords.GetZString">
            <summary>
            Get's the string for the Z coordinate
            </summary>
            <returns>The string for the Z coordinate</returns>
        </member>
        <member name="P:SharpCraft.Coords.CoordType">
            <summary>
            The type of coordinate
            </summary>
        </member>
        <member name="M:SharpCraft.Coords.SameRelativeCoords(SharpCraft.Coords)">
            <summary>
            Checks if the given <see cref="T:SharpCraft.Coords"/> has the same coordinates relative as this coords
            </summary>
            <param name="coords">The coords to check</param>
            <returns>True if they are relative in the same places</returns>
        </member>
        <member name="M:SharpCraft.Coords.op_Addition(SharpCraft.Coords,SharpCraft.Vector)">
            <summary>
            Adds the vector to the coords
            </summary>
            <param name="coords">The coords to add to</param>
            <param name="vector">The vector to add</param>
            <returns>The vector added to the coords</returns>
        </member>
        <member name="M:SharpCraft.Coords.op_Subtraction(SharpCraft.Coords,SharpCraft.Vector)">
            <summary>
            subtracts the vector from the coords
            </summary>
            <param name="coords">The coords to subtract from</param>
            <param name="vector">The vector to subtract</param>
            <returns>The vector subtracted from the coords</returns>
        </member>
        <member name="M:SharpCraft.Coords.op_Multiply(SharpCraft.Coords,SharpCraft.Vector)">
            <summary>
            multiplies the coords with the vector
            </summary>
            <param name="coords">The coords to multiply</param>
            <param name="vector">The vector to multiply with</param>
            <returns>The coords multiplied with the vector</returns>
        </member>
        <member name="M:SharpCraft.Coords.op_Division(SharpCraft.Coords,SharpCraft.Vector)">
            <summary>
            divides the coords with the vector
            </summary>
            <param name="coords">The coords to divide</param>
            <param name="vector">The vector to divide with</param>
            <returns>The coords divided by the vector</returns>
        </member>
        <member name="M:SharpCraft.Coords.op_Multiply(SharpCraft.Coords,System.Double)">
            <summary>
            multiplies the coords with the number
            </summary>
            <param name="coords">The coords to multiply</param>
            <param name="number">The number to multiply with</param>
            <returns>The coords multiplied with the number</returns>
        </member>
        <member name="M:SharpCraft.Coords.op_Division(SharpCraft.Coords,System.Double)">
            <summary>
            divides the coords with the number
            </summary>
            <param name="coords">The coords to divide</param>
            <param name="number">The number to divide with</param>
            <returns>The coords divided with the number</returns>
        </member>
        <member name="T:SharpCraft.LocalCoords">
            <summary>
            Class for local coordinates
            </summary>
        </member>
        <member name="M:SharpCraft.LocalCoords.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LocalCoords"/>
            </summary>
            <param name="x">The X local coordinate (left)</param>
            <param name="y">The Y local coordinate (up)</param>
            <param name="z">The Z local coordinate (forward)</param>
        </member>
        <member name="M:SharpCraft.LocalCoords.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LocalCoords"/> (same as ^ ^ ^)
            </summary>
        </member>
        <member name="M:SharpCraft.LocalCoords.#ctor(System.Double)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LocalCoords"/>
            </summary>
            <param name="number">The number in the x,y and z direction</param>
        </member>
        <member name="M:SharpCraft.LocalCoords.GetXString">
            <summary>
            Get's the string for the X local coordinate
            </summary>
            <returns>The string for the X local coordinate</returns>
        </member>
        <member name="M:SharpCraft.LocalCoords.GetYString">
            <summary>
            Get's the string for the Y local coordinate
            </summary>
            <returns>The string for the Y local coordinate</returns>
        </member>
        <member name="M:SharpCraft.LocalCoords.GetZString">
            <summary>
            Get's the string for the Z local coordinate
            </summary>
            <returns>The string for the Z local coordinate</returns>
        </member>
        <member name="P:SharpCraft.LocalCoords.CoordType">
            <summary>
            The type of coordinate
            </summary>
        </member>
        <member name="M:SharpCraft.LocalCoords.op_Addition(SharpCraft.LocalCoords,SharpCraft.Vector)">
            <summary>
            Adds the vector to the coords
            </summary>
            <param name="coords">The coords to add to</param>
            <param name="vector">The vector to add</param>
            <returns>The vector added to the coords</returns>
        </member>
        <member name="M:SharpCraft.LocalCoords.op_Subtraction(SharpCraft.LocalCoords,SharpCraft.Vector)">
            <summary>
            subtracts the vector from the coords
            </summary>
            <param name="coords">The coords to subtract from</param>
            <param name="vector">The vector to subtract</param>
            <returns>The vector subtracted from the coords</returns>
        </member>
        <member name="M:SharpCraft.LocalCoords.op_Multiply(SharpCraft.LocalCoords,SharpCraft.Vector)">
            <summary>
            multiplies the coords with the vector
            </summary>
            <param name="coords">The coords to multiply</param>
            <param name="vector">The vector to multiply with</param>
            <returns>The coords multiplied with the vector</returns>
        </member>
        <member name="M:SharpCraft.LocalCoords.op_Division(SharpCraft.LocalCoords,SharpCraft.Vector)">
            <summary>
            divides the coords with the vector
            </summary>
            <param name="coords">The coords to divide</param>
            <param name="vector">The vector to divide with</param>
            <returns>The coords divided by the vector</returns>
        </member>
        <member name="M:SharpCraft.LocalCoords.op_Multiply(SharpCraft.LocalCoords,System.Double)">
            <summary>
            multiplies the coords with the number
            </summary>
            <param name="coords">The coords to multiply</param>
            <param name="number">The number to multiply with</param>
            <returns>The coords multiplied with the number</returns>
        </member>
        <member name="M:SharpCraft.LocalCoords.op_Division(SharpCraft.LocalCoords,System.Double)">
            <summary>
            divides the coords with the number
            </summary>
            <param name="coords">The coords to divide</param>
            <param name="number">The number to divide with</param>
            <returns>The coords divided with the number</returns>
        </member>
        <member name="T:SharpCraft.Vector">
            <summary>
            Class for vectors
            </summary>
        </member>
        <member name="M:SharpCraft.Vector.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Vector"/>
            </summary>
            <param name="x">The X part of the vector</param>
            <param name="y">The Y part of the vector</param>
            <param name="z">The Z part of the vector</param>
        </member>
        <member name="M:SharpCraft.Vector.#ctor(System.Double)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Vector"/>
            </summary>
            <param name="number">The number in the x,y and z direction</param>
        </member>
        <member name="P:SharpCraft.Vector.X">
            <summary>
            The X part of the vector
            </summary>
        </member>
        <member name="P:SharpCraft.Vector.Y">
            <summary>
            The Y part of the vector
            </summary>
        </member>
        <member name="P:SharpCraft.Vector.Z">
            <summary>
            The Z part of the vector
            </summary>
        </member>
        <member name="M:SharpCraft.Vector.GetVectorString">
            <summary>
            Gets the vector as a string
            </summary>
            <returns>The vector as a string</returns>
        </member>
        <member name="M:SharpCraft.Vector.GetXString">
            <summary>
            Get's the string for the X part of the vector
            </summary>
            <returns>The string for the X part of the vector</returns>
        </member>
        <member name="M:SharpCraft.Vector.GetYString">
            <summary>
            Get's the string for the Y part of the vector
            </summary>
            <returns>The string for the Y part of the vector</returns>
        </member>
        <member name="M:SharpCraft.Vector.GetZString">
            <summary>
            Get's the string for the Z part of the vector
            </summary>
            <returns>The string for the Z part of the vector</returns>
        </member>
        <member name="M:SharpCraft.Vector.GetAsArray(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Gets the vector as a <see cref="T:SharpCraft.Data.DataPartArray"/>
            </summary>
            <param name="asType">Not used</param>
            <param name="extraConversionData">Not used</param>
            <returns>The vector as a <see cref="T:SharpCraft.Data.DataPartArray"/></returns>
        </member>
        <member name="M:SharpCraft.Vector.GetAsDataObject(System.Object[])">
            <summary>
            Converts this vector into a <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
            <param name="conversionData">0: x path name, 1: y path name, 2: z path name, 3: if json</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartObject"/></returns>
        </member>
        <member name="P:SharpCraft.Vector.CoordType">
            <summary>
            The type of coordinate
            </summary>
        </member>
        <member name="F:SharpCraft.Vector.PositiveX">
            <summary>
            A static coordinate which is positive in x
            </summary>
        </member>
        <member name="F:SharpCraft.Vector.NegativeX">
            <summary>
            A static coordinate which is positive in x
            </summary>
        </member>
        <member name="F:SharpCraft.Vector.PositiveY">
            <summary>
            A static coordinate which is positive in y
            </summary>
        </member>
        <member name="F:SharpCraft.Vector.NegativeY">
            <summary>
            A static coordinate which is positive in y
            </summary>
        </member>
        <member name="F:SharpCraft.Vector.PositiveZ">
            <summary>
            A static coordinate which is positive in z
            </summary>
        </member>
        <member name="F:SharpCraft.Vector.NegativeZ">
            <summary>
            A static coordinate which is positive in z
            </summary>
        </member>
        <member name="M:SharpCraft.Vector.NumberToDirection(System.Int32,System.Nullable{SharpCraft.ID.Axis})">
            <summary>
            Returns a direction based on the given number
            </summary>
            <param name="number">The number to get the direction for</param>
            <param name="ignoreAxis">If set it won't return directions on the given axis</param>
            <returns>A direction</returns>
        </member>
        <member name="M:SharpCraft.Vector.PathArray">
            <summary>
            Used for getting the datapath for this array. Method throws an exception if called.
            </summary>
            <returns>An object to continue the datapath on</returns>
        </member>
        <member name="M:SharpCraft.Vector.op_Addition(SharpCraft.Vector,SharpCraft.Vector)">
            <summary>
            Adds the given vectors together
            </summary>
            <param name="vector1">One of the vectors to add</param>
            <param name="vector2">One of the vectors to add</param>
            <returns>The vectors added together</returns>
        </member>
        <member name="M:SharpCraft.Vector.op_Subtraction(SharpCraft.Vector,SharpCraft.Vector)">
            <summary>
            subtracts the given vectors from each other
            </summary>
            <param name="vector1">The vector to subtract from</param>
            <param name="vector2">The vector to subtract</param>
            <returns>The vectors subtracted from each other</returns>
        </member>
        <member name="M:SharpCraft.Vector.op_Multiply(SharpCraft.Vector,SharpCraft.Vector)">
            <summary>
            Multiplies the given vectors together
            </summary>
            <param name="vector1">One of the vectors to multiply</param>
            <param name="vector2">One of the vectors to multiply</param>
            <returns>The vectors multiplied together</returns>
        </member>
        <member name="M:SharpCraft.Vector.op_Division(SharpCraft.Vector,SharpCraft.Vector)">
            <summary>
            divied the given vectors with each other
            </summary>
            <param name="vector1">The vector to divide</param>
            <param name="vector2">The vector to divide with</param>
            <returns>The vectors subtracted from each other</returns>
        </member>
        <member name="M:SharpCraft.Vector.op_Multiply(SharpCraft.Vector,System.Double)">
            <summary>
            Multiplies the given vector with the given number
            </summary>
            <param name="vector">The vector to multiply</param>
            <param name="number">The number to multiply with</param>
            <returns>The multiplied vector</returns>
        </member>
        <member name="M:SharpCraft.Vector.op_Division(SharpCraft.Vector,System.Double)">
            <summary>
            Divides the given vector with the given number
            </summary>
            <param name="vector">The vector to divide</param>
            <param name="number">The number to divide with</param>
            <returns>The divided vector</returns>
        </member>
        <member name="T:SharpCraft.IntVector">
            <summary>
            Class for int vectors
            </summary>
        </member>
        <member name="M:SharpCraft.IntVector.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.IntVector"/>
            </summary>
            <param name="x">The X part of the vector</param>
            <param name="y">The Y part of the vector</param>
            <param name="z">The Z part of the vector</param>
        </member>
        <member name="M:SharpCraft.IntVector.#ctor(System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.IntVector"/>
            </summary>
            <param name="number">The number in the x,y and z direction</param>
        </member>
        <member name="M:SharpCraft.IntVector.#ctor(SharpCraft.Vector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.IntVector"/>
            </summary>
            <param name="vector">DoubleVector to convert into int vector</param>
        </member>
        <member name="M:SharpCraft.IntVector.GetAsArray(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Gets the vector as a <see cref="T:SharpCraft.Data.DataPartArray"/>
            </summary>
            <param name="asType">Not used</param>
            <param name="extraConversionData">Not used</param>
            <returns>The vector as a <see cref="T:SharpCraft.Data.DataPartArray"/></returns>
        </member>
        <member name="M:SharpCraft.IntVector.GetAsDataObject(System.Object[])">
            <summary>
            Converts this vector into a <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
            <param name="conversionData">0: x path name, 1: y path name, 2: z path name, 3: if json</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartObject"/></returns>
        </member>
        <member name="M:SharpCraft.IntVector.PathArray">
            <summary>
            Used for getting the datapath for this array. Method throws an exception if called.
            </summary>
            <returns>An object to continue the datapath on</returns>
        </member>
        <member name="T:SharpCraft.ID">
            <summary>
            All the different ID's/Types/States things in the game can have
            </summary>
            <summary>
            All the different ID's/Types/States things in the game can have
            </summary>
            <summary>
            All the different ID's/Types/States things in the game can have
            </summary>
            <summary>
            All the different ID's/Types/States things in the game can have
            </summary>
            <summary>
            All the different ID's/Types/States things in the game can have
            </summary>
            <summary>
            All the different ID's/Types/States things in the game can have
            </summary>
            <summary>
            All the different ID's/Types/States things in the game can have
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateCompareMode.compare">
            <summary>
            Outputs the signal if it's the greatest signal
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateCompareMode.subtract">
            <summary>
            Subtracts the side signal from the input signal
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateChestType.single">
            <summary>
            Its a single chest
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateChestType.left">
            <summary>
            Connected with the chest to the left
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateChestType.right">
            <summary>
            Connected with the chest to the right
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.FSharp1">
            <summary>
            F♯/G♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.GSharp1">
            <summary>
            G♯/A♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.ASharp1">
            <summary>
            A♯/B♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.CSharp1">
            <summary>
            C♯/D♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.DSharp1">
            <summary>
            D♯/E♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.FSharp2">
            <summary>
            F♯/G♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.GSharp2">
            <summary>
            G♯/A♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.ASharp2">
            <summary>
            A♯/B♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.CSharp2">
            <summary>
            C♯/D♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.DSharp2">
            <summary>
            D♯/E♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.FSharp3">
            <summary>
            F♯/G♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateStairShape.inner_left">
            <summary>
            7/8 of a block.
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateStairShape.inner_right">
            <summary>
            7/8 of a block.
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateStairShape.outer_left">
            <summary>
            5/8 of a block.
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateStairShape.outer_right">
            <summary>
            5/8 of a block.
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateStairShape.straight">
            <summary>
            6/8 of a block.
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.bs">
            <summary>
            Bottom Stripe
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.ts">
            <summary>
            Top Stripe
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.ls">
            <summary>
            Left Stripe
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.rs">
            <summary>
            Right Stripe
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.cs">
            <summary>
            Center Stripe
            (bottom to top)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.ms">
            <summary>
            Middle Stripe
            (left to right)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.drs">
            <summary>
            Down Right Stripe
            (Starts at top left ends at bottom right)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.dls">
            <summary>
            Down Left Stripe
            (Starts at top right ends at bottom left)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.ss">
            <summary>
            Small Stripes
            (multiple lines going from bottom to top)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.cr">
            <summary>
            Cross
            (X)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.sc">
            <summary>
            Cross
            (+)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.ld">
            <summary>
            Left Top Diagonal
            (Goes from bottom left to top right with the left side being colored)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.rud">
            <summary>
            Right Top Diagonal
            (Goes from top left to bottom right with the right side being colored)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.lud">
            <summary>
            Left Bottom Diagonal
            (Goes from top left to bottom right with the left side being colored)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.rd">
            <summary>
            Right Bottom Diagonal
            (Goes from bottom left to top right with the right side being colored)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.vh">
            <summary>
            Vertical Half Left
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.vhr">
            <summary>
            Vertical Half Right
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.hh">
            <summary>
            Horizontal Half Top
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.hhb">
            <summary>
            Horizontal Half Bottom
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.bl">
            <summary>
            Bottom Left Square
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.br">
            <summary>
            Bottom Right Square
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.tl">
            <summary>
            top Left Square
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.tr">
            <summary>
            Top Right Square
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.bt">
            <summary>
            Bottom Triangle
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.tt">
            <summary>
            Top Triangle
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.bts">
            <summary>
            Multiple Bottom Triangles
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.tts">
            <summary>
            Multiple Top Triangles
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.mc">
            <summary>
            Middle Circle
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.mr">
            <summary>
            Middle Rhombus
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.bo">
            <summary>
            Border
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.cbo">
            <summary>
            Weird waving border
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.bri">
            <summary>
            Bricks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.gra">
            <summary>
            Top Gradiant
            (Solid at top and gone at bottom)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.gru">
            <summary>
            Bottom Gradiant
            (Solid at bottom and gone at top)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.cre">
            <summary>
            Creeper
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.sku">
            <summary>
            Skull
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.flo">
            <summary>
            Flower
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.moj">
            <summary>
            Mojang
            </summary>
        </member>
        <member name="F:SharpCraft.ID.CoordType.Relative">
            <summary>
            A coordinate relative to another place
            </summary>
        </member>
        <member name="F:SharpCraft.ID.CoordType.Local">
            <summary>
            A coordinate in a direction
            </summary>
        </member>
        <member name="F:SharpCraft.ID.CoordType.Normal">
            <summary>
            A coordinate in the world
            </summary>
        </member>
        <member name="F:SharpCraft.ID.CoordType.Vector">
            <summary>
            Not used ingame. This coordinate type is for math.
            </summary>
        </member>
        <member name="F:SharpCraft.ID.CoordType.Mixed">
            <summary>
            Used to mark a coordinate as a mix between relative and normal coords
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Selector.a">
            <summary>
            Selects all players
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Selector.p">
            <summary>
            Selects the closest player
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Selector.r">
            <summary>
            Selects a random player
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Selector.e">
            <summary>
            Selects all entities
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Selector.s">
            <summary>
            Selects the executing player
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BlockFill.destroy">
            <summary>
            Destroys all blocks and makes their items drop
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BlockFill.keep">
            <summary>
            Only replaces air blocks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BlockFill.hollow">
            <summary>
            The inside of the fill is filled with air with a square of the chosen block around
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BlockFill.outline">
            <summary>
            The inside of the fill isn't effected. Only the frame is.
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BlockFill.replace">
            <summary>
            Replaces blocks with the specified block
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.announceAdvancements">
            <summary>
            If the "Player has gotten advancement" message should be displayed
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.commandBlockOutput">
            <summary>
            If command blocks should tell admins when they run a command
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.disableElytraMovementCheck">
            <summary>
            If the server should skip checking player speed when flying with an elytra.
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.disableRaids">
            <summary>
            If raids should be disabled
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.doDaylightCycle">
            <summary>
            If the daylight cycle runs
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.doEntityDrops">
            <summary>
            If entities should drop anything
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.doFireTick">
            <summary>
            If fire should be able to spread
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.doLimitedCrafting">
            <summary>
            If players only should be able to craft recipes they own
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.doMobLoot">
            <summary>
            If mobs should drop their loot
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.doMobSpawning">
            <summary>
            If mobs should be able to spawn naturally
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.doTileDrops">
            <summary>
            If blocks should drop their loot
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.doWeatherCycle">
            <summary>
            If the weather cycle runs
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.keepInventory">
            <summary>
            If players should keep their inventory on death
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.logAdminCommands">
            <summary>
            If admin commands should be logged in the server log
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.mobGriefing">
            <summary>
            If mobs should be able to grief/change blocks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.naturalRegeneration">
            <summary>
            If players should be able to heal if they have enough food
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.reducedDegubInfo">
            <summary>
            If the debug screen (f3) should show limited information
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.sendCommandFeedback">
            <summary>
            If commands should tell players if they were successfull or not
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.showDeathMessages">
            <summary>
            If death messages should be displayed in chat
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.spectatorsGenerateChunks">
            <summary>
            If spectators are able to generate new chunks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.doInsomnia">
            <summary>
            If phantoms should spawn when player havent slept for some time
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.doImmediateRespawn">
            <summary>
            If players should respawn immediatly
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.drowningDamage">
            <summary>
            If players should take damage from drowning
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.fallDamage">
            <summary>
            If players should take fall damage
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BoolGamerule.fireDamage">
            <summary>
            If players should take fire damage
            </summary>
        </member>
        <member name="F:SharpCraft.ID.IntGamerule.maxEntityCramming">
            <summary>
            The amount of entities there can be in a crammed space before they start taking damage
            </summary>
        </member>
        <member name="F:SharpCraft.ID.IntGamerule.randomTickSpeed">
            <summary>
            The amount of random block ticks which happens per chunk per tick
            </summary>
        </member>
        <member name="F:SharpCraft.ID.IntGamerule.spawnRadius">
            <summary>
            The max distance players can spawn away from the world spawn center
            </summary>
        </member>
        <member name="F:SharpCraft.ID.IntGamerule.maxCommandChainLength">
            <summary>
            The maximum amount of commands which can run at once
            </summary>
        </member>
        <member name="F:SharpCraft.ID.QueryTime.day">
            <summary>
            Returns the amount of days which has passed in the world
            </summary>
        </member>
        <member name="F:SharpCraft.ID.QueryTime.daytime">
            <summary>
            Returns the time of day
            </summary>
        </member>
        <member name="F:SharpCraft.ID.QueryTime.gametime">
            <summary>
            Returns the total amount of time there has passed in this world (based of what time it is)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.RelativeAdvancement.from">
            <summary>
            Selects all the child advancements of this advancement
            </summary>
        </member>
        <member name="F:SharpCraft.ID.RelativeAdvancement.through">
            <summary>
            Selects all advancements on the same branch as this advancement
            </summary>
        </member>
        <member name="F:SharpCraft.ID.RelativeAdvancement.until">
            <summary>
            Selects all the ancestor advancements of this advancement
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BossBarValue.max">
            <summary>
            The max value the boss bar can have
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BossBarValue.players">
            <summary>
            The amount of players who can see the boss bar
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BossBarValue.value">
            <summary>
            The value displayed in the boss bar
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BossBarValue.visible">
            <summary>
            1 if visible. 0 if not visible
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Operation.Add">
            <summary>
            Add (+) the 2 numbers and saves the result in the first <see cref="T:SharpCraft.ID.Selector"/>
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Operation.Subtract">
            <summary>
            subtract (-) the 2 numbers and saves the result in the first <see cref="T:SharpCraft.ID.Selector"/>
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Operation.Multiply">
            <summary>
            multiply (*) the 2 numbers and saves the result in the first <see cref="T:SharpCraft.ID.Selector"/>
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Operation.Divide">
            <summary>
            divide (/) the 2 numbers and saves the result in the first <see cref="T:SharpCraft.ID.Selector"/>
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Operation.Remainder">
            <summary>
            finds the remainder (%) when dividing the 2 numbers and saves the result in the first <see cref="T:SharpCraft.ID.Selector"/>
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Operation.Switch">
            <summary>
            Switches the 2 numbers. First <see cref="T:SharpCraft.ID.Selector"/> gets <see cref="T:SharpCraft.ID.Selector"/> 2's number and 2 gets 1's number
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Operation.GetHigher">
            <summary>
            Finds the highest number of the given numbers and saves it in the first <see cref="T:SharpCraft.ID.Selector"/>
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Operation.GetLowest">
            <summary>
            Finds the lowest number of the given numbers and saves it in the first <see cref="T:SharpCraft.ID.Selector"/>
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Operation.Equel">
            <summary>
            Sets the first <see cref="T:SharpCraft.ID.Selector"/>'s score to the 2nd <see cref="T:SharpCraft.ID.Selector"/>'s score
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TeamCollision.always">
            <summary>
            Makes the team collide with everyone
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TeamCollision.never">
            <summary>
            Makes the team never collide
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TeamCollision.pushOtherTeams">
            <summary>
            Makes the team only collide with players not on their team
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TeamCollision.PushOwnTeam">
            <summary>
            Makes the team only collide with players on their team
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TeamVisibility.always">
            <summary>
            Makes the team visible to everyone
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TeamVisibility.never">
            <summary>
            Makes the team hidden for everyone
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TeamVisibility.hideForOtherTeams">
            <summary>
            Makes the team hidden for players not on their team
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TeamVisibility.hideForOwnTeam">
            <summary>
            Makes the team hidden for players on their own team
            </summary>
        </member>
        <member name="F:SharpCraft.ID.IfScoreOperation.Smaller">
            <summary>
            &lt;
            </summary>
        </member>
        <member name="F:SharpCraft.ID.IfScoreOperation.SmallerOrEquel">
            <summary>
            &lt;=
            </summary>
        </member>
        <member name="F:SharpCraft.ID.IfScoreOperation.Equel">
            <summary>
            ==
            </summary>
        </member>
        <member name="F:SharpCraft.ID.IfScoreOperation.Higher">
            <summary>
            &gt;
            </summary>
        </member>
        <member name="F:SharpCraft.ID.IfScoreOperation.HigherOrEquel">
            <summary>
            &gt;=
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BossBarStyle.progress">
            <summary>
            The bar is one big bar
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BossBarStyle.notched_6">
            <summary>
            The bar is split into 6 parts
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BossBarStyle.notched_10">
            <summary>
            The bar is split into 10 parts
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BossBarStyle.notched_12">
            <summary>
            The bar is split into 12 parts
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BossBarStyle.notched_20">
            <summary>
            The bar is split into 20 parts
            </summary>
        </member>
        <member name="F:SharpCraft.ID.ObjectiveRender.hearts">
            <summary>
            If each number should be displayed as a half heart
            </summary>
        </member>
        <member name="F:SharpCraft.ID.ObjectiveRender.integer">
            <summary>
            If the number should be displayed as a number
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TimeType.ticks">
            <summary>
            Makes the time be in ticks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TimeType.seconds">
            <summary>
            Makes the time be in seconds
            (20 ticks)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TimeType.days">
            <summary>
            Makes the time be in Minecraft days
            (24000 ticks)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.Circling">
            <summary>
            The ender dragon will circle around the island
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.Strafing">
            <summary>
            Flies to a player and fires a fireball
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.FlyingToPortal">
            <summary>
            Flies to the portal
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.LandingOnPortal">
            <summary>
            Lands on the portal
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.TakingOffFromPortal">
            <summary>
            Taking of from the portal
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.LandedBreathAttack">
            <summary>
            Performs a breath attack while standing still
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.LandedReadyBreathAttack">
            <summary>
            Gets ready to perform a breath attack on a player
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.LandedRoar">
            <summary>
            Roars before going to <see cref="F:SharpCraft.ID.DragonPhase.LandedReadyBreathAttack"/>
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.ChargingPlayer">
            <summary>
            Charges a player
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.FlyingToPortalToDie">
            <summary>
            Flies to the portal to die there
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.NoAI">
            <summary>
            Enderdragon will not have any AI
            </summary>
        </member>
        <member name="F:SharpCraft.ID.ArrowPickup.CantPickUp">
            <summary>
            Players can't pick up the arrow
            </summary>
        </member>
        <member name="F:SharpCraft.ID.ArrowPickup.CanPickUp">
            <summary>
            Players can pick up the arrow
            </summary>
        </member>
        <member name="F:SharpCraft.ID.ArrowPickup.CreativePickUp">
            <summary>
            Players in creative mode can pick the arrow
            </summary>
        </member>
        <member name="F:SharpCraft.ID.AttributeOperation.addition">
            <summary>
            Adds the number to the base
            </summary>
        </member>
        <member name="F:SharpCraft.ID.AttributeOperation.multiply_base">
            <summary>
            Multiplies the base number with all the given multiply_base modifiers at once
            </summary>
        </member>
        <member name="F:SharpCraft.ID.AttributeOperation.multiply_total">
            <summary>
            Multiplies the total attribute value with the given number
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files">
            <summary>
            File names used by Minecraft
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.LootTables">
            <summary>
            Loot table file names used by Minecraft which then can be used in / as a <see cref="T:SharpCraft.LootTable"/>
            </summary>
        </member>
        <member name="M:SharpCraft.ID.Files.LootTables.Block(SharpCraft.ID.Block)">
            <summary>
            Outputs the file name for the given block's loot table
            </summary>
            <param name="block">The block to get the file name of</param>
            <returns>A loot table file name</returns>
        </member>
        <member name="M:SharpCraft.ID.Files.LootTables.Entity(SharpCraft.ID.Entity)">
            <summary>
            Outputs the file name for the given entity's loot table
            </summary>
            <param name="entity">The entity to get the file name of</param>
            <returns>A loot table file name</returns>
        </member>
        <member name="M:SharpCraft.ID.Files.LootTables.EntitySheep(SharpCraft.ID.Color)">
            <summary>
            Outputs the file name for the given sheep color's loot table
            </summary>
            <param name="color">The sheep color to get the file name of</param>
            <returns>A loot table file name</returns>
        </member>
        <member name="T:SharpCraft.ID.Files.LootTables.Fishing">
            <summary>
            Loot tables Minecraft uses for fishing
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Files.LootTables.Fishing.BaseFishing">
            <summary>
            The loot table called when the player cathes a fish
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Files.LootTables.Fishing.Fish">
            <summary>
            A loot table containing fishs
            (this loot table is normally called by the <see cref="P:SharpCraft.ID.Files.LootTables.Fishing.BaseFishing"/> loot table and the normal guardian loot table)
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Files.LootTables.Fishing.Junk">
            <summary>
            A loot table containing junk
            (this loot table is normally called by the <see cref="P:SharpCraft.ID.Files.LootTables.Fishing.BaseFishing"/> loot table)
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Files.LootTables.Fishing.Treasure">
            <summary>
            A loot table containing treasure
            (this loot table is normally called by the <see cref="P:SharpCraft.ID.Files.LootTables.Fishing.BaseFishing"/> loot table)
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.LootTables.VillagerGifts">
            <summary>
            Gifts given by villagers from hero of the village
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Files.LootTables.CatMorningGift">
            <summary>
            A random item dropped by cats at the morning
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.LootTables.Chest">
            <summary>
            Loot tables Minecraft uses for chest loot
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.LootTables.Chest.Village">
            <summary>
            Loot tables for chests in villagers
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups">
            <summary>
            These groups are called tags in Minecraft. But let's face it. It's a bad name!
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Function">
            <summary>
            Function groups
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Function.load">
            <summary>
            Functions inside this group gets evoked everytime the world loads or someone uses /reload
            (They are run when the datapack containing the group loads)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Function.tick">
            <summary>
            Functions inside this groups runs 20 times a second
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Blocks">
            <summary>
            Block groups
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Blocks.Normal">
            <summary>
            Normal block groups made by the game. These groups has no real uses other than grouping blocks
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Blocks.Special">
            <summary>
            Special block groups which has special properties
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.enderman_holdable">
            <summary>
            Endermen can only pick up blocks in this group
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.anvil">
            <summary>
            This group makes anvils in it show their gui when clicked (Only works for anvil blocks)
            Changes the death message caused by the block as a falling block landing on and killing a player
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.banners">
            <summary>
            Right clicking these blocks with a map marks it on the map
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.beds">
            <summary>
            Blocks cats can sit on.
            Blocks which can be slept in
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.impermeable">
            <summary>
            Blocks in this groups does not allow water and honey to drip through them
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.fences">
            <summary>
            Blocks leads can attach to
            Blocks which mobs see as fences while pathfinding
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.logs">
            <summary>
            Leaves wont decay around these blocks
            Trees can grow into blocks with this tag
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.underwater_bonemeals">
            <summary>
            When one of these blocks are bonemealed under water in a warm water biome the block duplicates
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.valid_spawn">
            <summary>
            Blocks in this group allows players to spawn on them
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.wool">
            <summary>
            Blocks in this group can be broken using shears
            If a block in this group is under a note block it will sound like a guitar
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.bamboo_plantable">
            <summary>
            Blocks in this group allows bamboo to be planted ontop
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.wither_immune">
            <summary>
            Blocks the wither wont have easy to break
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.dragon_immune">
            <summary>
            Blocks the enderdragon wont destroy
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.bee_growables">
            <summary>
            Blocks bees can make grow
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.beehives">
            <summary>
            Blocks bees can fill with pollen and blocks dispensers can use a shear or a glass bottle on
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.flowers">
            <summary>
            Blocks bees can pollinate and remember
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.shulker_boxes">
            <summary>
            Blocks fences doesn't connect to
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.jungle_logs">
            <summary>
            Blocks cocoa beans can be placed on
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.rails">
            <summary>
            Blocks mobs can't spawn on.
            Blocks minecarts can be dispenced on to.
            Blocks tnt minecarts doesn't destroy.
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.signs">
            <summary>
            Water doesn't break these blocks
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Fluid">
            <summary>
            fluid groups used by Minecraft
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Fluid.lava">
            <summary>
            Cactus breaks beside these.
            Used to make a fluid look like lava.
            Used to make smoke particles when rain hits these.
            Items and experience orbs burns inside these.
            used when creating cobblestone/stone/obsidian.
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Fluid.water">
            <summary>
            Corals must be beside one of these.
            Farmland stays hydrated around these.
            Sugar canes can stay around these.
            Sponges absorb these.
            some particles can only survive in these.
            Entities in these moves like in water.
            concrete gets solid in these.
            items float in these.
            glass bottles can be filled with these.
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Items">
            <summary>
            item groups
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Items.Normal">
            <summary>
            Normal item groups made by the game. These groups has no real uses other than grouping items
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Items.Special">
            <summary>
            special item groups which has special properties
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.planks">
            <summary>
            Items in this group can be used to repeair wooden tools and shields.
            Items which burns in a furnace for 300 ticks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.fishes">
            <summary>
            Dolphins swims to players with this item
            Can be feet to dolphins
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.flowers">
            <summary>
            Items which can be used to breed bees
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.lectern_books">
            <summary>
            Items which can be placed on a lectern (only accepts <see cref="F:SharpCraft.ID.Item.writable_book"/> and <see cref="F:SharpCraft.ID.Item.written_book"/>)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.arrows">
            <summary>
            Items which can be shot from a bow/crossbow
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.banners">
            <summary>
            Items which burns in a furnace for 300 ticks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.boats">
            <summary>
            Items which burns in a furnace for 1200 ticks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.carpets">
            <summary>
            Items which can be placed on llamas.
            Items which burns in a furnace for 67 ticks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.logs">
            <summary>
            Items which burns in a furnace for 300 ticks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.saplings">
            <summary>
            Items which burns in a furnace for 100 ticks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.signs">
            <summary>
            Items which burns in a furnace for 200 ticks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.small_flowers">
            <summary>
            Items used for crafting suspicious stew.
            Items which can be fed to brown mushrooms.
            Items which bees follows
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.wooden_buttons">
            <summary>
            Items which burns in a furnace for 100 ticks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.wooden_doors">
            <summary>
            Items which burns in a furnace for 200 ticks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.wooden_pressure_plates">
            <summary>
            Items which burns in a furnace for 300 ticks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.wooden_slabs">
            <summary>
            Items which burns in a furnace for 150 ticks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.wooden_stairs">
            <summary>
            Items which burns in a furnace for 300 ticks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.wooden_trapdoors">
            <summary>
            Items which burns in a furnace for 300 ticks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.wool">
            <summary>
            Items which burns in a furnace for 100 ticks
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Entities">
            <summary>
            entity groups
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Entities.Normal">
            <summary>
            Normal entity groups made by the game. These groups has no real uses other than grouping entities for advancements
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Entities.Special">
            <summary>
            special entity groups which has special properties
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Entities.Special.beehive_inhabitors">
            <summary>
            entities which can be in beehives
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Entities.Special.raiders">
            <summary>
            Entities which glows when the bell rings.
            Entities which don't override ravager AI when riding on one
            </summary>
        </member>
        <member name="F:SharpCraft.ID.LootTarget.This">
            <summary>
            Checks as the killed entity
            </summary>
        </member>
        <member name="F:SharpCraft.ID.LootTarget.Killer">
            <summary>
            Checks as the killer
            </summary>
        </member>
        <member name="F:SharpCraft.ID.LootTarget.Killer_player">
            <summary>
            Checks as the killer if the killer is a player
            </summary>
        </member>
        <member name="F:SharpCraft.ID.LootTarget.block_entity">
            <summary>
            The mined block
            </summary>
        </member>
        <member name="F:SharpCraft.ID.AdvancementFrame.task">
            <summary>
            Normal basic advancement
            </summary>
        </member>
        <member name="F:SharpCraft.ID.AdvancementFrame.challenge">
            <summary>
            A star advancement which is supposed to be hard to get
            It makes a sounds and makes the name purple
            </summary>
        </member>
        <member name="F:SharpCraft.ID.AdvancementFrame.goal">
            <summary>
            A advancement which is round instead of being square
            </summary>
        </member>
        <member name="T:SharpCraft.ID.SimpleNBTTagType">
            <summary>
            Types of datatags
            </summary>
        </member>
        <member name="F:SharpCraft.ID.SimpleNBTTagType.Array">
            <summary>
            Array tag
            </summary>
        </member>
        <member name="F:SharpCraft.ID.SimpleNBTTagType.Compound">
            <summary>
            Compound tag
            </summary>
        </member>
        <member name="F:SharpCraft.ID.SimpleNBTTagType.Tag">
            <summary>
            Normal tag
            </summary>
        </member>
        <member name="F:SharpCraft.ID.SimpleNBTTagType.Unknown">
            <summary>
            Unknown tag type
            </summary>
        </member>
        <member name="T:SharpCraft.ID.ScoreDisplay">
            <summary>
            Places to show scores
            </summary>
        </member>
        <member name="F:SharpCraft.ID.ScoreDisplay.belowName">
            <summary>
            To display the player's score under the player's nametag ingame
            </summary>
        </member>
        <member name="F:SharpCraft.ID.ScoreDisplay.list">
            <summary>
            To display the player's score besides the player's name in the tab list
            </summary>
        </member>
        <member name="F:SharpCraft.ID.ScoreDisplay.sidebar">
            <summary>
            To display the whole scoreboard in the sidebar list
            (Highest numbers are displayed first. This list only supports up to 15 scores) 
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Objective">
            <summary>
            A list of all scoreboard objectives
            </summary>
        </member>
        <member name="M:SharpCraft.ID.Objective.KilledByTeam(SharpCraft.ID.MinecraftColor)">
            <summary>
            Goes up by one when the player was killed by another player with the specified team color
            </summary>
            <param name="TeamColor">The team color to check for</param>
        </member>
        <member name="M:SharpCraft.ID.Objective.KillTeam(SharpCraft.ID.MinecraftColor)">
            <summary>
            Goes up by one when the player kills another with the specified team color
            </summary>
            <param name="TeamColor">The team color to check for</param>
        </member>
        <member name="M:SharpCraft.ID.Objective.Broken(SharpCraft.ID.Item)">
            <summary>
            Goes up by one when the player breaks the specified item
            (As in uses the last durability)
            </summary>
            <param name="Item">the item to check for</param>
        </member>
        <member name="M:SharpCraft.ID.Objective.Crafted(SharpCraft.ID.Item)">
            <summary>
            Goes up by one when the player crafts the specified item
            </summary>
            <param name="Item">the item to check for</param>
        </member>
        <member name="M:SharpCraft.ID.Objective.Dropped(SharpCraft.ID.Item)">
            <summary>
            Goes up by one when the player crafts the specified item
            </summary>
            <param name="Item">the item to check for</param>
        </member>
        <member name="M:SharpCraft.ID.Objective.Killed(SharpCraft.ID.Entity)">
            <summary>
            Goes up by one when the player kills an entity of the specified type
            </summary>
            <param name="Entity">the entity to check for</param>
        </member>
        <member name="M:SharpCraft.ID.Objective.KilledBy(SharpCraft.ID.Entity)">
            <summary>
            Goes up by one when the player gets killed by an entity of the specified type
            </summary>
            <param name="Entity">the entity to check for</param>
        </member>
        <member name="M:SharpCraft.ID.Objective.Mined(SharpCraft.ID.Block)">
            <summary>
            Goes up by one when the player breaks the specified block
            </summary>
            <param name="Block">the block to check for</param>
        </member>
        <member name="M:SharpCraft.ID.Objective.PickedUp(SharpCraft.ID.Item)">
            <summary>
            Goes up by one when the player picks up the specified item
            </summary>
            <param name="Item">the item to check for</param>
        </member>
        <member name="M:SharpCraft.ID.Objective.Used(SharpCraft.ID.Item)">
            <summary>
            Goes up by one when the player uses the specified item
            </summary>
            <param name="Item">the item to check for</param>
        </member>
        <member name="P:SharpCraft.ID.Objective.LastSlept">
            <summary>
            The number of ticks since the player last slept
            (This is a readonly objective type)
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Objective.Open">
            <summary>
            Goes up by one when the player opens the specified block's gui
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Objective.Movement">
            <summary>
            Goes up one per cm the player moves in the specified way
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.Aviate">
            <summary>
            Distance flown with Elytra
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.RideBoat">
            <summary>
            Distance ridden in boats
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.Climb">
            <summary>
            Distance climbed on ladders/leaves
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.Crouch">
            <summary>
            Distance crouched / shifted / sneaking
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.Dive">
            <summary>
            Distance walked under water (not swum)
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.Fall">
            <summary>
            Distance falled
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.Fly">
            <summary>
            Distance flown in creative/spectator mode
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.RideHorse">
            <summary>
            Distance ridden on horses
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.RideMinecart">
            <summary>
            Distance ridden minecarts
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.RidePig">
            <summary>
            Distance ridden on pigs
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.Sprint">
            <summary>
            Distance sprinted/ran
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.Swim">
            <summary>
            Distance swum
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.Walk">
            <summary>
            Distance walked
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.DeathCount">
            <summary>
            Goes up by one everytime the player dies
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.AnimalsBred">
            <summary>
            Goes up by one everytime the player breds two animals
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.CleanArmor">
            <summary>
            Goes up by one everytime the player cleans leather armor in a cauldron
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.CleanBanner">
            <summary>
            Goes up by one everytime the player cleans a banner in a cauldron
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.DamageDealt">
            <summary>
            Goes up by however much damage the player deals
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.DamageTaken">
            <summary>
            Goes up by however much damage the player takes
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Deaths">
            <summary>
            Goes up by one everytime the player dies
            ...Yep... there are 2 objectives for this
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Drop">
            <summary>
            Goes up by one everytime the player drops something
            Note: dragging an item out of inventory doesnt count
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.EatCake">
            <summary>
            Goes up by one everytime the player eats a cake slice
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Enchant">
            <summary>
            Goes up by one everytime the player enchants an item
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.FillCauldron">
            <summary>
            Goes up by one everytime the player fills a cauldron with water
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.FishCaught">
            <summary>
            Goes up by one for every fish the player caughts
            Note: "fish" is determined by the fish item group
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Jump">
            <summary>
            Goes up by one everytime the player jumps
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Leave">
            <summary>
            Goes up by one when the player leaves the world
            Note: You can ofcourse first check for the score once the player has logged back into the world
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.MobKills">
            <summary>
            Goes up by one when the player kills an entity
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.PlayNote">
            <summary>
            Goes up by one everytime the player plays a note on a noteblock
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.PlayMinute">
            <summary>
            Goes up by one every minute
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.PlayRecord">
            <summary>
            Goes up by one when the player inserts a record into a jukebox
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.PlayerKills">
            <summary>
            Goes up by one everytime the player kills another player
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.PotFlower">
            <summary>
            Goes up by one everytime the player pots a flower in a flower pot
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Sleep">
            <summary>
            Goes up by one per tick the player has been in a bed
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.SneakTime">
            <summary>
            Goes up by one per tick while the player is sneaking / shifting / crouching
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.TuneNote">
            <summary>
            Goes up by one everytime the player tunes a noteblock
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.UseCauldron">
            <summary>
            Goes up by one everytime the player uses a cauldron
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.TotalKills">
            <summary>
            Goes up by one everyime the player kills an entity
            ...Yep... there are 2 scoreboard objectives for this
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.XP">
            <summary>
            The number of xp the player has
            (This is a readonly objective type)
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Air">
            <summary>
            The number of air bubbles the player has
            (This is a readonly objective type)
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Armor">
            <summary>
            The number of armor bars the player has
            (This is a readonly objective type)
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Health">
            <summary>
            The number of hearts the player has
            (Measured in half hearts)
            (This is a readonly objective type)
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Trigger">
            <summary>
            An objective the player self can change with /trigger
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Dummy">
            <summary>
            An objective which doesnt go up/down on its own.
            Its value can only be altered with commands
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Food">
            <summary>
            The number of food bars the player has
            (Measured in half food bars)
            (This is a readonly objective type)
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Level">
            <summary>
            The number of levels the player has
            (This is a readonly objective type)
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds">
            <summary>
            A list of all sounds in the game
            This list can be used in /playsound and /stopsound commands
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds.Ambient">
            <summary>
            Ambient sounds
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds.Ambient.Underwater">
            <summary>
            sounds from underwater
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds.Block">
            <summary>
            block sounds
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds.Entity">
            <summary>
            entity sounds
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds.Item">
            <summary>
            item sounds
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds.Music">
            <summary>
            music
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds.MusicDisc">
            <summary>
            music discs music
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds.Toast">
            <summary>
            advancement/new recipe toast sounds
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds.Weather">
            <summary>
            weather sounds
            </summary>
        </member>
        <member name="T:SharpCraft.IBlockType">
            <summary>
            Interface for classes which can be converted into <see cref="T:SharpCraft.BlockType"/>
            </summary>
        </member>
        <member name="P:SharpCraft.IBlockType.Value">
            <summary>
            The block
            </summary>
        </member>
        <member name="P:SharpCraft.IBlockType.Name">
            <summary>
            The name of the block
            </summary>
        </member>
        <member name="T:SharpCraft.BlockType">
            <summary>
            Class for holding a block id
            </summary>
        </member>
        <member name="M:SharpCraft.BlockType.#ctor(SharpCraft.ID.Block)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.BlockType"/> from a <see cref="T:SharpCraft.ID.Block"/>
            </summary>
            <param name="block">The id of this block</param>
        </member>
        <member name="M:SharpCraft.BlockType.#ctor(SharpCraft.ID.Liquid)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.BlockType"/> from a <see cref="T:SharpCraft.ID.Liquid"/>
            </summary>
            <param name="liquid">The id of this liquid</param>
        </member>
        <member name="M:SharpCraft.BlockType.#ctor(SharpCraft.IBlockType)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.BlockType"/>
            </summary>
            <param name="block">The id of this block</param>
        </member>
        <member name="P:SharpCraft.BlockType.Value">
            <summary>
            The block
            </summary>
        </member>
        <member name="P:SharpCraft.BlockType.Name">
            <summary>
            The id
            </summary>
        </member>
        <member name="M:SharpCraft.BlockType.ToString">
            <summary>
            Returns <see cref="P:SharpCraft.BlockType.Name"/>
            </summary>
            <returns><see cref="P:SharpCraft.BlockType.Name"/></returns>
        </member>
        <member name="M:SharpCraft.BlockType.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this <see cref="T:SharpCraft.BlockType"/> into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">The type of tag to get. Set to null or <see cref="F:SharpCraft.ID.NBTTagType.TagString"/></param>
            <param name="extraConversionData">Not in use</param>
            <returns>This <see cref="T:SharpCraft.BlockType"/> as a <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="M:SharpCraft.BlockType.Equals(System.Object)">
            <summary>
            specifies wether the specified object is equal to the current object
            </summary>
            <param name="obj">The object to check if equal</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:SharpCraft.BlockType.GetHashCode">
            <summary>
            Returns this object's HashCode
            </summary>
            <returns>this object's HashCode</returns>
        </member>
        <member name="M:SharpCraft.BlockType.GetAsDataObject(System.Object[])">
            <summary>
            Converts this type into a <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
            <param name="conversionData">0: tag name if id. 1: tag name if group. 2: if json</param>
            <returns></returns>
        </member>
        <member name="M:SharpCraft.BlockType.op_Implicit(SharpCraft.ID.Block)~SharpCraft.BlockType">
            <summary>
            Implicit converts a <see cref="T:SharpCraft.ID.Block"/> into a <see cref="T:SharpCraft.BlockType"/> object
            </summary>
            <param name="block">The <see cref="T:SharpCraft.ID.Block"/> to convert</param>
        </member>
        <member name="M:SharpCraft.BlockType.op_Implicit(SharpCraft.ID.Liquid)~SharpCraft.BlockType">
            <summary>
            Implicit converts a <see cref="T:SharpCraft.ID.Liquid"/> into a <see cref="T:SharpCraft.BlockType"/> object
            </summary>
            <param name="liquid">The <see cref="T:SharpCraft.ID.Liquid"/> to convert</param>
        </member>
        <member name="M:SharpCraft.BlockType.op_Equality(SharpCraft.BlockType,SharpCraft.ID.Block)">
            <summary>
            Operator for checking if a <see cref="T:SharpCraft.BlockType"/> is equal to a <see cref="T:SharpCraft.ID.Block"/>
            </summary>
            <param name="type">The <see cref="T:SharpCraft.BlockType"/> to check with</param>
            <param name="block">The <see cref="T:SharpCraft.ID.Block"/> to check with</param>
            <returns>True if they are equal</returns>
        </member>
        <member name="M:SharpCraft.BlockType.op_Inequality(SharpCraft.BlockType,SharpCraft.ID.Block)">
            <summary>
            Operator for checking if a <see cref="T:SharpCraft.BlockType"/> is not equal to a <see cref="T:SharpCraft.ID.Block"/>
            </summary>
            <param name="type">The <see cref="T:SharpCraft.BlockType"/> to check with</param>
            <param name="block">The <see cref="T:SharpCraft.ID.Block"/> to check with</param>
            <returns>True if they are not equal</returns>
        </member>
        <member name="T:SharpCraft.IItemType">
            <summary>
            Interface for classes which can be converted into <see cref="T:SharpCraft.ItemType"/>
            </summary>
        </member>
        <member name="P:SharpCraft.IItemType.Value">
            <summary>
            The item
            </summary>
        </member>
        <member name="P:SharpCraft.IItemType.Name">
            <summary>
            The name of the item
            </summary>
        </member>
        <member name="T:SharpCraft.ItemType">
            <summary>
            Class for holding an item id
            </summary>
        </member>
        <member name="M:SharpCraft.ItemType.#ctor(SharpCraft.ID.Item)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.ItemType"/> from a <see cref="T:SharpCraft.ID.Item"/>
            </summary>
            <param name="item">The id of this item</param>
        </member>
        <member name="M:SharpCraft.ItemType.#ctor(SharpCraft.IItemType)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.ItemType"/>
            </summary>
            <param name="item">The id of this item</param>
        </member>
        <member name="P:SharpCraft.ItemType.Value">
            <summary>
            The item
            </summary>
        </member>
        <member name="P:SharpCraft.ItemType.Name">
            <summary>
            The id
            </summary>
        </member>
        <member name="M:SharpCraft.ItemType.ToString">
            <summary>
            Returns <see cref="P:SharpCraft.ItemType.Name"/>
            </summary>
            <returns><see cref="P:SharpCraft.ItemType.Name"/></returns>
        </member>
        <member name="M:SharpCraft.ItemType.op_Implicit(SharpCraft.ID.Item)~SharpCraft.ItemType">
            <summary>
            Implicit converts a <see cref="T:SharpCraft.ID.Item"/> into a <see cref="T:SharpCraft.ItemType"/> object
            </summary>
            <param name="item">The <see cref="T:SharpCraft.ID.Item"/> to convert</param>
        </member>
        <member name="M:SharpCraft.ItemType.op_Equality(SharpCraft.ItemType,SharpCraft.ID.Item)">
            <summary>
            Operator for checking if a <see cref="T:SharpCraft.ItemType"/> is equal to a <see cref="T:SharpCraft.ID.Item"/>
            </summary>
            <param name="type">The <see cref="T:SharpCraft.ItemType"/> to check with</param>
            <param name="item">The <see cref="T:SharpCraft.ID.Item"/> to check with</param>
            <returns>True if they are equal</returns>
        </member>
        <member name="M:SharpCraft.ItemType.op_Inequality(SharpCraft.ItemType,SharpCraft.ID.Item)">
            <summary>
            Operator for checking if a <see cref="T:SharpCraft.ItemType"/> is not equal to a <see cref="T:SharpCraft.ID.Item"/>
            </summary>
            <param name="type">The <see cref="T:SharpCraft.ItemType"/> to check with</param>
            <param name="item">The <see cref="T:SharpCraft.ID.Item"/> to check with</param>
            <returns>True if they are not equal</returns>
        </member>
        <member name="M:SharpCraft.ItemType.Equals(System.Object)">
            <summary>
            specifies wether the specified object is equal to the current object
            </summary>
            <param name="obj">The object to check if equal</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:SharpCraft.ItemType.GetHashCode">
            <summary>
            Returns this object's HashCode
            </summary>
            <returns>this object's HashCode</returns>
        </member>
        <member name="M:SharpCraft.ItemType.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this <see cref="T:SharpCraft.ItemType"/> into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">The type of tag to get. Set to null or <see cref="F:SharpCraft.ID.NBTTagType.TagString"/></param>
            <param name="extraConversionData">Not in use</param>
            <returns>This <see cref="T:SharpCraft.ItemType"/> as a <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="M:SharpCraft.ItemType.GetAsDataObject(System.Object[])">
            <summary>
            Converts this type into a <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
            <param name="conversionData">0: tag name if id. 1: tag name if group. 2: if json</param>
            <returns></returns>
        </member>
        <member name="T:SharpCraft.IEntityType">
            <summary>
            Interface for classes which can be converted into <see cref="T:SharpCraft.EntityType"/>
            </summary>
        </member>
        <member name="P:SharpCraft.IEntityType.Value">
            <summary>
            The entity
            </summary>
        </member>
        <member name="P:SharpCraft.IEntityType.Name">
            <summary>
            The name of the entity
            </summary>
        </member>
        <member name="T:SharpCraft.EntityType">
            <summary>
            Class for holding an entity id
            </summary>
        </member>
        <member name="M:SharpCraft.EntityType.#ctor(SharpCraft.ID.Entity)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.EntityType"/> from a <see cref="T:SharpCraft.ID.Entity"/>
            </summary>
            <param name="entity">The id of this entity</param>
        </member>
        <member name="M:SharpCraft.EntityType.#ctor(SharpCraft.IEntityType)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.EntityType"/>
            </summary>
            <param name="entity">The id of this entity</param>
        </member>
        <member name="P:SharpCraft.EntityType.Value">
            <summary>
            The entity
            </summary>
        </member>
        <member name="P:SharpCraft.EntityType.Name">
            <summary>
            The id
            </summary>
        </member>
        <member name="M:SharpCraft.EntityType.ToString">
            <summary>
            Returns <see cref="P:SharpCraft.EntityType.Name"/>
            </summary>
            <returns><see cref="P:SharpCraft.EntityType.Name"/></returns>
        </member>
        <member name="M:SharpCraft.EntityType.op_Implicit(SharpCraft.ID.Entity)~SharpCraft.EntityType">
            <summary>
            Implicit converts a <see cref="T:SharpCraft.ID.Entity"/> into a <see cref="T:SharpCraft.EntityType"/> object
            </summary>
            <param name="entity">The <see cref="T:SharpCraft.ID.Entity"/> to convert</param>
        </member>
        <member name="M:SharpCraft.EntityType.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this <see cref="T:SharpCraft.EntityType"/> into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">The type of tag to get. Set to null or <see cref="F:SharpCraft.ID.NBTTagType.TagString"/></param>
            <param name="extraConversionData">Not in use</param>
            <returns>This <see cref="T:SharpCraft.EntityType"/> as a <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="M:SharpCraft.EntityType.GetAsDataObject(System.Object[])">
            <summary>
            Converts this type into a <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
            <param name="conversionData">0: tag name if id. 1: tag name if group. 2: if json</param>
            <returns></returns>
        </member>
        <member name="T:SharpCraft.ILiquidType">
            <summary>
            Interface for classes which can be converted into <see cref="T:SharpCraft.LiquidType"/>
            </summary>
        </member>
        <member name="P:SharpCraft.ILiquidType.Value">
            <summary>
            The liquid
            </summary>
        </member>
        <member name="P:SharpCraft.ILiquidType.Name">
            <summary>
            The name of the liquid
            </summary>
        </member>
        <member name="T:SharpCraft.LiquidType">
            <summary>
            Class for holding an liquid id
            </summary>
        </member>
        <member name="M:SharpCraft.LiquidType.#ctor(SharpCraft.ID.Liquid)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LiquidType"/> from a <see cref="T:SharpCraft.ID.Liquid"/>
            </summary>
            <param name="liquid">The id of this liquid</param>
        </member>
        <member name="M:SharpCraft.LiquidType.#ctor(SharpCraft.ID.Block)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LiquidType"/> from a <see cref="T:SharpCraft.ID.Block"/>
            </summary>
            <param name="block">The id of this block</param>
        </member>
        <member name="M:SharpCraft.LiquidType.#ctor(SharpCraft.ILiquidType)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LiquidType"/>
            </summary>
            <param name="liquid">The id of this liquid</param>
        </member>
        <member name="P:SharpCraft.LiquidType.Value">
            <summary>
            The liquid
            </summary>
        </member>
        <member name="P:SharpCraft.LiquidType.Name">
            <summary>
            The id
            </summary>
        </member>
        <member name="M:SharpCraft.LiquidType.ToString">
            <summary>
            Returns <see cref="P:SharpCraft.LiquidType.Name"/>
            </summary>
            <returns><see cref="P:SharpCraft.LiquidType.Name"/></returns>
        </member>
        <member name="M:SharpCraft.LiquidType.op_Implicit(SharpCraft.ID.Liquid)~SharpCraft.LiquidType">
            <summary>
            Implicit converts a <see cref="T:SharpCraft.ID.Liquid"/> into a <see cref="T:SharpCraft.LiquidType"/> object
            </summary>
            <param name="liquid">The <see cref="T:SharpCraft.ID.Liquid"/> to convert</param>
        </member>
        <member name="M:SharpCraft.LiquidType.op_Implicit(SharpCraft.ID.Block)~SharpCraft.LiquidType">
            <summary>
            Implicit converts a <see cref="T:SharpCraft.ID.Block"/> into a <see cref="T:SharpCraft.LiquidType"/> object
            </summary>
            <param name="block">The <see cref="T:SharpCraft.ID.Block"/> to convert</param>
        </member>
        <member name="M:SharpCraft.LiquidType.GetAsDataObject(System.Object[])">
            <summary>
            Converts this type into a <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
            <param name="conversionData">0: tag name if id. 1: tag name if group. 2: if json</param>
            <returns></returns>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.BaseAdvancement">
            <summary>
            Base class for advancement files
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.BaseAdvancement.#ctor(SharpCraft.BasePackNamespace,System.String,SharpCraft.AdvancementObjects.Requirement[],SharpCraft.AdvancementObjects.Reward,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.BaseAdvancement"/>
            </summary>
            <param name="packNamespace">The namespace the advancement is in</param>
            <param name="fileName">The name of the advancement file</param>
            <param name="writeSetting">The setting for writing the file</param>
            <param name="requirements">The requirements for getting the advancement</param>
            <param name="reward">The rewards to get for getting the advancement</param>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.BaseAdvancement.Requirements">
            <summary>
            The requirements for getting the advancement
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.BaseAdvancement.Reward">
            <summary>
            The rewards to get for getting the advancement
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.BaseAdvancement.GetStream">
            <summary>
            Returns the stream this file is going to use for writing it's file
            </summary>
            <returns>The stream for this file</returns>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.BaseAdvancement.WriteFile(System.IO.TextWriter)">
            <summary>
            Writes the file
            </summary>
            <param name="stream">The stream used for writing the file</param>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.BaseAdvancement.WriteStart(System.IO.TextWriter)">
            <summary>
            Writes the beginning of the advancement
            </summary>
            <param name="stream">The stream used for writing the file</param>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.BaseAdvancement.WriteEnd(System.IO.TextWriter)">
            <summary>
            Writes the end of the advancement
            </summary>
            <param name="stream">The stream used for writing the file</param>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.BaseAdvancement.AfterDispose">
            <summary>
            Clears the things in the file.
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.BaseVisibleAdvancement">
            <summary>
            Base class for visible advancement files
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.BaseVisibleAdvancement.#ctor(SharpCraft.BasePackNamespace,System.String,SharpCraft.AdvancementObjects.Requirement[],SharpCraft.AdvancementObjects.Reward,SharpCraft.BaseJsonText,SharpCraft.BaseJsonText,SharpCraft.Item,SharpCraft.ID.AdvancementFrame,System.Boolean,System.Boolean,System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.BaseVisibleAdvancement"/>
            </summary>
            <param name="packNamespace">The namespace the advancement is in</param>
            <param name="fileName">The name of the advancement file</param>
            <param name="writeSetting">The setting for writing the file</param>
            <param name="requirements">The requirements for getting the advancement</param>
            <param name="reward">The rewards to get for getting the advancement</param>
            <param name="announceInChat">True if when the advancement is unlocked it will be announced in chat. False if not</param>
            <param name="description">The description on the advancement</param>
            <param name="frame">The frame around the <see cref="P:SharpCraft.AdvancementObjects.BaseVisibleAdvancement.Icon"/></param>
            <param name="hidden">True if the advancement can't be seen unless it has been unlocked</param>
            <param name="icon">The icon on the advancement</param>
            <param name="name">The shown advancement name</param>
            <param name="showToast">True if when the advancement is unlocked it will display a toast in the top right corner. False if not</param>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.BaseVisibleAdvancement.Name">
            <summary>
            The shown advancement name
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.BaseVisibleAdvancement.Description">
            <summary>
            The description on the advancement
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.BaseVisibleAdvancement.Icon">
            <summary>
            The icon on the advancement
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.BaseVisibleAdvancement.Frame">
            <summary>
            The frame around the <see cref="P:SharpCraft.AdvancementObjects.BaseVisibleAdvancement.Icon"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.BaseVisibleAdvancement.AnnounceInChat">
            <summary>
            True if when the advancement is unlocked it will be announced in chat. False if not
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.BaseVisibleAdvancement.ShowToast">
            <summary>
            True if when the advancement is unlocked it will display a toast in the top right corner. False if not
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.BaseVisibleAdvancement.Hidden">
            <summary>
            True if the advancement can't be seen unless it has been unlocked
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.BaseVisibleAdvancement.WriteDisplayStart(System.IO.TextWriter)">
            <summary>
            Writes the start of the advancement display
            </summary>
            <param name="stream">The stream used for writing the file</param>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.BaseVisibleAdvancement.WriteDisplayEnd(System.IO.TextWriter)">
            <summary>
            Writes the end of the advancement display
            </summary>
            <param name="stream">The stream used for writing the file</param>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.BaseVisibleAdvancement.NewChild(System.String,SharpCraft.AdvancementObjects.Requirement[],SharpCraft.AdvancementObjects.Reward,SharpCraft.BaseJsonText,SharpCraft.BaseJsonText,SharpCraft.Item,SharpCraft.ID.AdvancementFrame,System.Boolean,System.Boolean,System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a new child advancement for this advancement
            </summary>
            <returns>The new child</returns>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.BaseVisibleAdvancement.AfterDispose">
            <summary>
            Clears the things in the file.
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.IRequirementItem">
            <summary>
            Interface for items which can be in requirements
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.IRequirementItem.GetRequirementString(SharpCraft.AdvancementObjects.Requirement)">
            <summary>
            Returns the string used for inserting the item into a requirement
            </summary>
            <param name="requirement">The requirement to get the string for</param>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.Requirement">
            <summary>
            A requirement for an advancement
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.Requirement.#ctor(SharpCraft.AdvancementObjects.IRequirementItem[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.Requirement"/>
            </summary>
            <param name="requirementItems">The required items for this requirement. If its a trigger then it will use or. If its a requirement it will use and.</param>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.Requirement.RequirementItems">
            <summary>
            The required items for this requirement. If its a trigger then it will use or. If its a requirement it will use and.
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.Requirement.GetRequirementString(SharpCraft.AdvancementObjects.Requirement)">
            <summary>
            Returns the string used for inserting the item into a requirement
            </summary>
            <param name="requirement">The requirement to get the string for. Null if this is the parent.</param>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.Requirement.GetGeneratedTriggerName">
            <summary>
            Returns a distinct name for a trigger
            </summary>
            <returns>A distinct name for a trigger</returns>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.Requirement.GetChildTriggers">
            <summary>
            Returns all the triggers in this <see cref="T:SharpCraft.AdvancementObjects.Requirement"/>
            </summary>
            <returns>All the triggers</returns>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.Requirement.op_Implicit(SharpCraft.AdvancementObjects.Requirement)~SharpCraft.AdvancementObjects.Requirement[]">
            <summary>
            Converts a <see cref="T:SharpCraft.AdvancementObjects.Requirement"/> into an array
            </summary>
            <param name="requirement">The <see cref="T:SharpCraft.AdvancementObjects.Requirement"/> to convert</param>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.Reward">
            <summary>
            Reward for advancements
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.Reward.Recipes">
            <summary>
            The recipes to reward
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.Reward.Function">
            <summary>
            The function to run as a reward
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.Reward.LootTables">
            <summary>
            The loot to reward
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.Reward.Experience">
            <summary>
            The amount of experience to reward
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.BaseTrigger">
            <summary>
            The base class for advancement triggers
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.BaseTrigger.#ctor(System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.BaseTrigger"/>
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.BaseTrigger.Name">
            <summary>
            The distinct name of this trigger. Leaving null will generate a name when its added to an advancement and that advancement is written.
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.BaseTrigger.Type">
            <summary>
            The type of trigger
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.BaseTrigger.GetDataTree">
            <summary>
            Returns a tree structure containing all the data tags for this object
            </summary>
            <returns>the bottom of the tree</returns>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.BaseTrigger.GetRequirementString(SharpCraft.AdvancementObjects.Requirement)">
            <summary>
            Returns the string used for inserting the item into a requirement
            </summary>
            <param name="requirement">The requirement to get the string for</param>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.BaseTrigger.op_Implicit(SharpCraft.AdvancementObjects.BaseTrigger)~SharpCraft.AdvancementObjects.BaseTrigger[]">
            <summary>
            Converts a <see cref="T:SharpCraft.AdvancementObjects.BaseTrigger"/> into an array
            </summary>
            <param name="trigger">The <see cref="T:SharpCraft.AdvancementObjects.BaseTrigger"/> to convert</param>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.BaseTrigger.op_Implicit(SharpCraft.AdvancementObjects.BaseTrigger)~SharpCraft.AdvancementObjects.Requirement[]">
            <summary>
            Converts a <see cref="T:SharpCraft.AdvancementObjects.BaseTrigger"/> into a <see cref="T:SharpCraft.AdvancementObjects.Requirement"/> array
            </summary>
            <param name="trigger">The <see cref="T:SharpCraft.AdvancementObjects.BaseTrigger"/> to convert</param>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.BaseTrigger.op_Implicit(SharpCraft.AdvancementObjects.BaseTrigger)~SharpCraft.AdvancementObjects.Requirement">
            <summary>
            Converts a <see cref="T:SharpCraft.AdvancementObjects.BaseTrigger"/> into a <see cref="T:SharpCraft.AdvancementObjects.Requirement"/>
            </summary>
            <param name="trigger">The <see cref="T:SharpCraft.AdvancementObjects.BaseTrigger"/> to convert</param>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.ITrigger">
            <summary>
            Interface for advancement triggers
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.ITrigger.Name">
            <summary>
            The distinct name of this trigger.
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.BredAnimalsTrigger">
            <summary>
            Gets triggered when 2 animals are bred together
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.BredAnimalsTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.BredAnimalsTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.BredAnimalsTrigger.Child">
            <summary>
            The new child animal
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.BredAnimalsTrigger.Parent1">
            <summary>
            One of the parent animals
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.BredAnimalsTrigger.Parent2">
            <summary>
            The other parent animal
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.BrewedPotionTrigger">
            <summary>
            Gets triggered when a potion is taken out of a brewing stand
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.BrewedPotionTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.BrewedPotionTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.BrewedPotionTrigger.Potion">
            <summary>
            The brewed potion
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.CatchTrigger">
            <summary>
            Gets triggered when the player catches something using a fishing rod
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.CatchTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.CatchTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.CatchTrigger.Entity">
            <summary>
            The entity caught with the rod
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.CatchTrigger.Item">
            <summary>
            The item caught with the rod
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.CatchTrigger.FishingRod">
            <summary>
            The fishing rod used
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.CausedRaidTrigger">
            <summary>
            Gets triggered when the player activates a raid
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.CausedRaidTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.CausedRaidTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.CausedRaidTrigger.Location">
            <summary>
            The location the player triggered the raid
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.ChangedDimensionTrigger">
            <summary>
            Gets triggered when the player switches dimension
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.ChangedDimensionTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.ChangedDimensionTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.ChangedDimensionTrigger.From">
            <summary>
            The dimension the player is coming from
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.ChangedDimensionTrigger.To">
            <summary>
            The dimension the player is going to
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.ChanneledLightningTrigger">
            <summary>
            Gets triggered when the player makes lightning using a trident
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.ChanneledLightningTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.ChanneledLightningTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.ChanneledLightningTrigger.HitEntities">
            <summary>
            The dimension the player is coming from
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.ConstructBeaconTrigger">
            <summary>
            Gets triggered when the player makes a beacon pyramide
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.ConstructBeaconTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.ConstructBeaconTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.ConstructBeaconTrigger.Layers">
            <summary>
            The amount of pyramide layers
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.ConsumeItemTrigger">
            <summary>
            Gets triggered when the player consumes an item
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.ConsumeItemTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.ConsumeItemTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.ConsumeItemTrigger.Item">
            <summary>
            The item the player consumed
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.CrossbowKillTrigger">
            <summary>
            Gets triggered when the player kills an entity with using a crossbow
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.CrossbowKillTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.CrossbowKillTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.CrossbowKillTrigger.Victims">
            <summary>
            The entities killed
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.CrossbowKillTrigger.Kills">
            <summary>
            The amount of entities killed
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.CuredVillagerTrigger">
            <summary>
            Gets triggered when the player cures a zombie villager
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.CuredVillagerTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.CuredVillagerTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.CuredVillagerTrigger.Villager">
            <summary>
            The new cured villager
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.CuredVillagerTrigger.Zombie">
            <summary>
            The zombie which was cured
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.DeadByEntityTrigger">
            <summary>
            Gets triggered when the player gets killed by an entity
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.DeadByEntityTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.DeadByEntityTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.DeadByEntityTrigger.KillingBlow">
            <summary>
            The type of hit the last hit was
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.DeadByEntityTrigger.Entity">
            <summary>
            The entity who did the last hit
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.DidDamageTrigger">
            <summary>
            Gets triggered when the player damages another entity
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.DidDamageTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.DidDamageTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.DidDamageTrigger.Damage">
            <summary>
            The type of damage
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.DidDamageTrigger.Entity">
            <summary>
            The entity which got damaged
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.DurabilityChangedTrigger">
            <summary>
            Gets triggered when the player damages an item
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.DurabilityChangedTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.DurabilityChangedTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.DurabilityChangedTrigger.Item">
            <summary>
            The item which was changed
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.DurabilityChangedTrigger.DurabilityUsed">
            <summary>
            The amount of durability used
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.DurabilityChangedTrigger.DurabilityLeft">
            <summary>
            The amount of durability left on the item
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.EffectChangedTrigger">
            <summary>
            Gets triggered when the player gets a new effect or when an effect runs out
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.EffectChangedTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.EffectChangedTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.EffectChangedTrigger.Effects">
            <summary>
            The effects the player has
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.EnchantedItemTrigger">
            <summary>
            Gets triggered when the player enchants an item
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.EnchantedItemTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.EnchantedItemTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.EnchantedItemTrigger.Item">
            <summary>
            The item which got enchanted
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.EnchantedItemTrigger.Levels">
            <summary>
            The amount of levels used for enchanting
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.FilledBucketTrigger">
            <summary>
            Gets triggered when the player fills a bucket
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.FilledBucketTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.FilledBucketTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.FilledBucketTrigger.Item">
            <summary>
            The item the player got from filling a bucket
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.HurtTrigger">
            <summary>
            Gets triggered when the player gets hurt
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.HurtTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.HurtTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.HurtTrigger.Damage">
            <summary>
            The type of damage
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.ImpossibleTrigger">
            <summary>
            Gets triggered when the player defeats a raid
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.ImpossibleTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.ImpossibleTrigger"/>
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.InBlockTrigger">
            <summary>
            Gets triggered when the player is in a block (Triggers for each block the player is in)
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.InBlockTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.InBlockTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.InBlockTrigger.Block">
            <summary>
            The block the player is in.
            Note: block data is not supported.
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.InventoryChangedTrigger">
            <summary>
            Gets triggered when the player's inventory is changed
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.InventoryChangedTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.InventoryChangedTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.InventoryChangedTrigger.Items">
            <summary>
            The items in the players inventory
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.InventoryChangedTrigger.EmptySlots">
            <summary>
            The amount of empty slots
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.InventoryChangedTrigger.FullSlots">
            <summary>
            The amount of full slots
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.InventoryChangedTrigger.OccupiedSlots">
            <summary>
            The amount of occupied slots
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.KilledEntityTrigger">
            <summary>
            Gets triggered when the player kills another entity
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.KilledEntityTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.KilledEntityTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.KilledEntityTrigger.KillingBlow">
            <summary>
            The type of hit the last hit was
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.KilledEntityTrigger.Entity">
            <summary>
            The entity which died
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.LevitationTrigger">
            <summary>
            Gets triggered when the player has the levitation effect
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.LevitationTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.LevitationTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.LevitationTrigger.Distance">
            <summary>
            The distance the player has moved by the effect
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.LevitationTrigger.Duration">
            <summary>
            The duration of the effect
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.LocationTrigger">
            <summary>
            Triggers once every second
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.LocationTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.LocationTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.LocationTrigger.Location">
            <summary>
            The location of the player
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.NestDestroyedTrigger">
            <summary>
            Gets triggered when the player breaks a bee nest
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.NestDestroyedTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.NestDestroyedTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.NestDestroyedTrigger.Item">
            <summary>
            The item the player used to break the nest with
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.NestDestroyedTrigger.Id">
            <summary>
            The block which was destroyed
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.NestDestroyedTrigger.Bees">
            <summary>
            The amount of bees in the nest
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.NetherTravelTrigger">
            <summary>
            Triggers when a player travels to the nether and back to the overworld
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.NetherTravelTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.NetherTravelTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.NetherTravelTrigger.Distance">
            <summary>
            The distance the player has moved in the overworld using the nether
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.PlacedBlockTrigger">
            <summary>
            Gets triggered when the player places a block
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.PlacedBlockTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.PlacedBlockTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.PlacedBlockTrigger.Block">
            <summary>
            The block the player is in.
            Note: block data is not supported.
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.PlacedBlockTrigger.PlacedItem">
            <summary>
            The item the player used to place the block
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.PlacedBlockTrigger.Location">
            <summary>
            The location the block was placed
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.RecipeTrigger">
            <summary>
            Gets triggered when the player unlocks a new recipe
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.RecipeTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.RecipeTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.RecipeTrigger.Recipe">
            <summary>
            The new recipe
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.SafeHoneyHarvestTrigger">
            <summary>
            Gets triggered when the player safely harvest honey from a nest
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.SafeHoneyHarvestTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.SafeHoneyHarvestTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.SafeHoneyHarvestTrigger.Item">
            <summary>
            The item the player used for harvisting
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.SafeHoneyHarvestTrigger.Block">
            <summary>
            The block the honey was harvested from
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.ShotCrossbowTrigger">
            <summary>
            Gets triggered when the player shoots with a crossbow
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.ShotCrossbowTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.ShotCrossbowTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.ShotCrossbowTrigger.Crossbow">
            <summary>
            The crossbow
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.SlideBlockTrigger">
            <summary>
            Gets triggered when the player slides down a block
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.SlideBlockTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.SlideBlockTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.SlideBlockTrigger.Block">
            <summary>
            The block the player slid down of
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.SummonedEntityTrigger">
            <summary>
            Gets triggered when the player summons a build-able entity
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.SummonedEntityTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.SummonedEntityTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.SummonedEntityTrigger.Entity">
            <summary>
            The summoned entity
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.TamedEntityTrigger">
            <summary>
            Gets triggered when the player tames a mob
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.TamedEntityTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.TamedEntityTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.TamedEntityTrigger.Entity">
            <summary>
            The tamed mob
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.TickTrigger">
            <summary>
            Gets triggered 20 times a second
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.TickTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.TickTrigger"/>
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.TradedVillagerTrigger">
            <summary>
            Gets triggered when the player trades with a villager
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.TradedVillagerTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.TradedVillagerTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.TradedVillagerTrigger.Item">
            <summary>
            The item the purchased
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.TradedVillagerTrigger.Villager">
            <summary>
            The villager the player traded with
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.UsedBedTrigger">
            <summary>
            Gets triggered when the player enters a bed
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.UsedBedTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.UsedBedTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.UsedBedTrigger.Location">
            <summary>
            The location the player entered the bed
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.UsedEnderEyeTriggerTrigger">
            <summary>
            Gets triggered when the player throws an eye of ender
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.UsedEnderEyeTriggerTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.UsedEnderEyeTriggerTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.UsedEnderEyeTriggerTrigger.Distance">
            <summary>
            The distance to the closest stronghold
            </summary>
        </member>
        <member name="T:SharpCraft.AdvancementObjects.VillageHeroTrigger">
            <summary>
            Gets triggered when the player defeats a raid
            </summary>
        </member>
        <member name="M:SharpCraft.AdvancementObjects.VillageHeroTrigger.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.AdvancementObjects.VillageHeroTrigger"/>
            </summary>
        </member>
        <member name="P:SharpCraft.AdvancementObjects.VillageHeroTrigger.Location">
            <summary>
            The location the player defeated the raid at
            </summary>
        </member>
        <member name="T:SharpCraft.ChildAdvancement">
            <summary>
            Class for child advancement files
            </summary>
        </member>
        <member name="M:SharpCraft.ChildAdvancement.#ctor(System.Boolean,SharpCraft.BasePackNamespace,System.String,SharpCraft.IAdvancement,SharpCraft.AdvancementObjects.Requirement[],SharpCraft.AdvancementObjects.Reward,SharpCraft.BaseJsonText,SharpCraft.BaseJsonText,SharpCraft.Item,SharpCraft.ID.AdvancementFrame,System.Boolean,System.Boolean,System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.ChildAdvancement"/>. Inherite from this constructor
            </summary>
            <param name="packNamespace">The namespace the advancement is in</param>
            <param name="fileName">The name of the advancement file</param>
            <param name="writeSetting">The setting for writing the file</param>
            <param name="requirements">The requirements for getting the advancement</param>
            <param name="reward">The rewards to get for getting the advancement</param>
            <param name="announceInChat">True if when the advancement is unlocked it will be announced in chat. False if not</param>
            <param name="description">The description on the advancement</param>
            <param name="frame">The frame around the icon</param>
            <param name="hidden">True if the advancement can't be seen unless it has been unlocked</param>
            <param name="icon">The icon on the advancement</param>
            <param name="name">The shown advancement name</param>
            <param name="showToast">True if when the advancement is unlocked it will display a toast in the top right corner. False if not</param>
            <param name="parent">The parent advancement</param>
            <param name="_">Unused parameter used for specifing you want to use this constructor</param>
        </member>
        <member name="M:SharpCraft.ChildAdvancement.#ctor(SharpCraft.BasePackNamespace,System.String,SharpCraft.IAdvancement,SharpCraft.AdvancementObjects.Requirement[],SharpCraft.AdvancementObjects.Reward,SharpCraft.BaseJsonText,SharpCraft.BaseJsonText,SharpCraft.Item,SharpCraft.ID.AdvancementFrame,System.Boolean,System.Boolean,System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.ChildAdvancement"/>
            </summary>
            <param name="packNamespace">The namespace the advancement is in</param>
            <param name="fileName">The name of the advancement file</param>
            <param name="writeSetting">The setting for writing the file</param>
            <param name="requirements">The requirements for getting the advancement</param>
            <param name="reward">The rewards to get for getting the advancement</param>
            <param name="announceInChat">True if when the advancement is unlocked it will be announced in chat. False if not</param>
            <param name="description">The description on the advancement</param>
            <param name="frame">The frame around the icon</param>
            <param name="hidden">True if the advancement can't be seen unless it has been unlocked</param>
            <param name="icon">The icon on the advancement</param>
            <param name="name">The shown advancement name</param>
            <param name="showToast">True if when the advancement is unlocked it will display a toast in the top right corner. False if not</param>
            <param name="parent">The parent advancement</param>
        </member>
        <member name="P:SharpCraft.ChildAdvancement.Parent">
            <summary>
            The parent advancement
            </summary>
        </member>
        <member name="M:SharpCraft.ChildAdvancement.WriteFile(System.IO.TextWriter)">
            <summary>
            Writes the file
            </summary>
            <param name="stream">The stream used for writing the file</param>
        </member>
        <member name="M:SharpCraft.ChildAdvancement.NewSibling(System.String,SharpCraft.AdvancementObjects.Requirement[],SharpCraft.AdvancementObjects.Reward,SharpCraft.BaseJsonText,SharpCraft.BaseJsonText,SharpCraft.Item,SharpCraft.ID.AdvancementFrame,System.Boolean,System.Boolean,System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a new sibling advancement for this advancement
            </summary>
            <returns>The new sibling</returns>
        </member>
        <member name="T:SharpCraft.EmptyAdvancement">
            <summary>
            Used for calling advancements outside this program
            </summary>
        </member>
        <member name="M:SharpCraft.EmptyAdvancement.#ctor(SharpCraft.BasePackNamespace,System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.EmptyAdvancement"/>
            </summary>
            <param name="packNamespace">The namespace the advancement is in</param>
            <param name="fileName">The name of the advancement</param>
        </member>
        <member name="P:SharpCraft.EmptyAdvancement.FileId">
            <summary>
            The name of the advancement
            </summary>
        </member>
        <member name="P:SharpCraft.EmptyAdvancement.PackNamespace">
            <summary>
            The namespace the advancement is in
            </summary>
        </member>
        <member name="M:SharpCraft.EmptyAdvancement.GetNamespacedName">
            <summary>
            Returns the string used for evoking this advancement
            </summary>
            <returns>The string used for evoking this advancement</returns>
        </member>
        <member name="M:SharpCraft.EmptyAdvancement.op_Implicit(System.String)~SharpCraft.EmptyAdvancement">
            <summary>
            Converts a string of the format NAMESPACE:ADVANCEMENT into an <see cref="T:SharpCraft.EmptyAdvancement"/>
            </summary>
            <param name="advancement">The string to convert</param>
        </member>
        <member name="T:SharpCraft.HiddenAdvancement">
            <summary>
            Class for hidden advancements files
            </summary>
        </member>
        <member name="M:SharpCraft.HiddenAdvancement.#ctor(System.Boolean,SharpCraft.BasePackNamespace,System.String,SharpCraft.AdvancementObjects.Requirement[],SharpCraft.AdvancementObjects.Reward,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.HiddenAdvancement"/>. Inherite from this constructor.
            </summary>
            <param name="packNamespace">The namespace the advancement is in</param>
            <param name="fileName">The name of the advancement file</param>
            <param name="writeSetting">The setting for writing the file</param>
            <param name="requirements">The requirements for getting the advancement</param>
            <param name="reward">The rewards to get for getting the advancement</param>
            <param name="_">Unused parameter used for specifing you want to use this constructor</param>
        </member>
        <member name="M:SharpCraft.HiddenAdvancement.#ctor(SharpCraft.BasePackNamespace,System.String,SharpCraft.AdvancementObjects.Requirement[],SharpCraft.AdvancementObjects.Reward,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.HiddenAdvancement"/>
            </summary>
            <param name="packNamespace">The namespace the advancement is in</param>
            <param name="fileName">The name of the advancement file</param>
            <param name="writeSetting">The setting for writing the file</param>
            <param name="requirements">The requirements for getting the advancement</param>
            <param name="reward">The rewards to get for getting the advancement</param>
        </member>
        <member name="T:SharpCraft.IAdvancement">
            <summary>
            Interface for advancements
            </summary>
        </member>
        <member name="P:SharpCraft.IAdvancement.FileId">
            <summary>
            The file name of the advancement
            </summary>
        </member>
        <member name="P:SharpCraft.IAdvancement.PackNamespace">
            <summary>
            The namespace the advancement is in
            </summary>
        </member>
        <member name="M:SharpCraft.IAdvancement.GetNamespacedName">
            <summary>
            Should return the string used for evoking the advancement
            </summary>
            <returns>string for running the advancement</returns>
        </member>
        <member name="T:SharpCraft.InvalidAdvancement">
            <summary>
            Class for invalid advancements files
            </summary>
        </member>
        <member name="M:SharpCraft.InvalidAdvancement.#ctor(System.Boolean,SharpCraft.BasePackNamespace,System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.InvalidAdvancement"/>. Inherite from this constructor.
            </summary>
            <param name="packNamespace">The namespace the advancement is in</param>
            <param name="fileName">The name of the advancement file</param>
            <param name="_">Unused parameter used for specifing you want to use this constructor</param>
        </member>
        <member name="M:SharpCraft.InvalidAdvancement.#ctor(SharpCraft.BasePackNamespace,System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.InvalidAdvancement"/>
            </summary>
            <param name="packNamespace">The namespace the advancement is in</param>
            <param name="fileName">The name of the advancement file</param>
        </member>
        <member name="M:SharpCraft.InvalidAdvancement.WriteFile(System.IO.TextWriter)">
            <summary>
            Writes the file
            </summary>
            <param name="stream">The stream used for writing the file</param>
        </member>
        <member name="T:SharpCraft.ParentAdvancement">
            <summary>
            Class for parent advancement files
            </summary>
        </member>
        <member name="M:SharpCraft.ParentAdvancement.#ctor(System.Boolean,SharpCraft.BasePackNamespace,System.String,SharpCraft.AdvancementObjects.Requirement[],SharpCraft.AdvancementObjects.Reward,SharpCraft.BaseJsonText,SharpCraft.BaseJsonText,SharpCraft.Item,System.String,SharpCraft.ID.AdvancementFrame,System.Boolean,System.Boolean,System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.ParentAdvancement"/>. Inherite from this constructor.
            </summary>
            <param name="packNamespace">The namespace the advancement is in</param>
            <param name="fileName">The name of the advancement file</param>
            <param name="writeSetting">The setting for writing the file</param>
            <param name="requirements">The requirements for getting the advancement</param>
            <param name="reward">The rewards to get for getting the advancement</param>
            <param name="announceInChat">True if when the advancement is unlocked it will be announced in chat. False if not</param>
            <param name="description">The description on the advancement</param>
            <param name="frame">The frame around the icon</param>
            <param name="hidden">True if the advancement can't be seen unless it has been unlocked</param>
            <param name="icon">The icon on the advancement</param>
            <param name="name">The shown advancement name</param>
            <param name="showToast">True if when the advancement is unlocked it will display a toast in the top right corner. False if not</param>
            <param name="background">The background in the advancement gui. Example: minecraft:textures/gui/advancements/backgrounds/end.png.</param>
            <param name="_">Unused parameter used for specifing you want to use this constructor</param>
        </member>
        <member name="M:SharpCraft.ParentAdvancement.#ctor(SharpCraft.BasePackNamespace,System.String,SharpCraft.AdvancementObjects.Requirement[],SharpCraft.AdvancementObjects.Reward,SharpCraft.BaseJsonText,SharpCraft.BaseJsonText,SharpCraft.Item,System.String,SharpCraft.ID.AdvancementFrame,System.Boolean,System.Boolean,System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.ParentAdvancement"/>
            </summary>
            <param name="packNamespace">The namespace the advancement is in</param>
            <param name="fileName">The name of the advancement file</param>
            <param name="writeSetting">The setting for writing the file</param>
            <param name="requirements">The requirements for getting the advancement</param>
            <param name="reward">The rewards to get for getting the advancement</param>
            <param name="announceInChat">True if when the advancement is unlocked it will be announced in chat. False if not</param>
            <param name="description">The description on the advancement</param>
            <param name="frame">The frame around the icon</param>
            <param name="hidden">True if the advancement can't be seen unless it has been unlocked</param>
            <param name="icon">The icon on the advancement</param>
            <param name="name">The shown advancement name</param>
            <param name="showToast">True if when the advancement is unlocked it will display a toast in the top right corner. False if not</param>
            <param name="background">The background in the advancement gui. Example: minecraft:textures/gui/advancements/backgrounds/end.png.</param>
        </member>
        <member name="P:SharpCraft.ParentAdvancement.Background">
            <summary>
            The background in the advancement gui. Example: minecraft:textures/gui/advancements/backgrounds/end.png.
            </summary>
        </member>
        <member name="M:SharpCraft.ParentAdvancement.WriteFile(System.IO.TextWriter)">
            <summary>
            Writes the file
            </summary>
            <param name="stream">The stream used for writing the file</param>
        </member>
        <member name="M:SharpCraft.ParentAdvancement.AfterDispose">
            <summary>
            Clears the things in the file.
            </summary>
        </member>
        <member name="T:SharpCraft.BaseDatapack">
            <summary>
            base class for datapacks
            </summary>
        </member>
        <member name="T:SharpCraft.BaseDatapack.DatapackListener">
            <summary>
            Used for calling methods when a new datapack is added or when datapacks already has been added
            </summary>
            <param name="datapack">the added datapack</param>
        </member>
        <member name="M:SharpCraft.BaseDatapack.AddDatapackListener(SharpCraft.BaseDatapack.DatapackListener)">
            <summary>
            Makes the given <see cref="T:SharpCraft.BaseDatapack.DatapackListener"/> get called every time a new datapack is made and called with all existing datapacks
            </summary>
            <param name="listener">The listener to add</param>
        </member>
        <member name="M:SharpCraft.BaseDatapack.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:SharpCraft.BaseDatapack"/> with the given parameters
            </summary>
            <param name="path">The path to the folder to create this datapack in</param>
            <param name="packName">The datapack's name</param>
        </member>
        <member name="M:SharpCraft.BaseDatapack.#ctor(System.String,System.String,SharpCraft.IFileCreator)">
            <summary>
            Creates a new <see cref="T:SharpCraft.BaseDatapack"/> with the given parameters
            </summary>
            <param name="path">The path to the folder to create this datapack in</param>
            <param name="packName">The datapack's name</param>
            <param name="fileCreator">Class for creating files and directories</param>
        </member>
        <member name="M:SharpCraft.BaseDatapack.FinishedConstructing">
            <summary>
            Call when constructors are done
            </summary>
        </member>
        <member name="P:SharpCraft.BaseDatapack.Path">
            <summary>
            The path to the folder to create this datapack in
            </summary>
        </member>
        <member name="P:SharpCraft.BaseDatapack.Name">
            <summary>
            The name of the datapack
            </summary>
        </member>
        <member name="P:SharpCraft.BaseDatapack.IngameName">
            <summary>
            The name of the datapack used for refering to the datapack in game
            </summary>
        </member>
        <member name="P:SharpCraft.BaseDatapack.Disposed">
            <summary>
            If the datapack has been disposed
            </summary>
        </member>
        <member name="P:SharpCraft.BaseDatapack.FileCreator">
            <summary>
            Used for getting text streams and create directories
            </summary>
        </member>
        <member name="M:SharpCraft.BaseDatapack.GetDataPath">
            <summary>
            Gets the path to the data folder in the datapack
            </summary>
            <returns>the path to the data folder in the datapack</returns>
        </member>
        <member name="M:SharpCraft.BaseDatapack.ValidatePath(System.String)">
            <summary>
            Validates the given path
            </summary>
            <param name="path">The path to validate</param>
            <returns>True if the path is valid</returns>
        </member>
        <member name="M:SharpCraft.BaseDatapack.ValidateName(System.String)">
            <summary>
            Validates the given datapack name
            </summary>
            <param name="name">The name to validate</param>
            <returns>True if the name is valid</returns>
        </member>
        <member name="M:SharpCraft.BaseDatapack.Namespace``1(System.String)">
            <summary>
            Outputs a namespace for this datapack
            </summary>
            <typeparam name="TNamespace">The type of namespace</typeparam>
            <param name="name">The namespace to get</param>
            <returns>A namespace</returns>
        </member>
        <member name="M:SharpCraft.BaseDatapack.AddNewFileListener(SharpCraft.BaseFile.FileListener)">
            <summary>
            Calls the given method when a new file is added to a namespace in this datapack
            </summary>
            <param name="listener">The method to call</param>
        </member>
        <member name="M:SharpCraft.BaseDatapack.Dispose">
            <summary>
            Disposes the namespaces inside this pack
            </summary>
        </member>
        <member name="M:SharpCraft.BaseDatapack.AfterDispose">
            <summary>
            Extra things to do after dispose is ran
            </summary>
        </member>
        <member name="T:SharpCraft.BaseFile">
            <summary>
            The base class used for files in a datapack
            </summary>
        </member>
        <member name="T:SharpCraft.BaseFile.FileListener">
            <summary>
            Used for running things on new files and soon to be disposed files
            </summary>
            <param name="file">the file</param>
        </member>
        <member name="T:SharpCraft.BaseFile.WriteSetting">
            <summary>
            Settings for accessing this file
            </summary>
        </member>
        <member name="F:SharpCraft.BaseFile.WriteSetting.Auto">
            <summary>
            Writes the file automatically as the file gets new things to write. It's not possible to change things already written to the file.
            </summary>
        </member>
        <member name="F:SharpCraft.BaseFile.WriteSetting.OnDispose">
            <summary>
            Writes the file when gets disposed. Changes can be made to the file since is it's first get written when it isn't in use.
            </summary>
        </member>
        <member name="F:SharpCraft.BaseFile.WriteSetting.LockedAuto">
            <summary>
            Writes the file automatically as the file gets new things to write. It's not possible to change things already written to the file. The namespace the file is in will cast an exception if another source tries to access a file at the same location as this file.
            </summary>
        </member>
        <member name="F:SharpCraft.BaseFile.WriteSetting.LockedOnDispose">
            <summary>
            Writes the file when gets disposed. Changes can be made to the file since is it's first get written when it isn't in use. The namespace the file is in will cast an exception if another source tries to access a file at the same location as this file.
            </summary>
        </member>
        <member name="F:SharpCraft.BaseFile.disposeListener">
            <summary>
            Listeners to call when the file gets disposed
            </summary>
        </member>
        <member name="M:SharpCraft.BaseFile.#ctor(SharpCraft.BasePackNamespace,System.String,SharpCraft.BaseFile.WriteSetting,System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.BaseFile"/> with the given values
            </summary>
            <param name="packNamespace">The namespace this file is for</param>
            <param name="fileName">The name of the file</param>
            <param name="writeSetting">The setting for the file</param>
            <param name="fileType">The type of file</param>
        </member>
        <member name="M:SharpCraft.BaseFile.FinishedConstructing">
            <summary>
            Call when constructors are done
            </summary>
        </member>
        <member name="P:SharpCraft.BaseFile.PackNamespace">
            <summary>
            The namespace this file is for
            </summary>
        </member>
        <member name="P:SharpCraft.BaseFile.FileId">
            <summary>
            The name of this file
            </summary>
        </member>
        <member name="P:SharpCraft.BaseFile.WritePath">
            <summary>
            The place the file will be written to
            </summary>
        </member>
        <member name="P:SharpCraft.BaseFile.FileType">
            <summary>
            The type of file
            </summary>
        </member>
        <member name="P:SharpCraft.BaseFile.Setting">
            <summary>
            The setting used for this file
            </summary>
        </member>
        <member name="M:SharpCraft.BaseFile.IsAuto">
            <summary>
            Returns true if <see cref="P:SharpCraft.BaseFile.Setting"/> is either <see cref="F:SharpCraft.BaseFile.WriteSetting.Auto"/> or <see cref="F:SharpCraft.BaseFile.WriteSetting.LockedAuto"/>
            </summary>
            <returns>True if the file setting is auto</returns>
        </member>
        <member name="P:SharpCraft.BaseFile.Disposed">
            <summary>
            If the file has been disposed
            </summary>
        </member>
        <member name="P:SharpCraft.BaseFile.StreamWriter">
            <summary>
            The stream writer used for writing the file. Is null if the writeSetting isn't Auto. Might be null if it is auto
            </summary>
        </member>
        <member name="P:SharpCraft.BaseFile.FileIsWritten">
            <summary>
            States if the file has been written and shouldn't be able to be written again.
            </summary>
        </member>
        <member name="M:SharpCraft.BaseFile.ValidateFileName(System.String)">
            <summary>
            Validates the given file name
            </summary>
            <param name="name">The name for the file</param>
            <returns>True if the name is valid</returns>
        </member>
        <member name="M:SharpCraft.BaseFile.GetNamespacedName">
            <summary>
            Returns the namespaced name of this file
            </summary>
            <returns>The namespaced name of this file</returns>
        </member>
        <member name="M:SharpCraft.BaseFile.GetStream">
            <summary>
            Returns the stream this file is going to use for writing it's file
            </summary>
            <returns>The stream for this file</returns>
        </member>
        <member name="M:SharpCraft.BaseFile.Dispose">
            <summary>
            Disposes this file. If the write setting is OnDispose it will write the file
            </summary>
        </member>
        <member name="M:SharpCraft.BaseFile.AfterDispose">
            <summary>
            Extra things to do after dispose was ran. (Clear the file for none needed things)
            </summary>
        </member>
        <member name="M:SharpCraft.BaseFile.WriteFile(System.IO.TextWriter)">
            <summary>
            Writes the file
            </summary>
            <param name="stream">The stream used for writing the file</param>
        </member>
        <member name="M:SharpCraft.BaseFile.Finalize">
            <summary>
            Finalizer which makes sure dispose was ran
            </summary>
        </member>
        <member name="M:SharpCraft.BaseFile.CanDoChanges">
            <summary>
            Checks if this file can be changed
            </summary>
            <returns>True if it can be changed</returns>
        </member>
        <member name="M:SharpCraft.BaseFile.AddDisposeListener(SharpCraft.BaseFile.FileListener)">
            <summary>
            Adds a listener to this file which will be called right before the file is disposed
            </summary>
            <param name="listener">The listener to add</param>
        </member>
        <member name="M:SharpCraft.BaseFile.ThrowExceptionOnInvalidChange">
            <summary>
            Throws an exception if the file isn't allowed to be changed
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpCraft.BaseFile.CreateDirectory(System.String)">
            <summary>
            Creates the directory for the given file
            </summary>
            <param name="folderPath">The base folder the file should be in</param>
        </member>
        <member name="T:SharpCraft.BasePackNamespace">
            <summary>
            base class for pack namespaces
            </summary>
        </member>
        <member name="F:SharpCraft.BasePackNamespace.Settings">
            <summary>
            List of settings namespaces can have
            </summary>
        </member>
        <member name="F:SharpCraft.BasePackNamespace.files">
            <summary>
            The files inside this namespace
            </summary>
        </member>
        <member name="F:SharpCraft.BasePackNamespace.settings">
            <summary>
            The settings for this namespace
            </summary>
        </member>
        <member name="M:SharpCraft.BasePackNamespace.#ctor">
            <summary>
            Intializes a new namespace. Make sure to call <see cref="M:SharpCraft.BasePackNamespace.Setup(SharpCraft.BaseDatapack,System.String)"/> after using this
            </summary>
        </member>
        <member name="M:SharpCraft.BasePackNamespace.#ctor(SharpCraft.BaseDatapack,System.String)">
            <summary>
            Creates a new namespace in a datapack
            </summary>
            <param name="datapack">The datapack to add the namespace to</param>
            <param name="namespaceName">the name of the namespace</param>
        </member>
        <member name="M:SharpCraft.BasePackNamespace.Setup(SharpCraft.BaseDatapack,System.String)">
            <summary>
            Sets up the namespace
            </summary>
            <param name="datapack">The datapack to add the namespace to</param>
            <param name="namespaceName">the name of the namespace</param>
        </member>
        <member name="P:SharpCraft.BasePackNamespace.IsSetup">
            <summary>
            Returns true if Setup has been run
            </summary>
            <returns>true if Setup has been run</returns>
        </member>
        <member name="P:SharpCraft.BasePackNamespace.Name">
            <summary>
            The name of this namespace
            </summary>
        </member>
        <member name="P:SharpCraft.BasePackNamespace.Disposed">
            <summary>
            If the namespace has been disposed
            </summary>
        </member>
        <member name="P:SharpCraft.BasePackNamespace.Datapack">
            <summary>
            The datapack this namespace is a part of
            </summary>
        </member>
        <member name="M:SharpCraft.BasePackNamespace.GetPath">
            <summary>
            Returns the path to this namespace
            </summary>
            <returns>The path to this namespace</returns>
        </member>
        <member name="M:SharpCraft.BasePackNamespace.GetFile(System.String,System.String)">
            <summary>
            Returns the file with the name and of the type. If it doesn't exist it returns null
            </summary>
            <param name="fileType">The type of file to get</param>
            <param name="fileName">The name of the file</param>
            <returns>The file with the name or null</returns>
        </member>
        <member name="M:SharpCraft.BasePackNamespace.IsSettingSet(SharpCraft.INamespaceSetting)">
            <summary>
            returns true if the given setting is on in this namespace
            </summary>
            <param name="setting">The setting to test for</param>
            <returns>True if the setting is on</returns>
        </member>
        <member name="M:SharpCraft.BasePackNamespace.AddFile(SharpCraft.BaseFile)">
            <summary>
            Adds the given file to this namespace
            </summary>
            <param name="file">The file to add</param>
        </member>
        <member name="M:SharpCraft.BasePackNamespace.Dispose">
            <summary>
            Disposes all the files in this namespace
            </summary>
        </member>
        <member name="M:SharpCraft.BasePackNamespace.AddNewFileListener(SharpCraft.BaseFile.FileListener)">
            <summary>
            Calls the given method when a new file is added to this namespace
            </summary>
            <param name="listener">The method to call</param>
        </member>
        <member name="M:SharpCraft.BasePackNamespace.AfterDispose">
            <summary>
            Extra things to do after dispose is ran
            </summary>
        </member>
        <member name="M:SharpCraft.BasePackNamespace.GetID(System.Object)">
            <summary>
            Generates a random id for the given <see cref="T:System.Object"/>
            </summary>
            <param name="getIdFor">The object to id</param>
            <returns>The id for the object</returns>
        </member>
        <member name="T:SharpCraft.Conditions.AllCondition">
            <summary>
            Condition which returns true if all of the given conditions are true
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.AllCondition.#ctor(SharpCraft.Conditions.BaseCondition[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.AlternativeCondition"/>
            </summary>
            <param name="conditions">The conditions to check if true</param>
        </member>
        <member name="P:SharpCraft.Conditions.AllCondition.Conditions">
            <summary>
            The conditions to check if true
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.AllCondition.GetDataTree">
            <summary>
            Returns a tree structure containing all the data tags for this object
            </summary>
            <returns>the bottom of the tree</returns>
        </member>
        <member name="T:SharpCraft.Conditions.AlternativeCondition">
            <summary>
            Condition which returns true if any of the given conditions are true
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.AlternativeCondition.#ctor(SharpCraft.Conditions.BaseCondition[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.AlternativeCondition"/>
            </summary>
            <param name="conditions">The conditions to check if true</param>
        </member>
        <member name="P:SharpCraft.Conditions.AlternativeCondition.Conditions">
            <summary>
            The conditions to check if true
            </summary>
        </member>
        <member name="T:SharpCraft.Conditions.BaseCondition">
            <summary>
            Base class for conditions
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.BaseCondition.#ctor(System.String)">
            <summary>
            Intlaizes a new <see cref="T:SharpCraft.Conditions.BaseCondition"/>
            </summary>
            <param name="conditionName">The name of the condition</param>
        </member>
        <member name="P:SharpCraft.Conditions.BaseCondition.ConditionName">
            <summary>
            The name of the condition
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.BaseCondition.op_LogicalNot(SharpCraft.Conditions.BaseCondition)">
            <summary>
            Inverts the given condition
            </summary>
            <param name="condition">The condition to invert</param>
            <returns>The condition to invert</returns>
        </member>
        <member name="M:SharpCraft.Conditions.BaseCondition.op_BitwiseAnd(SharpCraft.Conditions.BaseCondition,SharpCraft.Conditions.BaseCondition)">
            <summary>
            Returns an <see cref="T:SharpCraft.Conditions.AllCondition"/> which is true if the given conditions are true
            </summary>
            <param name="condition1">one of the conditions to check if true</param>
            <param name="condition2">one of the conditions to check if true</param>
            <returns>A condition which is true if the given conditions are true</returns>
        </member>
        <member name="M:SharpCraft.Conditions.BaseCondition.op_BitwiseOr(SharpCraft.Conditions.BaseCondition,SharpCraft.Conditions.BaseCondition)">
            <summary>
            Returns an <see cref="T:SharpCraft.Conditions.AlternativeCondition"/> which is true if one of the given conditions are true
            </summary>
            <param name="condition1">one of the conditions to check if true</param>
            <param name="condition2">one of the conditions to check if true</param>
            <returns>A condition which is true if one of the given conditions are true</returns>
        </member>
        <member name="M:SharpCraft.Conditions.BaseCondition.op_Implicit(SharpCraft.Conditions.BaseCondition)~SharpCraft.Conditions.BaseCondition[]">
            <summary>
            Converts a single condition into an array
            </summary>
            <param name="condition">The condition to convert</param>
        </member>
        <member name="T:SharpCraft.Conditions.BlockStateCondition">
            <summary>
            Condition which returns true if the block is of the given type and has the properties
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.BlockStateCondition.#ctor(SharpCraft.Block)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.BlockStateCondition"/>
            </summary>
            <param name="block">The block to search for</param>
        </member>
        <member name="P:SharpCraft.Conditions.BlockStateCondition.Block">
            <summary>
            The block to search for.
            Note: block data is not supported.
            </summary>
        </member>
        <member name="T:SharpCraft.Conditions.DamageSourceCondition">
            <summary>
            Condition which returns true if the entity data is correct
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.DamageSourceCondition.#ctor(SharpCraft.JsonObjects.Damage)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.DamageSourceCondition"/>
            </summary>
            <param name="damage">The type of damage</param>
        </member>
        <member name="P:SharpCraft.Conditions.DamageSourceCondition.Damage">
            <summary>
            The type of damage
            </summary>
        </member>
        <member name="T:SharpCraft.Conditions.EnchantChanceCondition">
            <summary>
            Condition which returns true randomly based on enchant level
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.EnchantChanceCondition.#ctor(SharpCraft.ID.Enchant,System.Double[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.EnchantChanceCondition"/>
            </summary>
            <param name="chances">The enchant to check for</param>
            <param name="enchant">The chance for each level of the enchantment</param>
        </member>
        <member name="P:SharpCraft.Conditions.EnchantChanceCondition.Enchant">
            <summary>
            The enchant to check for
            </summary>
        </member>
        <member name="P:SharpCraft.Conditions.EnchantChanceCondition.Chances">
            <summary>
            The chance for each level of the enchantment (number from 0 to 1 where 1 = drops 100%)
            </summary>
        </member>
        <member name="T:SharpCraft.Conditions.EnchantmentCondition">
            <summary>
            Condition which returns true if the item has the given enchants
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.EnchantmentCondition.#ctor(SharpCraft.JsonObjects.Item.Enchantment[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.EnchantmentCondition"/>
            </summary>
        </member>
        <member name="P:SharpCraft.Conditions.EnchantmentCondition.Enchantments">
            <summary>
            the enchants to test for
            </summary>
        </member>
        <member name="T:SharpCraft.Conditions.EntityCondition">
            <summary>
            Condition which returns true if the damage is of a given type
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.EntityCondition.#ctor(SharpCraft.ID.LootTarget,SharpCraft.JsonObjects.Entity)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.EntityCondition"/>
            </summary>
            <param name="data">The entity data to check for</param>
            <param name="target">The entity to check for data on</param>
        </member>
        <member name="P:SharpCraft.Conditions.EntityCondition.Data">
            <summary>
            The entity data to check for
            </summary>
        </member>
        <member name="P:SharpCraft.Conditions.EntityCondition.Target">
            <summary>
            The entity to check for data on
            </summary>
        </member>
        <member name="T:SharpCraft.Conditions.EntityScoresCondition">
            <summary>
            Condition which returns true if the entity has the scores
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.EntityScoresCondition.#ctor(SharpCraft.ID.LootTarget,SharpCraft.Conditions.EntityScoresCondition.Scores)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.EntityScoresCondition"/>
            </summary>
            <param name="checkScores">The scores to check for</param>
            <param name="entity">The entity to check the scores for</param>
        </member>
        <member name="P:SharpCraft.Conditions.EntityScoresCondition.Entity">
            <summary>
            The entity to check the scores for
            </summary>
        </member>
        <member name="P:SharpCraft.Conditions.EntityScoresCondition.CheckScores">
            <summary>
            The scores to check for
            </summary>
        </member>
        <member name="T:SharpCraft.Conditions.EntityScoresCondition.Scores">
            <summary>
            Class for defining scores an entity has to have
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.EntityScoresCondition.Scores.#ctor(System.Collections.Generic.List{SharpCraft.Conditions.EntityScoresCondition.Scores.Score})">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.EntityScoresCondition.Scores"/> object
            </summary>
            <param name="scores">The scores the entity has to have</param>
        </member>
        <member name="M:SharpCraft.Conditions.EntityScoresCondition.Scores.#ctor(SharpCraft.Conditions.EntityScoresCondition.Scores.Score)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.EntityScoresCondition.Scores"/> object
            </summary>
            <param name="score">The score the entity has to have</param>
        </member>
        <member name="P:SharpCraft.Conditions.EntityScoresCondition.Scores.CheckScores">
            <summary>
            The scores the entity has to have
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.EntityScoresCondition.Scores.GetAsDataObject(System.Object[])">
            <summary>
            Converts this object into a <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
            <param name="conversionData">Not in use</param>
            <returns>This object as a <see cref="T:SharpCraft.Data.DataPartObject"/></returns>
        </member>
        <member name="T:SharpCraft.Conditions.EntityScoresCondition.Scores.Score">
            <summary>
            Class for defining a score an entity has to have
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.EntityScoresCondition.Scores.Score.#ctor(SharpCraft.Objective,SharpCraft.MCRange)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.EntityScoresCondition.Scores.Score"/>
            </summary>
            <param name="scoreObject">The objective to get the score from</param>
            <param name="range">The range the score has to be inside</param>
        </member>
        <member name="P:SharpCraft.Conditions.EntityScoresCondition.Scores.Score.ScoreObject">
            <summary>
            The objective to get the score from
            </summary>
        </member>
        <member name="P:SharpCraft.Conditions.EntityScoresCondition.Scores.Score.Range">
            <summary>
            The range the score has to be inside
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.EntityScoresCondition.Scores.op_Implicit(SharpCraft.Conditions.EntityScoresCondition.Scores.Score)~SharpCraft.Conditions.EntityScoresCondition.Scores">
            <summary>
            Converts a single score into a list of scores
            </summary>
            <param name="score">The score to convert</param>
        </member>
        <member name="T:SharpCraft.Conditions.InvertedCondition">
            <summary>
            Condition which returns true if the given condition returns false
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.InvertedCondition.#ctor(SharpCraft.Conditions.BaseCondition)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.InvertedCondition"/>
            </summary>
            <param name="condition">The condition to invert</param>
        </member>
        <member name="P:SharpCraft.Conditions.InvertedCondition.Condition">
            <summary>
            The condition to invert
            </summary>
        </member>
        <member name="T:SharpCraft.Conditions.KilledByPlayerCondition">
            <summary>
            Condition which checks if an entity was killed by a player
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.KilledByPlayerCondition.#ctor(System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.KilledByPlayerCondition"/>
            </summary>
            <param name="ifTrue">True if the entity has to have been killed by a player. False it shouldn't have been by a player</param>
        </member>
        <member name="P:SharpCraft.Conditions.KilledByPlayerCondition.IfTrue">
            <summary>
            True if the entity has to have been killed by a player. False it shouldn't have been by a player
            </summary>
        </member>
        <member name="T:SharpCraft.Conditions.LocationCondition">
            <summary>
            Condition which returns true if the location is correct
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.LocationCondition.#ctor(SharpCraft.JsonObjects.Location,SharpCraft.IntVector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.LocationCondition"/>
            </summary>
            <param name="location">The location to test for</param>
            <param name="offset">Offset to check at</param>
        </member>
        <member name="P:SharpCraft.Conditions.LocationCondition.Location">
            <summary>
            The location to test for
            </summary>
        </member>
        <member name="P:SharpCraft.Conditions.LocationCondition.Offset">
            <summary>
            Offset to check at
            </summary>
        </member>
        <member name="T:SharpCraft.Conditions.PredicateCondition">
            <summary>
            Condition which returns true if the given predicate returns true
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.PredicateCondition.#ctor(SharpCraft.IPredicate)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.PredicateCondition"/>
            </summary>
            <param name="predicate">The predicate to check</param>
        </member>
        <member name="P:SharpCraft.Conditions.PredicateCondition.Predicate">
            <summary>
            The predicate to check
            </summary>
        </member>
        <member name="T:SharpCraft.Conditions.RandomCondition">
            <summary>
            Condition which returns true randomly
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.RandomCondition.#ctor(System.Double)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.RandomCondition"/>
            </summary>
            <param name="chance">The chance for it to return true (0-1)</param>
        </member>
        <member name="P:SharpCraft.Conditions.RandomCondition.Chance">
            <summary>
            The chance for it to return true (0-1)
            </summary>
        </member>
        <member name="T:SharpCraft.Conditions.RandomLootCondition">
            <summary>
            Condition which returns true randomly based on looting level. Checks if a random number from 0-1 is less than the number
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.RandomLootCondition.#ctor(System.Double,System.Double)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.RandomLootCondition"/>
            </summary>
            <param name="baseChance">The base chance</param>
            <param name="lootingChance">Extra chance per looting level</param>
        </member>
        <member name="P:SharpCraft.Conditions.RandomLootCondition.BaseChance">
            <summary>
            The base chance
            </summary>
        </member>
        <member name="P:SharpCraft.Conditions.RandomLootCondition.LootingChance">
            <summary>
            Extra chance per looting level
            </summary>
        </member>
        <member name="T:SharpCraft.Conditions.SurvivesExplosionCondition">
            <summary>
            Condition which returns true if the block would survive the explosion (1/explosion radius chance for the block to survive)
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.SurvivesExplosionCondition.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.SurvivesExplosionCondition"/>
            </summary>
        </member>
        <member name="T:SharpCraft.Conditions.TimeCondition">
            <summary>
            Condition which returns true if the time is at the given time
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.TimeCondition.#ctor(SharpCraft.MCRange,System.Nullable{System.Int32})">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.TimeCondition"/>
            </summary>
            <param name="modulo">the value of time to check for</param>
            <param name="time">The number to modulo the real time with</param>
        </member>
        <member name="P:SharpCraft.Conditions.TimeCondition.Time">
            <summary>
            the value of time to check for
            </summary>
        </member>
        <member name="P:SharpCraft.Conditions.TimeCondition.Modulo">
            <summary>
            The number to modulo the real time with
            </summary>
        </member>
        <member name="T:SharpCraft.Conditions.ToolCondition">
            <summary>
            Condition which returns true if the item is correct
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.ToolCondition.#ctor(SharpCraft.JsonObjects.Item)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.ToolCondition"/>
            </summary>
            <param name="item">The item to test for</param>
        </member>
        <member name="P:SharpCraft.Conditions.ToolCondition.Item">
            <summary>
            The location to test for
            </summary>
        </member>
        <member name="T:SharpCraft.Conditions.WeatherCondition">
            <summary>
            Condition which returns true if the item has the given enchants
            </summary>
        </member>
        <member name="M:SharpCraft.Conditions.WeatherCondition.#ctor(System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Conditions.WeatherCondition"/>
            </summary>
        </member>
        <member name="P:SharpCraft.Conditions.WeatherCondition.Raining">
            <summary>
            If its raining
            </summary>
        </member>
        <member name="P:SharpCraft.Conditions.WeatherCondition.Thundering">
            <summary>
            If its thundering
            </summary>
        </member>
        <member name="T:SharpCraft.JsonObjects.Damage">
            <summary>
            a <see cref="T:System.Object"/> defining damage
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Damage.Dealt">
            <summary>
            The amount of damage actually dealt
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Damage.Taken">
            <summary>
            The amount of damage taken
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Damage.Blocked">
            <summary>
            if the damage was blocked or not
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Damage.Type">
            <summary>
            the type of damage
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Damage.SourceEntity">
            <summary>
            the damage source entity
            </summary>
        </member>
        <member name="T:SharpCraft.JsonObjects.DamageFlags">
            <summary>
            a <see cref="T:System.Object"/> defining damage flags
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.DamageFlags.ByPassArmor">
            <summary>
            if the damage by-passes armor or not
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.DamageFlags.Unblockable">
            <summary>
            if the damage can be blocked or not
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.DamageFlags.Starvation">
            <summary>
            if the damage is starvation damage or not
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.DamageFlags.Explosion">
            <summary>
            if the damage is explosion damage or not
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.DamageFlags.Fire">
            <summary>
            if the damage if fire damage or not
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.DamageFlags.Magic">
            <summary>
            if the damage is magic damage or not
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.DamageFlags.Projectile">
            <summary>
            if its a projectile or not
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.DamageFlags.Lightning">
            <summary>
            if its lightning or not
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.DamageFlags.DamagingEntity">
            <summary>
            the <see cref="T:SharpCraft.JsonObjects.Entity"/> doing damage
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.DamageFlags.SourceEntity">
            <summary>
            the <see cref="T:SharpCraft.JsonObjects.Entity"/> which made the damage happen
            </summary>
        </member>
        <member name="T:SharpCraft.JsonObjects.Distance">
            <summary>
            A <see cref="T:System.Object"/> defining a distance
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Distance.Absolute">
            <summary>
            The total distance between two things
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Distance.Horizontal">
            <summary>
            the total horizontal distance between two things
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Distance.X">
            <summary>
            the x amount of distance between two things
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Distance.Y">
            <summary>
            the y amount of distance between two things
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Distance.Z">
            <summary>
            the z amount of distance between two things
            </summary>
        </member>
        <member name="T:SharpCraft.JsonObjects.Effects">
            <summary>
            a <see cref="T:System.Object"/> defining an effect
            </summary>
        </member>
        <member name="M:SharpCraft.JsonObjects.Effects.#ctor(SharpCraft.JsonObjects.Effects.EffectArray)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonObjects.Effects"/> object
            </summary>
            <param name="array">An array of effects to check for</param>
        </member>
        <member name="M:SharpCraft.JsonObjects.Effects.#ctor(System.Collections.Generic.List{SharpCraft.JsonObjects.Effects.Effect})">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonObjects.Effects"/> object
            </summary>
            <param name="effects">a list of effects to check for</param>
        </member>
        <member name="M:SharpCraft.JsonObjects.Effects.#ctor(SharpCraft.JsonObjects.Effects.Effect)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonObjects.Effects"/> object
            </summary>
            <param name="effect">a single effect to check for</param>
        </member>
        <member name="P:SharpCraft.JsonObjects.Effects.CheckEffects">
            <summary>
            A list of effects to check for
            </summary>
        </member>
        <member name="T:SharpCraft.JsonObjects.Effects.EffectArray">
            <summary>
            A list of effects
            </summary>
        </member>
        <member name="M:SharpCraft.JsonObjects.Effects.EffectArray.#ctor(System.Collections.Generic.List{SharpCraft.JsonObjects.Effects.Effect})">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonObjects.Effects.EffectArray"/>
            </summary>
            <param name="effects">The effects in the array</param>
        </member>
        <member name="M:SharpCraft.JsonObjects.Effects.EffectArray.#ctor(SharpCraft.JsonObjects.Effects.Effect)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonObjects.Effects.EffectArray"/>
            </summary>
            <param name="effect">The effect in the array</param>
        </member>
        <member name="P:SharpCraft.JsonObjects.Effects.EffectArray.Effects">
            <summary>
            The effects in the array
            </summary>
        </member>
        <member name="M:SharpCraft.JsonObjects.Effects.EffectArray.GetAsDataObject(System.Object[])">
            <summary>
            Converts this object into a <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
            <param name="conversionData">Not in use</param>
            <returns>This object as a <see cref="T:SharpCraft.Data.DataPartObject"/></returns>
        </member>
        <member name="T:SharpCraft.JsonObjects.Effects.Effect">
            <summary>
            A single effect
            </summary>
        </member>
        <member name="M:SharpCraft.JsonObjects.Effects.Effect.#ctor(SharpCraft.ID.Effect)">
            <summary>
            creates a new <see cref="T:SharpCraft.JsonObjects.Effects.Effect"/>
            </summary>
            <param name="Effect">the effect</param>
        </member>
        <member name="P:SharpCraft.JsonObjects.Effects.Effect.EffectName">
            <summary>
            The effect
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Effects.Effect.Amplifier">
            <summary>
            the <see cref="T:SharpCraft.JsonObjects.Effects.Effect"/>'s amplifer
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Effects.Effect.Duration">
            <summary>
            the <see cref="T:SharpCraft.JsonObjects.Effects.Effect"/>'s duration
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Effects.Effect.Ambient">
            <summary>
            if the <see cref="T:SharpCraft.JsonObjects.Effects.Effect"/> is ambient or not
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Effects.Effect.Visible">
            <summary>
            if the <see cref="T:SharpCraft.JsonObjects.Effects.Effect"/>'s particles are visible or not
            </summary>
        </member>
        <member name="M:SharpCraft.JsonObjects.Effects.op_Implicit(SharpCraft.JsonObjects.Effects.Effect)~SharpCraft.JsonObjects.Effects">
            <summary>
            Converts a single <see cref="T:SharpCraft.JsonObjects.Effects.Effect"/> object into an <see cref="T:SharpCraft.JsonObjects.Effects"/> object
            </summary>
            <param name="effect">The <see cref="T:SharpCraft.JsonObjects.Effects.Effect"/> to convert</param>
        </member>
        <member name="M:SharpCraft.JsonObjects.Effects.op_Implicit(System.Collections.Generic.List{SharpCraft.JsonObjects.Effects.Effect})~SharpCraft.JsonObjects.Effects">
            <summary>
            Converts a list of <see cref="T:SharpCraft.JsonObjects.Effects.Effect"/> objects into an <see cref="T:SharpCraft.JsonObjects.Effects"/> object
            </summary>
            <param name="effects">The <see cref="T:SharpCraft.JsonObjects.Effects.Effect"/> to convert</param>
        </member>
        <member name="T:SharpCraft.JsonObjects.Entity">
            <summary>
            a <see cref="T:System.Object"/> defining an <see cref="T:SharpCraft.Entity"/>
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Entity.Type">
            <summary>
            The <see cref="T:SharpCraft.Entity"/> type
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Entity.Distance">
            <summary>
            the <see cref="P:SharpCraft.JsonObjects.Entity.Distance"/> to the <see cref="T:SharpCraft.Entity"/>
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Entity.Location">
            <summary>
            the <see cref="P:SharpCraft.JsonObjects.Entity.Location"/> of the <see cref="T:SharpCraft.Entity"/>
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Entity.Effects">
            <summary>
            the <see cref="T:SharpCraft.JsonObjects.Effects"/>s the <see cref="T:SharpCraft.Entity"/> should have
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Entity.NBT">
            <summary>
            the nbt the <see cref="T:SharpCraft.Entity"/> should have
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Entity.Levels">
            <summary>
            the amount of levels the player has
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Entity.Gamemode">
            <summary>
            The gamemode the player is in
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Entity.Recipes">
            <summary>
            Player recipes to check for
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Entity.Advancements">
            <summary>
            Player advancements to check for
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Entity.Team">
            <summary>
            The entity's team
            </summary>
        </member>
        <member name="T:SharpCraft.JsonObjects.Entity.RecipeList">
            <summary>
            A list of <see cref="T:SharpCraft.JsonObjects.Entity.RecipeList.CheckRecipe"/>
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Entity.RecipeList.Recipes">
            <summary>
            The recipes
            </summary>
        </member>
        <member name="M:SharpCraft.JsonObjects.Entity.RecipeList.GetAsDataObject(System.Object[])">
            <summary>
            Converts this object into a <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
            <param name="conversionData">Unused</param>
            <returns>This object as a <see cref="T:SharpCraft.Data.DataPartObject"/></returns>
        </member>
        <member name="T:SharpCraft.JsonObjects.Entity.RecipeList.CheckRecipe">
            <summary>
            A recipe to check for
            </summary>
        </member>
        <member name="M:SharpCraft.JsonObjects.Entity.RecipeList.CheckRecipe.#ctor(SharpCraft.IRecipe,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonObjects.Entity.RecipeList.CheckRecipe"/>
            </summary>
            <param name="recipe">The recipe to check for</param>
            <param name="isUnlocked">True if the recipe should be unlocked</param>
        </member>
        <member name="P:SharpCraft.JsonObjects.Entity.RecipeList.CheckRecipe.Recipe">
            <summary>
            The recipe to check for
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Entity.RecipeList.CheckRecipe.IsUnlocked">
            <summary>
            True if the recipe should be unlocked
            </summary>
        </member>
        <member name="T:SharpCraft.JsonObjects.Entity.AdvancementList">
            <summary>
            A list of <see cref="T:SharpCraft.JsonObjects.Entity.AdvancementList.BaseCheckAdvancement"/>
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Entity.AdvancementList.Advancements">
            <summary>
            The advancements
            </summary>
        </member>
        <member name="M:SharpCraft.JsonObjects.Entity.AdvancementList.GetAsDataObject(System.Object[])">
            <summary>
            Converts this object into a <see cref="T:SharpCraft.Data.DataPartObject"/>
            </summary>
            <param name="conversionData">Unused</param>
            <returns>This object as a <see cref="T:SharpCraft.Data.DataPartObject"/></returns>
        </member>
        <member name="T:SharpCraft.JsonObjects.Entity.AdvancementList.BaseCheckAdvancement">
            <summary>
            Interface for advancement checks
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Entity.AdvancementList.BaseCheckAdvancement.Advancement">
            <summary>
            The advancement to check for
            </summary>
        </member>
        <member name="M:SharpCraft.JsonObjects.Entity.AdvancementList.BaseCheckAdvancement.GetValue">
            <summary>
            The value to check for
            </summary>
            <returns>The value to check for</returns>
        </member>
        <member name="T:SharpCraft.JsonObjects.Entity.AdvancementList.CheckAdvancementCriteria">
            <summary>
            Checks if the player has the given advancement criteria
            </summary>
        </member>
        <member name="M:SharpCraft.JsonObjects.Entity.AdvancementList.CheckAdvancementCriteria.#ctor(SharpCraft.IAdvancement,SharpCraft.AdvancementObjects.BaseTrigger)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonObjects.Entity.AdvancementList.CheckAdvancementCriteria"/>
            </summary>
            <param name="advancement">The advancement to check for</param>
            <param name="criteria">The criteria to check for</param>
        </member>
        <member name="P:SharpCraft.JsonObjects.Entity.AdvancementList.CheckAdvancementCriteria.Criteria">
            <summary>
            The criteria to check for
            </summary>
        </member>
        <member name="M:SharpCraft.JsonObjects.Entity.AdvancementList.CheckAdvancementCriteria.GetValue">
            <summary>
            The value to check for
            </summary>
            <returns>The value to check for</returns>
        </member>
        <member name="T:SharpCraft.JsonObjects.Entity.AdvancementList.CheckAdvancement">
            <summary>
            Checks if the player has the advancement
            </summary>
        </member>
        <member name="M:SharpCraft.JsonObjects.Entity.AdvancementList.CheckAdvancement.#ctor(SharpCraft.IAdvancement,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.JsonObjects.Entity.AdvancementList.CheckAdvancement"/>
            </summary>
            <param name="advancement">The advancement to check for</param>
            <param name="isCompleted">True if the advancement is completed</param>
        </member>
        <member name="P:SharpCraft.JsonObjects.Entity.AdvancementList.CheckAdvancement.IsCompleted">
            <summary>
            True if the advancement is completed
            </summary>
        </member>
        <member name="M:SharpCraft.JsonObjects.Entity.AdvancementList.CheckAdvancement.GetValue">
            <summary>
            The value to check for
            </summary>
            <returns>The value to check for</returns>
        </member>
        <member name="M:SharpCraft.JsonObjects.Entity.op_Implicit(SharpCraft.EntityType)~SharpCraft.JsonObjects.Entity">
            <summary>
            Implicit converts <see cref="T:SharpCraft.EntityType"/> into an <see cref="T:SharpCraft.JsonObjects.Entity"/> object
            </summary>
            <param name="type">the <see cref="T:SharpCraft.EntityType"/> to convert</param>
        </member>
        <member name="M:SharpCraft.JsonObjects.Entity.op_Implicit(SharpCraft.ID.Entity)~SharpCraft.JsonObjects.Entity">
            <summary>
            Implicit converts <see cref="T:SharpCraft.ID.Entity"/> into an <see cref="T:SharpCraft.JsonObjects.Entity"/> object
            </summary>
            <param name="type">the <see cref="T:SharpCraft.ID.Entity"/> to convert</param>
        </member>
        <member name="M:SharpCraft.JsonObjects.Entity.op_Implicit(SharpCraft.Entity)~SharpCraft.JsonObjects.Entity">
            <summary>
            Converts a <see cref="T:SharpCraft.Entity"/> into an <see cref="T:SharpCraft.JsonObjects.Entity"/> object
            </summary>
            <param name="entity">The <see cref="T:SharpCraft.Entity"/> to convert</param>
        </member>
        <member name="T:SharpCraft.JsonObjects.Item">
            <summary>
            a <see cref="T:System.Object"/> defining an <see cref="T:SharpCraft.Item"/>
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Item.Id">
            <summary>
            the <see cref="T:SharpCraft.Item"/>'s id
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Item.Durability">
            <summary>
            the <see cref="T:SharpCraft.Item"/>'s durability
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Item.Count">
            <summary>
            the <see cref="T:SharpCraft.Item"/>'s count
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Item.Potion">
            <summary>
            the <see cref="T:SharpCraft.Item"/>'s potion
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Item.Enchantments">
            <summary>
            the <see cref="T:SharpCraft.Item"/>'s <see cref="T:SharpCraft.JsonObjects.Item.Enchantment"/>s
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Item.StoredEnchantments">
            <summary>
            the <see cref="T:SharpCraft.Item"/>'s stored <see cref="T:SharpCraft.JsonObjects.Item.Enchantment"/>s
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Item.NBT">
            <summary>
            the <see cref="T:SharpCraft.Item"/>'s nbt data
            </summary>
        </member>
        <member name="T:SharpCraft.JsonObjects.Item.Enchantment">
            <summary>
            a <see cref="T:System.Object"/> defining an enchantment
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Item.Enchantment.Enchant">
            <summary>
            the enchantment id
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Item.Enchantment.Level">
            <summary>
            the level of the enchantment
            </summary>
        </member>
        <member name="M:SharpCraft.JsonObjects.Item.op_Implicit(SharpCraft.ID.Item)~SharpCraft.JsonObjects.Item">
            <summary>
            Converts an item id into a <see cref="T:SharpCraft.JsonObjects.Item"/> object
            </summary>
            <param name="item">the item id to convert</param>
        </member>
        <member name="M:SharpCraft.JsonObjects.Item.op_Implicit(SharpCraft.ItemGroup)~SharpCraft.JsonObjects.Item">
            <summary>
            Converts an item group into a <see cref="T:SharpCraft.JsonObjects.Item"/> object
            </summary>
            <param name="group">the item group to convert</param>
        </member>
        <member name="M:SharpCraft.JsonObjects.Item.op_Implicit(SharpCraft.Item)~SharpCraft.JsonObjects.Item">
            <summary>
            Converts an item into a <see cref="T:SharpCraft.JsonObjects.Item"/> object
            </summary>
            <param name="item">The item to convert</param>
        </member>
        <member name="T:SharpCraft.JsonObjects.Location">
            <summary>
            A <see cref="T:System.Object"/> defining a location
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Location.Biome">
            <summary>
            The biome to detect
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Location.Dimension">
            <summary>
            the dimension to detect
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Location.Structure">
            <summary>
            the structure to detect
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Location.X">
            <summary>
            the x coordinate to detect
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Location.Y">
            <summary>
            the y coordinate to detect
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Location.Z">
            <summary>
            the z coordinate to detect
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Location.Light">
            <summary>
            the light level to check for
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Location.Block">
            <summary>
            The block at the location
            </summary>
        </member>
        <member name="P:SharpCraft.JsonObjects.Location.Liquid">
            <summary>
            The liquid at the location
            </summary>
        </member>
        <member name="M:SharpCraft.JsonObjects.Location.op_Implicit(SharpCraft.ID.Biome)~SharpCraft.JsonObjects.Location">
            <summary>
            Converts a <see cref="T:SharpCraft.ID.Biome"/> into a <see cref="T:SharpCraft.JsonObjects.Location"/>
            </summary>
            <param name="biome">The <see cref="T:SharpCraft.ID.Biome"/> to convert</param>
        </member>
        <member name="M:SharpCraft.JsonObjects.Location.op_Implicit(SharpCraft.ID.Structure)~SharpCraft.JsonObjects.Location">
            <summary>
            Converts a <see cref="T:SharpCraft.ID.Structure"/> into a <see cref="T:SharpCraft.JsonObjects.Location"/>
            </summary>
            <param name="structure">The <see cref="T:SharpCraft.ID.Structure"/> to convert</param>
        </member>
        <member name="M:SharpCraft.JsonObjects.Location.op_Implicit(SharpCraft.ID.Dimension)~SharpCraft.JsonObjects.Location">
            <summary>
            Converts a <see cref="T:SharpCraft.ID.Dimension"/> into a <see cref="T:SharpCraft.JsonObjects.Location"/>
            </summary>
            <param name="dimension">The <see cref="T:SharpCraft.ID.Dimension"/> to convert</param>
        </member>
        <member name="T:SharpCraft.Datapack">
            <summary>
            An <see cref="T:System.Object"/> used to define a datapack
            </summary>
        </member>
        <member name="M:SharpCraft.Datapack.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpCraft.Datapack"/> with the given parameters
            </summary>
            <param name="path">The path to the folder to create this datapack in</param>
            <param name="packName">The datapack's name</param>
            <param name="description">The datapack's description</param>
            <param name="packFormat">The datapack's format</param>
        </member>
        <member name="M:SharpCraft.Datapack.#ctor(System.String,System.String,System.String,System.Int32,SharpCraft.IFileCreator)">
            <summary>
            Creates a new <see cref="T:SharpCraft.Datapack"/> with the given parameters
            </summary>
            <param name="path">The path to the folder to create this datapack in</param>
            <param name="packName">The datapack's name</param>
            <param name="description">The datapack's description</param>
            <param name="packFormat">The datapack's format</param>
            <param name="fileCreator">Class for creating files and directories</param>
        </member>
        <member name="M:SharpCraft.Datapack.#ctor(System.String,System.String,System.String,System.Int32,SharpCraft.IFileCreator,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SharpCraft.Datapack"/> with the given parameters. Inherite from this constructor.
            </summary>
            <param name="path">The path to the folder to create this datapack in</param>
            <param name="packName">The datapack's name</param>
            <param name="description">The datapack's description</param>
            <param name="packFormat">The datapack's format</param>
            <param name="fileCreator">Class for creating files and directories</param>
            <param name="_">Unused parameter used for specifing you want to use this constructor</param>
        </member>
        <member name="P:SharpCraft.Datapack.IngameName">
            <summary>
            The name of the datapack used for refering to the datapack in game
            </summary>
        </member>
        <member name="M:SharpCraft.Datapack.Namespace(System.String)">
            <summary>
            Outputs a <see cref="T:SharpCraft.PackNamespace"/> for this datapack
            </summary>
            <param name="packNamespace">The namespace the namespace has</param>
            <returns>A new <see cref="T:SharpCraft.PackNamespace"/> with the given namespace</returns>
        </member>
        <member name="T:SharpCraft.EmptyDatapack">
            <summary>
            A datapack used for disabling/enabling datapacks.
            </summary>
        </member>
        <member name="M:SharpCraft.EmptyDatapack.GetPack">
            <summary>
            Returns an empty datapack
            </summary>
            <returns>An empty datapack</returns>
        </member>
        <member name="M:SharpCraft.EmptyDatapack.#ctor(System.String,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.EmptyDatapack"/>
            </summary>
            <param name="name">The name of the datapack</param>
            <param name="fileDatapack">True this <see cref="T:SharpCraft.EmptyDatapack"/> is refering to an installed datapack. False if its an inbuilt datapack</param>
        </member>
        <member name="P:SharpCraft.EmptyDatapack.IngameName">
            <summary>
            The name of the datapack used for refering to the datapack in game
            </summary>
        </member>
        <member name="P:SharpCraft.EmptyDatapack.FileDatapack">
            <summary>
            True if this <see cref="T:SharpCraft.EmptyDatapack"/> is refering to an installed datapack. False if its an inbuilt datapack
            </summary>
        </member>
        <member name="M:SharpCraft.EmptyDatapack.Namespace(System.String)">
            <summary>
            Returns a new empty namespace
            </summary>
            <param name="packNamespace">The name of the namespace</param>
            <returns>A new empty namespace</returns>
        </member>
        <member name="T:SharpCraft.IFileCreator">
            <summary>
            Interface for file creators
            </summary>
        </member>
        <member name="M:SharpCraft.IFileCreator.CreateWriter(System.String)">
            <summary>
            Creates a new text writer and returns it
            </summary>
            <param name="path">The path to write at</param>
            <returns>Text writer for writing at the path</returns>
        </member>
        <member name="M:SharpCraft.IFileCreator.CreateDirectory(System.String)">
            <summary>
            Creates a directory with the given path
            </summary>
            <param name="directory">The path of the directory</param>
        </member>
        <member name="M:SharpCraft.IFileCreator.GetWriters">
            <summary>
            Returns a list of all created text writers
            </summary>
            <returns>A list of all created text writers</returns>
        </member>
        <member name="M:SharpCraft.IFileCreator.GetDirectories">
            <summary>
            Returns a list of all the created directories
            </summary>
            <returns>A list of all the created directories</returns>
        </member>
        <member name="T:SharpCraft.FileCreator">
            <summary>
            Class for normal file creation
            </summary>
        </member>
        <member name="M:SharpCraft.FileCreator.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.FileCreator"/>
            </summary>
        </member>
        <member name="M:SharpCraft.FileCreator.CreateWriter(System.String)">
            <summary>
            Creates a new stream writer and returns it
            </summary>
            <param name="path">The path to write at</param>
            <returns>Stream writer for writing at the path</returns>
        </member>
        <member name="M:SharpCraft.FileCreator.CreateDirectory(System.String)">
            <summary>
            Creates a directory with the given path
            </summary>
            <param name="directory">The path of the directory</param>
        </member>
        <member name="M:SharpCraft.FileCreator.GetWriters">
            <summary>
            Returns a list of all created stream writers
            </summary>
            <returns>A list of all created stream writers</returns>
        </member>
        <member name="M:SharpCraft.FileCreator.GetDirectories">
            <summary>
            Returns a list of all the created directories
            </summary>
            <returns>A list of all the created directories</returns>
        </member>
        <member name="T:SharpCraft.NoneFileCreator">
            <summary>
            Class for simulating file creation
            </summary>
        </member>
        <member name="M:SharpCraft.NoneFileCreator.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.NoneFileCreator"/>
            </summary>
        </member>
        <member name="M:SharpCraft.NoneFileCreator.CreateWriter(System.String)">
            <summary>
            Creates a new text writer and returns it
            </summary>
            <param name="path">The path to write at</param>
            <returns>text writer for writing at the path</returns>
        </member>
        <member name="M:SharpCraft.NoneFileCreator.CreateDirectory(System.String)">
            <summary>
            Creates a directory with the given path
            </summary>
            <param name="directory">The path of the directory</param>
        </member>
        <member name="M:SharpCraft.NoneFileCreator.GetWriters">
            <summary>
            Returns a list of all created text writers
            </summary>
            <returns>A list of all created text writers</returns>
        </member>
        <member name="M:SharpCraft.NoneFileCreator.GetDirectories">
            <summary>
            Returns a list of all the created directories
            </summary>
            <returns>A list of all the created directories</returns>
        </member>
        <member name="T:SharpCraft.FunctionWriters.BlockCommands">
            <summary>
            All the block commands
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.BlockCommands.Add(SharpCraft.Vector,SharpCraft.Block,SharpCraft.ID.BlockAdd)">
            <summary>
            Adds a <see cref="T:SharpCraft.Block"/> at the given coords
            </summary>
            <param name="addBlock">the <see cref="T:SharpCraft.Block"/> to add</param>
            <param name="blockCoords">the coords to add it at</param>
            <param name="type">how to place the block</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.BlockCommands.Fill(SharpCraft.Vector,SharpCraft.Vector,SharpCraft.Block,SharpCraft.ID.BlockFill,SharpCraft.Block)">
            <summary>
            Fills in the <see cref="T:SharpCraft.Block"/> between the two corner coords
            </summary>
            <param name="fillBlock">the <see cref="T:SharpCraft.Block"/> to fill with</param>
            <param name="corner1">the first corner coords</param>
            <param name="corner2">the second corner coords</param>
            <param name="type">how to fill the <see cref="T:SharpCraft.Block"/>s</param>
            <param name="replaceBlock">the <see cref="T:SharpCraft.Block"/>s to replace</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.BlockCommands.Clone(SharpCraft.Vector,SharpCraft.Vector,SharpCraft.Vector,SharpCraft.ID.BlockClone,SharpCraft.ID.BlockCloneWay,SharpCraft.Block)">
            <summary>
            Copies the <see cref="T:SharpCraft.Block"/>s between the two corner coords to another coords
            </summary>
            <param name="corner1">the first corner coords</param>
            <param name="corner2">the second corner coords</param>
            <param name="copyTo">the place to copy to</param>
            <param name="type">how to copy the <see cref="T:SharpCraft.Block"/>s</param>
            <param name="way">copy rules</param>
            <param name="filteredBlock">the <see cref="T:SharpCraft.Block"/> to copy</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.BlockCommands.AddItem(SharpCraft.Vector,SharpCraft.Item)">
            <summary>
            Inserts the given <see cref="T:SharpCraft.Item"/> into the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="BlockCoords">The <see cref="T:SharpCraft.Block"/> to insert into</param>
            <param name="AddItem">The <see cref="T:SharpCraft.Item"/> to insert (<see cref="P:SharpCraft.Item.Slot"/> choses the slot)</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.BlockCommands.Loot(SharpCraft.Vector,SharpCraft.ILootTable,System.Nullable{System.Int32})">
            <summary>
            Inserts the given <see cref="T:SharpCraft.ILootTable"/> into the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="block">the <see cref="T:SharpCraft.Block"/> to input into</param>
            <param name="loot">the <see cref="T:SharpCraft.ILootTable"/> to input</param>
            <param name="slot">the slot to insert the <see cref="T:SharpCraft.ILootTable"/> at</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.BlockCommands.Loot(SharpCraft.Vector,SharpCraft.BaseSelector,System.Nullable{System.Int32})">
            <summary>
            Inserts the given <see cref="T:SharpCraft.Entity"/>'s <see cref="T:SharpCraft.LootTable"/> into the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="block">the <see cref="T:SharpCraft.Block"/> to input into</param>
            <param name="kill">the <see cref="T:SharpCraft.Entity"/>'s <see cref="T:SharpCraft.LootTable"/> to input</param>
            <param name="slot">the slot to insert the <see cref="T:SharpCraft.LootTable"/> at</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.BlockCommands.Loot(SharpCraft.Vector,SharpCraft.Vector,SharpCraft.Item,System.Nullable{System.Int32})">
            <summary>
            Inserts the given <see cref="T:SharpCraft.Block"/>'s <see cref="T:SharpCraft.LootTable"/> into the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="block">the <see cref="T:SharpCraft.Block"/> to input into</param>
            <param name="breakBlock">the <see cref="T:SharpCraft.Block"/>'s <see cref="T:SharpCraft.LootTable"/> to input</param>
            <param name="breakWith">the tool used to break the <see cref="T:SharpCraft.Block"/></param>
            <param name="slot">the slot to insert the <see cref="T:SharpCraft.LootTable"/> at</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.BlockCommands.Data">
            <summary>
            The data commands
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.BlockCommands.ClassData">
            <summary>
            The data commands
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.BlockCommands.ClassData.Change(SharpCraft.Vector,SharpCraft.Data.SimpleDataHolder)">
            <summary>
            Adds the given data to the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="data">The data to give to the <see cref="T:SharpCraft.Block"/></param>
            <param name="place">the coords of the <see cref="T:SharpCraft.Block"/> to give the data to</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.BlockCommands.ClassData.Change(SharpCraft.Vector,System.String,SharpCraft.ID.EntityDataModifierType,SharpCraft.Data.SimpleDataHolder)">
            <summary>
            Copies data into the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="toBlock">the coords of the <see cref="T:SharpCraft.Block"/> to copy the data to</param>
            <param name="toDataPath">the datapath to copy to</param>
            <param name="modifierType">The way to data should be copied in</param>
            <param name="copyData">The data to insert</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.BlockCommands.ClassData.Change(SharpCraft.Vector,System.String,System.Int32,SharpCraft.Data.SimpleDataHolder)">
            <summary>
            Copies data into the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="toBlock">the coords of the <see cref="T:SharpCraft.Block"/> to copy the data to</param>
            <param name="toDataPath">the datapath to copy to</param>
            <param name="index">The index to copy the data to</param>
            <param name="copyData">The data to insert</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.BlockCommands.ClassData.Remove(SharpCraft.Vector,System.String)">
            <summary>
            Removes the data from the <see cref="T:SharpCraft.Block"/> at the given datapath
            </summary>
            <param name="dataPath">The datapath</param>
            <param name="place">the coords of the <see cref="T:SharpCraft.Block"/> to remove the data from</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.BlockCommands.ClassData.Get(SharpCraft.Vector,System.String,System.Double)">
            <summary>
            Gets the numeric data from the datapath from the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="place">the coords of the <see cref="T:SharpCraft.Block"/> to get the data from</param>
            <param name="dataPath">the datapath to the data</param>
            <param name="scale">the number to multiply the numeric value with</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.BlockCommands.ClassData.Copy(SharpCraft.Vector,System.String,SharpCraft.ID.EntityDataModifierType,SharpCraft.IDataLocation)">
            <summary>
            Copies data into the block at given location
            </summary>
            <param name="toBlock">the coords of the <see cref="T:SharpCraft.Block"/> to copy the data to</param>
            <param name="toDataPath">the datapath to copy to</param>
            <param name="modifierType">The way to data should be copied in</param>
            <param name="dataLocation">The place to copy the data from</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.BlockCommands.ClassData.Copy(SharpCraft.Vector,System.String,System.Int32,SharpCraft.IDataLocation)">
            <summary>
            Copies data into the block at the given location
            </summary>
            <param name="toBlock">the coords of the <see cref="T:SharpCraft.Block"/> to copy the data to</param>
            <param name="toDataPath">the datapath to copy to</param>
            <param name="index">The index to copy the data to</param>
            <param name="dataLocation">The place to copy the data from</param>
        </member>
        <member name="T:SharpCraft.FunctionWriters.CommandList">
            <summary>
            Base class for command lists
            </summary>
        </member>
        <member name="P:SharpCraft.FunctionWriters.CommandList.ForFunction">
            <summary>
            The function to write onto
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.CommandList.#ctor(SharpCraft.Function)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.FunctionWriters.CommandList"/>
            </summary>
            <param name="function">The function to write onto</param>
        </member>
        <member name="T:SharpCraft.FunctionWriters.CustomCommands">
            <summary>
            All custom commands
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.CustomCommands.TreeSearchCommand">
            <summary>
            Used by binary search. The command to run when the number is found
            </summary>
            <param name="number">The found number</param>
            <returns>The command to run when the number is found</returns>
        </member>
        <member name="T:SharpCraft.FunctionWriters.CustomCommands.TreeSearchMethod">
            <summary>
            Used by binary search. The command used for checking numbers
            </summary>
            <param name="minNumber">The minimum the number can be</param>
            <param name="maxNumber">The maximum the number can be</param>
            <returns>The command used for searching</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.CustomCommands.TreeSearch(SharpCraft.FunctionWriters.CustomCommands.TreeSearchMethod,SharpCraft.FunctionWriters.CustomCommands.TreeSearchCommand,System.Int32,System.Int32,System.Int32)">
            <summary>
            Uses binary search to run a command based on a number. 
            All search function files be placed in a folder with the calling function's name.
            </summary>
            <param name="method">The command used for finding the number</param>
            <param name="command">The command to run when the number has been found</param>
            <param name="minimum">The smallest number to search for</param>
            <param name="maximum">The highest number to search for</param>
            <param name="branches">The amount of branches to check at a time (Low number = fast, but many files. High number = slow, but less files)</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.CustomCommands.SummonExecute(SharpCraft.Entity,System.String,SharpCraft.Function.FunctionWriter,System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Summons a new entity and runs the given commands as the entity
            </summary>
            <param name="entity">The entity to summon</param>
            <param name="functionName">The name of the function it should run</param>
            <param name="runCommands">the commands the entity should run</param>
            <param name="executeAt">True if it should run the commands at the entity's location</param>
            <param name="writeSetting">The setting for writing the function file</param>
            <returns>The function the entity runs</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.CustomCommands.SummonExecute(SharpCraft.Entity,SharpCraft.Vector,System.String,SharpCraft.Function.FunctionWriter,System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Summons a new entity and runs the given commands as the entity
            </summary>
            <param name="entity">The entity to summon</param>
            <param name="functionName">The name of the function it should run (this function is created as a sibling to the function running this)</param>
            <param name="runCommands">the commands the entity should run</param>
            <param name="executeAt">True if it should run the commands at the entity's location</param>
            <param name="spawnCoords">The place to spawn the entity at</param>
            <param name="writeSetting">The setting for writing the function file</param>
            <returns>The function the entity runs</returns>
        </member>
        <member name="T:SharpCraft.FunctionWriters.CustomCommands.ScoreOperation">
            <summary>
            Holds a math operation between two scores
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.CustomCommands.ScoreOperation.#ctor(SharpCraft.ValueParameter,SharpCraft.ID.Operation,SharpCraft.ValueParameter)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.FunctionWriters.CustomCommands.ScoreOperation"/>
            </summary>
            <param name="score1">First score to do math on</param>
            <param name="operation">The math operation to do</param>
            <param name="score2">Second score to do math on</param>
        </member>
        <member name="P:SharpCraft.FunctionWriters.CustomCommands.ScoreOperation.Score1">
            <summary>
            First score to do math on
            </summary>
        </member>
        <member name="P:SharpCraft.FunctionWriters.CustomCommands.ScoreOperation.Score2">
            <summary>
            The math operation to do
            </summary>
        </member>
        <member name="P:SharpCraft.FunctionWriters.CustomCommands.ScoreOperation.Operation">
            <summary>
            Second score to do math on
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.CustomCommands.ScoreOperation.WriteCommands(SharpCraft.Function,SharpCraft.ScoreValue)">
            <summary>
            Writes the commands needed to perform the operation to the given function
            </summary>
            <param name="function">The function to write the commands to</param>
            <param name="endingValue">The <see cref="T:SharpCraft.ScoreValue"/> the result should end up in</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.CustomCommands.SetToScoreOperation(SharpCraft.BaseSelector,SharpCraft.Objective,SharpCraft.ValueParameter)">
            <summary>
            Sets a score value to the value made by a calculation
            </summary>
            <param name="selector">The selector for selecting the score</param>
            <param name="objective">The objective the score to change is in</param>
            <param name="value">The operation calculating the value the score should be set to</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.CustomCommands.GroupCommands(SharpCraft.Function.FunctionWriter,System.Boolean,System.Boolean)">
            <summary>
            If the last command is an unfinished execute command, every given command will be executed with a clone of the execute command. (All the given commands will only run if the execute command runs)
            </summary>
            <param name="writer">Writer for writing the commands</param>
            <param name="useFunction">Use a function instead of multiple execute commands</param>
            <param name="forceExecute">Don't use function no matter what</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.CustomCommands.IfElse(SharpCraft.Commands.BaseExecuteCommand,SharpCraft.Function.FunctionWriter,SharpCraft.Function.FunctionWriter,System.String,System.String)">
            <summary>
            Runs the if commands if the testCommand successfully runs. Runs else if it doesn't
            </summary>
            <param name="testCommand">The command to test</param>
            <param name="ifWriter">The commands to run if the test is successfully</param>
            <param name="elseWriter">The commands to run if the test isn't successfully</param>
            <param name="ifFunctionName">The name of the function for running the if commands</param>
            <param name="elseFunctionName">The name of the function for running the else commands</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.CustomCommands.WhileLoop(SharpCraft.Commands.BaseExecuteCommand,SharpCraft.Function.FunctionWriter,System.String,SharpCraft.Commands.BaseExecuteCommand)">
            <summary>
            Keeps on running the given commands for as long as the test command runs successfully
            </summary>
            <param name="testCommand">The command which has to run successfully for the loop to continue</param>
            <param name="loopWriter">The commands the loop should run</param>
            <param name="loopName">The name of the loop file</param>
            <param name="nextExecute">Runs the next loop cycle with the given execute command. Leave null for no commands</param>
        </member>
        <member name="T:SharpCraft.FunctionWriters.CustomCommands.ForLoopDelegate">
            <summary>
            Delegate for making for loops
            </summary>
            <param name="writeTo">The function to write the loop commands to</param>
            <param name="loopValue">The loop's value</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.CustomCommands.ForLoop(SharpCraft.ValueParameter,SharpCraft.ValueParameter,System.String,SharpCraft.FunctionWriters.CustomCommands.ForLoopDelegate,System.Boolean,SharpCraft.Commands.BaseExecuteCommand,System.Boolean)">
            <summary>
            Loops through every value from "from" to and with "to"
            </summary>
            <param name="from">The start value</param>
            <param name="to">The ending value</param>
            <param name="loopName">The name of the loop (used for function name and score name)</param>
            <param name="writer">Writer for writing commands to loop over</param>
            <param name="positive">If the loop is going from a small number to a high number. False if it's going from high to small</param>
            <param name="nextExecute">Runs the next loop cycle with the given execute command. Leave null for no commands</param>
            <param name="stopAtTo">If the loop should stop before running with the "to" number</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.CustomCommands.RayCast(System.String,SharpCraft.Block,SharpCraft.Block,System.Int32,SharpCraft.Function.FunctionWriter,SharpCraft.Function.FunctionWriter)">
            <summary>
            Shots a ray which stops and run commands when it hits a block.
            </summary>
            <param name="rayName">The name of the ray</param>
            <param name="hit">Block type the ray should be able to hit. Leave null to make the ray hit everything.</param>
            <param name="ignore">Block type the ray shouldn't be able to hit. Leave null for no ignored blocks.</param>
            <param name="length">The amount of blocks the ray should travel</param>
            <param name="onHit">The commands to run when the ray hits a block.</param>
            <param name="stepCommands">Commands to run for every block the ray moves.</param>
            <remarks>
            Running ray cast from within a ray cast might lead to unexpected behavior.
            </remarks>
        </member>
        <member name="M:SharpCraft.FunctionWriters.CustomCommands.RayCast(System.String,SharpCraft.Selector,SharpCraft.Selector,System.Double,SharpCraft.Function.FunctionWriter,System.Boolean)">
            <summary>
            Shots a ray which runs commands for every entity it hits
            </summary>
            <param name="rayName">The name of the ray</param>
            <param name="hit">Selector selecting entities the ray should be able to hit. Leave null for all entities</param>
            <param name="ignore">Selector selecting entities the ray shouldn't be able to hit. Leave null for no ignored entities</param>
            <param name="length">The amount of blocks he ray should travel.</param>
            <param name="onHit">The commands to run when the ray hits an entity</param>
            <param name="hitSelfAble">If the ray should be able to hit the executor</param>
        </member>
        <member name="P:SharpCraft.FunctionWriters.CustomCommands.Random">
            <summary>
            Commands for randomness
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.CustomCommands.ClassRandom">
            <summary>
            Commands for randomness
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.CustomCommands.ClassRandom.ExecuteIfRandom(System.Double,System.Boolean)">
            <summary>
            Generates a random number from 0 to 1 and only executes if the number is less than <paramref name="chance"/>
            </summary>
            <param name="chance">The chance for the command to execute</param>
            <param name="want">false if it should execute when it's false</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.CustomCommands.ClassRandom.NextRandom(System.Int32,System.Int32)">
            <summary>
            Generates a random number from <paramref name="from"/> to <paramref name="to"/>
            </summary>
            <param name="from">The smallest the number can be</param>
            <param name="to">The highest the number can be</param>
            <returns>A <see cref="T:SharpCraft.ScoreValue"/> holding the random number</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.CustomCommands.ClassRandom.HashScore(SharpCraft.ScoreValue)">
            <summary>
            Hashes the given <see cref="T:SharpCraft.ScoreValue"/>
            </summary>
            <param name="value">The <see cref="T:SharpCraft.ScoreValue"/> to hash</param>
            <returns>The <see cref="T:SharpCraft.ScoreValue"/> holding the hash</returns>
        </member>
        <member name="T:SharpCraft.FunctionWriters.EntityCommands">
            <summary>
            All the entity commands
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.Add(SharpCraft.Vector,SharpCraft.Entity)">
            <summary>
            Adds the specified entity to the world at the specified location
            </summary>
            <param name="addEntity">The entity to add to the world</param>
            <param name="coords">The coords to add the entity at</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.Kill(SharpCraft.BaseSelector)">
            <summary>
            Kills all entities selected by the selector
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.BaseSelector"/> to use</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.Spread(SharpCraft.BaseSelector,SharpCraft.Vector,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Spreads all entities selected by the selector around the specified location
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="center">The center to spread around</param>
            <param name="minDistance">the minimum distance the player can be spreaded away from each other</param>
            <param name="spreadDistanceMax">the maximum distance the player can be spreaded from the <paramref name="center"/></param>
            <param name="spreadTeams">If teams should be placed close to each other</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.JoinTeam(SharpCraft.BaseSelector,SharpCraft.Team)">
            <summary>
            Makes the selected entities join the specified <see cref="T:SharpCraft.Team"/>
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="team">The team they should join. Leave null to make them leave their team</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.Enchant(SharpCraft.BaseSelector,SharpCraft.ID.Enchant,System.Int32)">
            <summary>
            Enchants the selected entities hand item
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="enchant">the enchantment to enchant with</param>
            <param name="level">the level of the enchantment</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.Teleport(SharpCraft.BaseSelector,SharpCraft.Vector)">
            <summary>
            Teleports the selected entities to the specified location
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="tpTo">The location to teleport the entities to. Leave null to teleport to executed position</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.Teleport(SharpCraft.BaseSelector,SharpCraft.Vector,SharpCraft.Rotation)">
            <summary>
            Teleports the selected entities to the specified location
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="tpTo">The location to teleport the entities to</param>
            <param name="rotation">The rotation to teleport the selected entities to</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.Teleport(SharpCraft.BaseSelector,SharpCraft.Vector,SharpCraft.BaseSelector,SharpCraft.ID.FacingAnchor)">
            <summary>
            Teleports the selected entities to the specified location facing another entity
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="tpTo">The location to teleport the entities to</param>
            <param name="facing">The selector the entities should look at</param>
            <param name="facingPart">The part of the entity to look at</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.Teleport(SharpCraft.BaseSelector,SharpCraft.Vector,SharpCraft.Vector)">
            <summary>
            Teleports the selected entities to the specified location facing a location
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="tpTo">The location to teleport the entities to</param>
            <param name="facing">The block to look at</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.Teleport(SharpCraft.BaseSelector,SharpCraft.BaseSelector)">
            <summary>
            Teleports the selected entities to another entity
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="toSelector">The entity to teleport to</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.EntityCommands.Data">
            <summary>
            All commands using entity data
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.EntityCommands.ClassData">
            <summary>
            All commands using entity data
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassData.Change(SharpCraft.BaseSelector,SharpCraft.Data.SimpleDataHolder)">
            <summary>
            Adds the data from <paramref name="newEntity"/> to the selected entity
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="newEntity">the new data to add to the entity</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassData.Change(SharpCraft.BaseSelector,System.String,SharpCraft.ID.EntityDataModifierType,SharpCraft.Data.SimpleDataHolder)">
            <summary>
            Adds the <paramref name="copyData"/> to the entity's data at the specified data path
            </summary>
            <param name="toSelector">The entity to copy to</param>
            <param name="toDataPath">The data path to copy to</param>
            <param name="copyData">The data to insert</param>
            <param name="modifierType">The way to add the data</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassData.Change(SharpCraft.BaseSelector,System.String,System.Int32,SharpCraft.Data.SimpleDataHolder)">
            <summary>
            Adds the <paramref name="copyData"/> to the entity's data at the specified data path at the specified index of the array
            </summary>
            <param name="toSelector">The entity to copy to</param>
            <param name="toDataPath">The data path to copy to</param>
            <param name="copyData">The data to insert</param>
            <param name="index">the index to insert the data at</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassData.Get(SharpCraft.BaseSelector,System.String,System.Double)">
            <summary>
            Gets a numeric value from the selected entity's data at the given path
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="dataPath">The path to the data to get the number from</param>
            <param name="scale">The number to multiply the output number by</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassData.Remove(SharpCraft.BaseSelector,System.String)">
            <summary>
            Removes the data from the <see cref="T:SharpCraft.Entity"/> at the given datapath
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.BaseSelector"/> to remove data from</param>
            <param name="dataPath">The datapath</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassData.Copy(SharpCraft.BaseSelector,System.String,SharpCraft.ID.EntityDataModifierType,SharpCraft.IDataLocation)">
            <summary>
            Copies data from a place to an entity
            </summary>
            <param name="toSelector">The entity to copy the data to</param>
            <param name="toDataPath">The data path to copy to</param>
            <param name="dataLocation">The place to copy the data from</param>
            <param name="modifierType">The way to add the data</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassData.Copy(SharpCraft.BaseSelector,System.String,SharpCraft.IDataLocation,System.Int32)">
            <summary>
            Copies data from a place to an entity at the data path's specified index
            </summary>
            <param name="toSelector">The entity to copy the data to</param>
            <param name="toDataPath">The data path to copy to</param>
            <param name="dataLocation">The place to copy the data from</param>
            <param name="index">the index to copy to</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.EntityCommands.Tag">
            <summary>
            All commands for entity tags
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.EntityCommands.ClassTag">
            <summary>
            All commands for entity tags
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassTag.Add(SharpCraft.BaseSelector,SharpCraft.Tag)">
            <summary>
            Adds the specified tag the selected entities
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="tagName">The <see cref="F:SharpCraft.FunctionWriters.EntityCommands.Tag"/> to add</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassTag.Remove(SharpCraft.BaseSelector,SharpCraft.Tag)">
            <summary>
            removes the specified tag the selected entities
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="tagName">The <see cref="F:SharpCraft.FunctionWriters.EntityCommands.Tag"/> to remove</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.EntityCommands.Score">
            <summary>
            All commands for entity scores
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.EntityCommands.ClassScore">
            <summary>
            All commands for entity scores
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassScore.Add(SharpCraft.BaseSelector,SharpCraft.Objective,System.Int32)">
            <summary>
            adds the <paramref name="amount"/> to the selected entities' score in <paramref name="objective"/>
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="objective">the <see cref="T:SharpCraft.Objective"/> to change the score in</param>
            <param name="amount">the amount to add to the score. If the number is negative its removed instead</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassScore.Set(SharpCraft.BaseSelector,SharpCraft.Objective,System.Int32)">
            <summary>
            sets the selected entities' score in <paramref name="objective"/> to the specified <paramref name="amount"/>
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="objective">the <see cref="T:SharpCraft.Objective"/> to change the score in</param>
            <param name="amount">the amount to set the score to</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassScore.Operation(SharpCraft.BaseSelector,SharpCraft.Objective,SharpCraft.ID.Operation,System.Int32)">
            <summary>
            Does math with a score and a number and saves the result in the entity's score
            </summary>
            <param name="mainSelector">The entity score to do math on (Result will be saved in here)</param>
            <param name="mainObjective">The <see cref="T:SharpCraft.Objective"/> to get the value from to do math on</param>
            <param name="operationType">The operation to do between the numbers</param>
            <param name="number">The number to do math with</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassScore.Operation(SharpCraft.BaseSelector,SharpCraft.Objective,SharpCraft.ID.Operation,SharpCraft.BaseSelector,SharpCraft.Objective)">
            <summary>
            Does math with two scores and saves the result in one of the entities' score
            </summary>
            <param name="mainSelector">The first entity (The result will be stored in this entity's score)</param>
            <param name="mainObjective">The first entity's <see cref="T:SharpCraft.Objective"/> (The result will be stored in here)</param>
            <param name="operationType">The operation to do between the numbers</param>
            <param name="otherSelector">The other entity</param>
            <param name="otherObjective">The other entity's <see cref="T:SharpCraft.Objective"/></param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassScore.Reset(SharpCraft.BaseSelector,SharpCraft.Objective)">
            <summary>
            Resets the selected entities scores
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="objective">if a <see cref="T:SharpCraft.Objective"/> is specified only the score in the specified <see cref="T:SharpCraft.Objective"/> will be reseted</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassScore.Get(SharpCraft.BaseSelector,SharpCraft.Objective)">
            <summary>
            Gets the selected entity's score and outputs it
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="objective">the <see cref="T:SharpCraft.Objective"/> to take the score from</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.EntityCommands.Effect">
            <summary>
            All commands for effects
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.EntityCommands.ClassEffect">
            <summary>
            All commands for effects
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassEffect.Clear(SharpCraft.BaseSelector,System.Nullable{SharpCraft.ID.Effect})">
            <summary>
            Clears the specified effect from the selected entities
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="effect">the effect to remove</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassEffect.Give(SharpCraft.BaseSelector,SharpCraft.ID.Effect,System.Int32,System.Byte,System.Boolean)">
            <summary>
            Gives the specified effect to the selected entities
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="effect">the effect to give</param>
            <param name="time">the duration of the effect</param>
            <param name="amplifier">the amplifier of the effect (0 = level 1)</param>
            <param name="hideParticles">if the particles from the effect should be hidden or not</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.EntityCommands.Item">
            <summary>
            All commands for items
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.EntityCommands.ClassItem">
            <summary>
            All commands for items
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassItem.Armor(SharpCraft.BaseSelector,SharpCraft.Item,SharpCraft.ID.ArmorSlot)">
            <summary>
            Changes the selected entities' armor to the specified item
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="giveItem">the <see cref="F:SharpCraft.FunctionWriters.EntityCommands.Item"/> to give</param>
            <param name="armorSlot">the armor slot to put the item in</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassItem.Weapon(SharpCraft.BaseSelector,SharpCraft.Item,System.Boolean)">
            <summary>
            Changes the selected entities' weapon to the specified item
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="giveItem">the <see cref="F:SharpCraft.FunctionWriters.EntityCommands.Item"/> to give</param>
            <param name="offHand">If its the offhand weapon which should change</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassItem.Container(SharpCraft.BaseSelector,SharpCraft.Item)">
            <summary>
            Adds the specified item to the selected entities' inventory
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="addItem">the item to add to the entities. <see cref="P:SharpCraft.Item.Slot"/> is used to specify the slot</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassItem.VillagerInventory(SharpCraft.BaseSelector,SharpCraft.Item)">
            <summary>
            Adds the specified item to the selected villagers' inventory
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="addItem">the item to add to the villager. <see cref="P:SharpCraft.Item.Slot"/> is used to specify the slot</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.EntityCommands.ClassItem.Horse">
            <summary>
            all commands for items in horses
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.EntityCommands.ClassItem.ClassHorse">
            <summary>
            all commands for items in horses
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassItem.ClassHorse.Inventory(SharpCraft.BaseSelector,SharpCraft.Item)">
            <summary>
            Adds the specified item to the selected horses' inventory
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="giveItem">the item to add to the horses. <see cref="P:SharpCraft.Item.Slot"/> is used to specify the slot</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassItem.ClassHorse.Saddle(SharpCraft.BaseSelector,SharpCraft.Item)">
            <summary>
            Makes the specified item the selected horses' saddles
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="giveItem">the item to add to the horses.</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassItem.ClassHorse.Armor(SharpCraft.BaseSelector,SharpCraft.Item)">
            <summary>
            Makes the specified item the selected horses' armor
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="giveItem">the item to add to the horses.</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.EntityCommands.ClassItem.ClassHorse.Chest(SharpCraft.BaseSelector,SharpCraft.Item)">
            <summary>
            Makes the specified item the selected horses' chest
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="giveItem">the item to add to the horses.</param>
        </member>
        <member name="T:SharpCraft.FunctionWriters.ExecuteCommands">
            <summary>
            All the execute commands
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.Stop">
            <summary>
            Marks that the execute command shouldnt have any run command
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.Align(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Aligns the execute coordinates on the given axis
            </summary>
            <param name="alignX">If it should align on the x axis</param>
            <param name="alignY">If it should align on the y axis</param>
            <param name="alignZ">If it should align on the z axis</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.Align(System.Boolean)">
            <summary>
            Auto aligns the execute coordinates to all the axis
            </summary>
            <param name="center">True if it should center to the block</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.At(SharpCraft.BaseSelector)">
            <summary>
            Executes at the given <see cref="T:SharpCraft.BaseSelector"/>
            </summary>
            <param name="atEntity">The <see cref="T:SharpCraft.BaseSelector"/> to execute at</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.At">
            <summary>
            Executes at using the @s <see cref="T:SharpCraft.BaseSelector"/>
            </summary>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.As(SharpCraft.BaseSelector)">
            <summary>
            Executes as the given <see cref="T:SharpCraft.BaseSelector"/>
            </summary>
            <param name="asEntity">The <see cref="T:SharpCraft.BaseSelector"/> to execute as</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.IfBlock(SharpCraft.Vector,SharpCraft.Block,System.Boolean)">
            <summary>
            Executes if the given <see cref="T:SharpCraft.Block"/> is at the coords
            </summary>
            <param name="blockCoords">the coords of the block</param>
            <param name="findBlock">the <see cref="T:SharpCraft.Block"/> to find</param>
            <param name="want">false if it should execute when it's false</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.IfBlocks(SharpCraft.Vector,SharpCraft.Vector,SharpCraft.Vector,System.Boolean,System.Boolean)">
            <summary>
            Executes if the <see cref="T:SharpCraft.Block"/>s between the 2 corners are the same as the <see cref="T:SharpCraft.Block"/>s at the <paramref name="testCoords"/>
            </summary>
            <param name="corner1">The first corner</param>
            <param name="corner2">The second corner</param>
            <param name="testCoords">The coordinate to check at</param>
            <param name="masked">true if it should ignore air blocks</param>
            <param name="want">false if it should execute when it's false</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.IfEntity(SharpCraft.BaseSelector,System.Boolean)">
            <summary>
            Executes if the <paramref name="entitySelector"/> finds an <see cref="T:SharpCraft.Entity"/>
            </summary>
            <param name="entitySelector">The <see cref="T:SharpCraft.BaseSelector"/> used to search for entities</param>
            <param name="want">false if it should execute when it's false</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.IfData(SharpCraft.BaseSelector,System.String,System.Boolean)">
            <summary>
            Executes if the <see cref="T:SharpCraft.Entity"/> selected with <paramref name="dataPath"/> has the given datapath
            </summary>
            <param name="entitySelector">The <see cref="T:SharpCraft.BaseSelector"/> which selects the entity</param>
            <param name="dataPath">The datapath the entity should contain</param>
            <param name="want">false if it should execute when it's false</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.IfData(SharpCraft.Vector,System.String,System.Boolean)">
            <summary>
            Executes if the <see cref="T:SharpCraft.Block"/> at the coords has the given datapath
            </summary>
            <param name="block">the coords of the <see cref="T:SharpCraft.Block"/></param>
            <param name="dataPath">The datapath the entity should contain</param>
            <param name="want">false if it should execute when it's false</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.IfData(SharpCraft.Storage,System.String,System.Boolean)">
            <summary>
            Executes if the <see cref="T:SharpCraft.Storage"/> has the given datapath
            </summary>
            <param name="storage">the storage to check if datapath exists in</param>
            <param name="dataPath">The datapath the entity should contain</param>
            <param name="want">false if it should execute when it's false</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.IfPredicate(SharpCraft.IPredicate,System.Boolean)">
            <summary>
            Executes if the predicate returns true
            </summary>
            <param name="predicate">The predicate to check</param>
            <param name="want">false if it should execute when it's false</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.IfScore(SharpCraft.BaseSelector,SharpCraft.Objective,SharpCraft.ID.IfScoreOperation,SharpCraft.BaseSelector,SharpCraft.Objective,System.Boolean)">
            <summary>
            Executes if the <paramref name="mainSelector"/>'s score value is <paramref name="operation"/> than <paramref name="otherSelector"/>'s score value
            </summary>
            <param name="mainSelector">The first <see cref="T:SharpCraft.BaseSelector"/></param>
            <param name="mainObject">The first <see cref="T:SharpCraft.BaseSelector"/>'s <see cref="T:SharpCraft.Objective"/></param>
            <param name="operation">The operation used to check the scores</param>
            <param name="otherSelector">The second <see cref="T:SharpCraft.BaseSelector"/></param>
            <param name="otherObject">The second <see cref="T:SharpCraft.BaseSelector"/>'s <see cref="T:SharpCraft.Objective"/></param>
            <param name="want">false if it should execute when it's false</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.IfScore(SharpCraft.BaseSelector,SharpCraft.Objective,SharpCraft.MCRange,System.Boolean)">
            <summary>
            Executes if the given <see cref="T:SharpCraft.BaseSelector"/>'s score is in the given <see cref="T:SharpCraft.MCRange"/>
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.BaseSelector"/>'s score to check</param>
            <param name="scoreObject">the <see cref="T:SharpCraft.Objective"/> to containing the score</param>
            <param name="range">the <see cref="T:SharpCraft.MCRange"/> the score should be in</param>
            <param name="want">false if it should execute when it's false</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.Positioned(SharpCraft.Vector)">
            <summary>
            Executes at the given position
            </summary>
            <param name="position">the coords to execute at</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.Positioned(SharpCraft.BaseSelector)">
            <summary>
            Executes at the given <see cref="T:SharpCraft.BaseSelector"/>'s coords
            </summary>
            <param name="entity">The <see cref="T:SharpCraft.BaseSelector"/> to execute at</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.Store(SharpCraft.IDataLocation,SharpCraft.ID.StoreTypes,System.Double,System.Boolean)">
            <summary>
            Stores the command's success output inside the <see cref="T:SharpCraft.Entity"/>
            </summary>
            <param name="dataLocation">the location to store the result at</param>
            <param name="dataType">the path to the place to store the score</param>
            <param name="scale">the number the output should be multiplied with before being inserted</param>
            <param name="storeSucces">true if it only should store if the command was successfull</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.Store(SharpCraft.BaseSelector,SharpCraft.Objective,System.Boolean)">
            <summary>
            Stores the command's success output inside the given <see cref="T:SharpCraft.Entity"/>'s <see cref="T:SharpCraft.Objective"/>
            </summary>
            <param name="entity">The <see cref="T:SharpCraft.Entity"/> to store in</param>
            <param name="scoreObject">The <see cref="T:SharpCraft.Objective"/> to store in</param>
            <param name="storeSucces">true if it only should store if the command was successfull</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.Store(SharpCraft.BossBar,System.Boolean,System.Boolean)">
            <summary>
            Stores the command's success output inside the given <see cref="T:SharpCraft.BossBar"/>
            </summary>
            <param name="bossBar">The <see cref="T:SharpCraft.BossBar"/> to store the output in</param>
            <param name="value">true if it should store the output in the value, false if it should store it as maxvalue</param>
            <param name="storeSucces">true if it only should store if the command was successfull</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.Facing(SharpCraft.BaseSelector,SharpCraft.ID.FacingAnchor)">
            <summary>
            Executes rotated in the direction of the given <see cref="T:SharpCraft.Entity"/>
            </summary>
            <param name="entity">the <see cref="T:SharpCraft.Entity"/> it should be rotated at</param>
            <param name="facing">the part of the <see cref="T:SharpCraft.Entity"/> to be faced at</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.Facing(SharpCraft.Vector)">
            <summary>
            Executes rotated in the direction of the given coords
            </summary>
            <param name="coords">the coords to be rotated to</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.Rotated(SharpCraft.Rotation)">
            <summary>
            Executes rotated
            </summary>
            <param name="rotation">the <see cref="T:SharpCraft.Rotation"/> to execute with</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.Rotated(SharpCraft.BaseSelector)">
            <summary>
            Executes rotated as the given <see cref="T:SharpCraft.Entity"/>
            </summary>
            <param name="entity">the <see cref="T:SharpCraft.Entity"/> to execute rotated as</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.Dimension(SharpCraft.ID.Dimension)">
            <summary>
            Executes in the given dimension
            </summary>
            <param name="dimension">The dimension</param>
            <returns>The function running the command</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.ExecuteCommands.Anchored(SharpCraft.ID.FacingAnchor)">
            <summary>
            Changes where the origin used by coordinates are at
            </summary>
            <param name="anchor">The origin</param>
            <returns>The function running the command</returns>
        </member>
        <member name="T:SharpCraft.FunctionWriters.PlayerCommands">
            <summary>
            All the player commands
            </summary>
        </member>
        <member name="F:SharpCraft.FunctionWriters.PlayerCommands.XP">
            <summary>
            All commands for levels and xp
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.PlayerCommands.ClassXP">
            <summary>
            All commands for levels and xp
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassXP.LevelsAdd(SharpCraft.BaseSelector,System.Int32)">
            <summary>
            Adds the specified amount of levels to the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="levels">The amount of levels to add. If this is negative levels will be removed</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassXP.LevelsSet(SharpCraft.BaseSelector,System.Int32)">
            <summary>
            Sets the selected players' levels to the specified amount
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="levels">The amount to set the levels to</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassXP.LevelsGet(SharpCraft.BaseSelector)">
            <summary>
            Outputs the amount of levels the selected player has
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassXP.PointsAdd(SharpCraft.BaseSelector,System.Int32)">
            <summary>
            Adds the specified amount of points to the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="points">The amount of points to add. If this is negative points will be removed</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassXP.PointsSet(SharpCraft.BaseSelector,System.Int32)">
            <summary>
            Sets the selected players' points to the specified amount
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="points">The amount to set the points to</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassXP.PointsGet(SharpCraft.BaseSelector)">
            <summary>
            Outputs the amount of points the selected player has
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.Gamemode(SharpCraft.BaseSelector,SharpCraft.ID.Gamemode)">
            <summary>
            Changes the selected players gamemode
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="mode">the gamemode to change to</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.Spectate(SharpCraft.BaseSelector,SharpCraft.BaseSelector)">
            <summary>
            Forces a player to spectate an entity. The player has to be in spectator mode. Leave both params empty to make the executing player stop spectating
            </summary>
            <param name="spectate">The entity to spectate</param>
            <param name="spectator">The spectating player</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.Trigger(SharpCraft.Objective,System.Int32,System.Boolean)">
            <summary>
            Changes the executing player's score in the given <see cref="T:SharpCraft.Objective"/>
            </summary>
            <param name="scoreObject">the <see cref="T:SharpCraft.Objective"/> to change in</param>
            <param name="number">The number to add/set it to</param>
            <param name="set">If the score should be set to the given number. If false it will be added instead</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.Tell(SharpCraft.BaseSelector,System.String)">
            <summary>
            Whispers the specified message to the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="message">The message to tell the player</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.Spawnpoint(SharpCraft.BaseSelector,SharpCraft.Vector)">
            <summary>
            Changes the selected players' spawnpoint to the given location
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="spawn">The new spawnpoint location</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.EnableTrigger(SharpCraft.BaseSelector,SharpCraft.Objective)">
            <summary>
            Enables a trigger for the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="objective">The trigger (<see cref="T:SharpCraft.Objective"/>) to enable</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.Tellraw(SharpCraft.BaseSelector,SharpCraft.BaseJsonText)">
            <summary>
            Tells the selected players a message in chat
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="message">The message to tell the players</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.Actionbar(SharpCraft.BaseSelector,SharpCraft.BaseJsonText)">
            <summary>
            Shows a message in the selected players actionbar
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="message">The message to show</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.PlayerCommands.Particle">
            <summary>
            All commands for particles
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.PlayerCommands.ClassParticle">
            <summary>
            All commands for particles
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassParticle.Normal(SharpCraft.ID.Particle,SharpCraft.Vector,SharpCraft.Vector,System.Double,System.Int32,System.Boolean,SharpCraft.BaseSelector)">
            <summary>
            Makes particles appear in the world
            </summary>
            <param name="particle">The type of particles</param>
            <param name="displayCoords">The place to show the particles at</param>
            <param name="size">The radius to spread the particles in</param>
            <param name="speed">The speed of the particles</param>
            <param name="count">The amount of particles</param>
            <param name="force">If the particles should be shown no mater what</param>
            <param name="player">The players to show the particles to. If null the particles are shown to everyone</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassParticle.ColoredDust(SharpCraft.RGBColor,System.Double,SharpCraft.Vector,SharpCraft.Vector,System.Double,System.Int32,System.Boolean,SharpCraft.BaseSelector)">
            <summary>
            Makes dust particles appear in the world
            </summary>
            <param name="color">The color of the particles</param>
            <param name="particleSize">The size of the particles</param>
            <param name="displayCoords">The place to show the particles at</param>
            <param name="size">The radius to spread the particles in</param>
            <param name="speed">The speed of the particles</param>
            <param name="count">The amount of particles</param>
            <param name="force">If the particles should be shown no mater what</param>
            <param name="player">The players to show the particles to. If null the particles are shown to everyone</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassParticle.Block(SharpCraft.Block,SharpCraft.Vector,SharpCraft.Vector,System.Double,System.Int32,System.Boolean,System.Boolean,SharpCraft.BaseSelector)">
            <summary>
            Makes block particles appear in the world
            </summary>
            <param name="block">The block's particles to show</param>
            <param name="displayCoords">The place to show the particles at</param>
            <param name="size">The radius to spread the particles in</param>
            <param name="speed">The speed of the particles</param>
            <param name="count">The amount of particles</param>
            <param name="dust">If it should be dust or squares</param>
            <param name="force">If the particles should be shown no mater what</param>
            <param name="player">The players to show the particles to. If null the particles are shown to everyone</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassParticle.Item(SharpCraft.Item,SharpCraft.Vector,SharpCraft.Vector,System.Double,System.Int32,System.Boolean,SharpCraft.BaseSelector)">
            <summary>
            Makes item particles appear in the world
            </summary>
            <param name="item">The item's particles to show</param>
            <param name="displayCoords">The place to show the particles at</param>
            <param name="size">The radius to spread the particles in</param>
            <param name="speed">The speed of the particles</param>
            <param name="count">The amount of particles</param>
            <param name="force">If the particles should be shown no mater what</param>
            <param name="player">The players to show the particles to. If null the particles are shown to everyone</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.PlayerCommands.Item">
            <summary>
            All commands for items
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.PlayerCommands.ClassItem">
            <summary>
            All commands for items
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassItem.GiveItem(SharpCraft.BaseSelector,SharpCraft.Item)">
            <summary>
            Gives an item to the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="giveItem">The <see cref="F:SharpCraft.FunctionWriters.PlayerCommands.Item"/> to give to the players</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassItem.GiveItem(SharpCraft.BaseSelector,SharpCraft.ILootTable)">
            <summary>
            Gives the loot from a loottable to the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="loot">the <see cref="T:SharpCraft.LootTable"/> to give the player</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassItem.GiveItem(SharpCraft.BaseSelector,SharpCraft.BaseSelector)">
            <summary>
            Gives the loot which the selected entity would drop if killed to the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="kill">the selector selecting the entity whose loot should be dropped</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassItem.GiveItem(SharpCraft.BaseSelector,SharpCraft.Vector,SharpCraft.Item)">
            <summary>
            Gives the loot which the block at the given coords would drop of broken to the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="breakBlock">the coords of the block</param>
            <param name="breakWith">the item used to break the block</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassItem.GiveEnderChest(SharpCraft.BaseSelector,SharpCraft.Item)">
            <summary>
            Puts an item into the selected players' enderchests
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="giveItem">The item to insert into the enderchest. <see cref="P:SharpCraft.Item.Slot"/> choses the slot.</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassItem.GiveHotbar(SharpCraft.BaseSelector,SharpCraft.Item)">
            <summary>
            Puts an item into the selected players' hotbars
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="giveItem">The item to insert into the hotbar. <see cref="P:SharpCraft.Item.Slot"/> choses the slot.</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassItem.GiveHotbar(SharpCraft.BaseSelector,SharpCraft.ILootTable,System.Int32)">
            <summary>
            Puts the item from the loot table into the players hotbar
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="loot">the <see cref="T:SharpCraft.LootTable"/> to give the player</param>
            <param name="slot">The hotbar slot to put the item in</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassItem.GiveHotbar(SharpCraft.BaseSelector,SharpCraft.Vector,SharpCraft.Item,System.Int32)">
            <summary>
            Puts the item from the loot table into the players hotbar
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="breakBlock">the coords of the block</param>
            <param name="breakWith">the item used to break the block</param>
            <param name="slot">The hotbar slot to put the item in</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassItem.GiveWeapon(SharpCraft.BaseSelector,SharpCraft.Item,System.Boolean)">
            <summary>
            Inserts an item into the selected players' selected slot
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="giveItem">The item to insert</param>
            <param name="offHand">If it should insert into the offhand instead</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassItem.Clear(SharpCraft.BaseSelector,SharpCraft.Item,System.Nullable{System.Int32})">
            <summary>
            Clears an item from the selected players' inventories
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="item">The item to clear</param>
            <param name="amount">The maximum amount of the item to clear. null clears all</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.PlayerCommands.Sound">
            <summary>
            All commands for sounds
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.PlayerCommands.ClassSound">
            <summary>
            All commands for sounds
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassSound.Play(SharpCraft.BaseSelector,System.String,SharpCraft.ID.SoundSource,SharpCraft.Vector,System.Double,System.Double,System.Double)">
            <summary>
            Plays a sound for the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="sound">the sound to play</param>
            <param name="source">the source to play the sound as</param>
            <param name="location">the location to play the sound at</param>
            <param name="volume">the maximum volume of the sound</param>
            <param name="speed">the speed of the sound (0-2)</param>
            <param name="minValue">the minimum volume of the sound (0-2)</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassSound.Stop(SharpCraft.BaseSelector,System.Nullable{SharpCraft.ID.SoundSource},System.String)">
            <summary>
            Stops sounds for the selected players
            (If no source and sound is specified it will stop all sounds)
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="source">the source to stop sounds at. Null will stop the sound from any source</param>
            <param name="sound">the sound to stop. Null will stop any sound in the given source</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.PlayerCommands.Title">
            <summary>
            All commands for titles
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.PlayerCommands.ClassTitle">
            <summary>
            All commands for titles
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassTitle.Title(SharpCraft.BaseSelector,SharpCraft.BaseJsonText)">
            <summary>
            displays a title for the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="message">The message to show the players</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassTitle.SubTitle(SharpCraft.BaseSelector,SharpCraft.BaseJsonText)">
            <summary>
            displays a subtitle for the selected players
            Note: the subtitle is first shown when the title command is ran
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="message">The message to show the players</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassTitle.Time(SharpCraft.BaseSelector,SharpCraft.Time,SharpCraft.Time,SharpCraft.Time)">
            <summary>
            choses how long the titles should be shown for the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="startFade">The amount of ticks it takes for the title to fade in</param>
            <param name="stay">The amount of ticks the title stays on screen</param>
            <param name="endFade">The amount of ticks it takes for the title to fade out</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassTitle.Clear(SharpCraft.BaseSelector)">
            <summary>
            clears the shown title on the selected players' screens
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassTitle.Reset(SharpCraft.BaseSelector)">
            <summary>
            resets all the title values for the selected players' screens
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassTitle.FullTitle(SharpCraft.BaseSelector,SharpCraft.BaseJsonText,SharpCraft.BaseJsonText,SharpCraft.Time,SharpCraft.Time,SharpCraft.Time)">
            <summary>
            Displays a whole title for the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="topMessage">The main title message</param>
            <param name="bottomMessage">the bottom part of the title message</param>
            <param name="startFade">The amount of ticks it takes for the title to fade in</param>
            <param name="stay">The amount of ticks the title stays on screen</param>
            <param name="endFade">The amount of ticks it takes for the title to fade out</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.PlayerCommands.Recipe">
            <summary>
            All commands for recipes
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.PlayerCommands.ClassRecipe">
            <summary>
            All commands for recipes
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassRecipe.Give(SharpCraft.BaseSelector,SharpCraft.IRecipe)">
            <summary>
            Give a recipe to the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="giveRecipe">The recipe to give</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassRecipe.GiveAll(SharpCraft.BaseSelector)">
            <summary>
            Gives all recipes to the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassRecipe.Remove(SharpCraft.BaseSelector,SharpCraft.IRecipe)">
            <summary>
            Removes a recipe from the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="giveRecipe">the recipe to remove</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassRecipe.RemoveAll(SharpCraft.BaseSelector)">
            <summary>
            removes all recipes from the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.PlayerCommands.Advancement">
            <summary>
            All commands for advancements
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.PlayerCommands.ClassAdvancement">
            <summary>
            All commands for advancements
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassAdvancement.Everything(SharpCraft.BaseSelector,System.Boolean)">
            <summary>
            grants/evokes all advancements for the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="revoke">if the advancement should be revoked instead of granted</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassAdvancement.Until(SharpCraft.BaseSelector,SharpCraft.IAdvancement,System.Boolean)">
            <summary>
            Grants/revokes all advancements up to the specified advancement for the selected players
            (it also grants/revokes the specified advancement)
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="advancement">the advancement to grant/revoke up to</param>
            <param name="revoke">if the advancement should be revoked instead of granted</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassAdvancement.From(SharpCraft.BaseSelector,SharpCraft.IAdvancement,System.Boolean)">
            <summary>
            grants/revokes all advancements after the specified advancement for the selected players
            (it also grants/revokes the specified advancement)
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="advancement">the advancement to grant/revoke from</param>
            <param name="revoke">if the advancement should be revoked instead of granted</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassAdvancement.Branch(SharpCraft.BaseSelector,SharpCraft.IAdvancement,System.Boolean)">
            <summary>
            grants/revokes all advancements in the same branch as the specified advancement for the selected players
            (it also grants/revokes the specified advancement)
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="advancement">an advancement in the branch to grant/revoke</param>
            <param name="revoke">if the advancement should be revoked instead of granted</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.PlayerCommands.ClassAdvancement.Only(SharpCraft.BaseSelector,SharpCraft.IAdvancement,System.Boolean,SharpCraft.AdvancementObjects.ITrigger)">
            <summary>
            grants/revokes the specified the advancement for the selected players
            (it also grants/revokes the specified advancement)
            </summary>
            <param name="player">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
            <param name="advancement">the advancement to grant/revoke</param>
            <param name="revoke">if the advancement should be revoked instead of granted</param>
            <param name="trigger">the trigger in the advancement to revoke/grant. Null means the advancement itself will be granted/revoked</param>
        </member>
        <member name="T:SharpCraft.FunctionWriters.WorldCommands">
            <summary>
            All commands for the world
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.Spawn(SharpCraft.Vector)">
            <summary>
            Changes the world's spawnpoint to the specified location
            </summary>
            <param name="coords">The new location of the world spawnpoint</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.WorldCommands.LoadSquare">
            <summary>
            Commands for loading chunks
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.WorldCommands.ClassLoadSquare">
            <summary>
            Commands for loading chunks
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassLoadSquare.ForceLoad(SharpCraft.Vector,SharpCraft.Vector)">
            <summary>
            Loads the chunks containing the coordinates from corner to oppesiteCorner
            </summary>
            <param name="corner">One of the corners of the square to load</param>
            <param name="oppesiteCorner">The oppesite corner in the square to load</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassLoadSquare.ForceLoad(SharpCraft.Vector)">
            <summary>
            Loads the chunk containing the coordinate
            </summary>
            <param name="coordinate">Coordinate in the chunk to load</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassLoadSquare.StopLoad(SharpCraft.Vector,SharpCraft.Vector)">
            <summary>
            stops the chunks containing the coordinates from corner to oppesiteCorner from being forced loaded
            </summary>
            <param name="corner">One of the corners of the square to stop loading</param>
            <param name="oppesiteCorner">The oppesite corner in the square to stop loading</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassLoadSquare.StopLoad(SharpCraft.Vector)">
            <summary>
            Stops the chunk at the coordinate from being forcedloaded
            </summary>
            <param name="coordinate">Coordinate in the chunk to stop loading</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassLoadSquare.StopLoad">
            <summary>
            Stops all chunks from being forced loaded
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassLoadSquare.IsLoaded(SharpCraft.Vector)">
            <summary>
            Checks if the given coords are loaded
            </summary>
            <param name="coordinate">The coordinate to check if loaded</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.Say(System.String)">
            <summary>
            Says a message in the chat
            </summary>
            <param name="text">the text to say in chat</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.DefaultGamemode(SharpCraft.ID.Gamemode)">
            <summary>
            Changes the default gamemode players are in when they spawn for the first time
            </summary>
            <param name="gamemode">the new default gamemode</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.Difficulty(SharpCraft.ID.Difficulty)">
            <summary>
            Changes the difficulty of the world
            </summary>
            <param name="difficulty">the new difficulty</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.Loot(SharpCraft.Vector,SharpCraft.ILootTable)">
            <summary>
            Spawns loot into the world at the given location
            </summary>
            <param name="coords">The location to spawn the loot</param>
            <param name="loot">the <see cref="T:SharpCraft.LootTable"/> to spawn in</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.Loot(SharpCraft.Vector,SharpCraft.BaseSelector)">
            <summary>
            Spawns loot into the world at the given location
            </summary>
            <param name="coords">The location to spawn the loot</param>
            <param name="kill">the entity whose "when killed loot" should be dropped</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.Loot(SharpCraft.Vector,SharpCraft.Vector,SharpCraft.Item)">
            <summary>
            Spawns loot into the world at the given location
            </summary>
            <param name="coords">The location to spawn the loot</param>
            <param name="breakBlock">the block whose "when mined loot" should be dropped</param>
            <param name="breakWith">the tool used to break the block</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.Function(SharpCraft.IFunction,SharpCraft.Time,System.Boolean)">
            <summary>
            Runs the specified function
            </summary>
            <param name="runFunction">the function to run</param>
            <param name="delay">the amount of time to function execution should be delayed. null doesnt delay it. 
            (If value is other than null the function will ignore the arguments send in the execute command which executed it)</param>
            <param name="append">If the function is being scheduled: if false replace the last time the function was scheduled</param>
            <returns>The ran function</returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.StopSchedule(SharpCraft.IFunction)">
            <summary>
            Clears the schedule for the given function
            </summary>
            <param name="function">The function to clear the schedule for</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.Weather(SharpCraft.ID.WeatherType,SharpCraft.Time)">
            <summary>
            Changes the weather to the specified type
            </summary>
            <param name="SetTo">The new type of weather</param>
            <param name="WeatherTime">The number of ticks the weather should be going. Null means the game chose</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.Gamerule(SharpCraft.ID.BoolGamerule,System.Nullable{System.Boolean})">
            <summary>
            Changes or gets a gamerule
            </summary>
            <param name="gamerule">The gamerule to change or get</param>
            <param name="setValue">The value to change the gamerule to. Null returns the gamerule value instead</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.Gamerule(SharpCraft.ID.IntGamerule,System.Nullable{System.Int32})">
            <summary>
            Changes or gets a gamerule
            </summary>
            <param name="gamerule">The gamerule to change or get</param>
            <param name="setValue">The value to change the gamerule to. Null returns the gamerule value instead</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.WorldCommands.Data">
            <summary>
            The data commands
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.WorldCommands.ClassData">
            <summary>
            The data commands
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassData.Change(SharpCraft.Storage,SharpCraft.Data.SimpleDataHolder)">
            <summary>
            Adds the given data to the <see cref="T:SharpCraft.Storage"/>
            </summary>
            <param name="data">The data to give to the <see cref="T:SharpCraft.Storage"/></param>
            <param name="storage">the <see cref="T:SharpCraft.Storage"/> to give the data to</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassData.Change(SharpCraft.Storage,System.String,SharpCraft.ID.EntityDataModifierType,SharpCraft.Data.SimpleDataHolder)">
            <summary>
            Copies data into the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="storage">the <see cref="T:SharpCraft.Storage"/> to copy the data to</param>
            <param name="toDataPath">the datapath to copy to</param>
            <param name="modifierType">The way to data should be copied in</param>
            <param name="copyData">The data to insert</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassData.Change(SharpCraft.Storage,System.String,System.Int32,SharpCraft.Data.SimpleDataHolder)">
            <summary>
            Copies data into the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="storage">the <see cref="T:SharpCraft.Storage"/> to copy the data to</param>
            <param name="toDataPath">the datapath to copy to</param>
            <param name="index">The index to copy the data to</param>
            <param name="copyData">The data to insert</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassData.Remove(SharpCraft.Storage,System.String)">
            <summary>
            Removes the data from the <see cref="T:SharpCraft.Block"/> at the given datapath
            </summary>
            <param name="dataPath">The datapath</param>
            <param name="storage">the <see cref="T:SharpCraft.Storage"/> to remove the data from</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassData.Get(SharpCraft.Storage,System.String,System.Double)">
            <summary>
            Gets the numeric data from the datapath from the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="storage">the <see cref="T:SharpCraft.Storage"/> to get the data from</param>
            <param name="dataPath">the datapath to the data</param>
            <param name="scale">the number to multiply the numeric value with</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassData.Copy(SharpCraft.Storage,System.String,SharpCraft.ID.EntityDataModifierType,SharpCraft.IDataLocation)">
            <summary>
            Copies data into the block at given location
            </summary>
            <param name="storage">the <see cref="T:SharpCraft.Storage"/> to copy the data to</param>
            <param name="toDataPath">the datapath to copy to</param>
            <param name="modifierType">The way to data should be copied in</param>
            <param name="dataLocation">The place to copy the data from</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassData.Copy(SharpCraft.Storage,System.String,System.Int32,SharpCraft.IDataLocation)">
            <summary>
            Copies data into the block at the given location
            </summary>
            <param name="storage">the <see cref="T:SharpCraft.Storage"/> to copy the data to</param>
            <param name="toDataPath">the datapath to copy to</param>
            <param name="index">The index to copy the data to</param>
            <param name="dataLocation">The place to copy the data from</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.WorldCommands.Objective">
            <summary>
            All commands for scoreboards
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.WorldCommands.ClassObjective">
            <summary>
            All commands for scoreboards
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassObjective.Add(System.String,System.String,SharpCraft.BaseJsonText)">
            <summary>
            Adds the specified <see cref="T:SharpCraft.Objective"/> to the world
            </summary>
            <param name="scoreName">The name of the <see cref="T:SharpCraft.Objective"/></param>
            <param name="type">the type of the scoreboard. See <see cref="T:SharpCraft.ID.Objective"/> for a list of types</param>
            <param name="displayName">The name to display when the scoreboard is viewed in the sidebar</param>
            <returns>the newly created <see cref="T:SharpCraft.Objective"/></returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassObjective.Remove(SharpCraft.Objective)">
            <summary>
            Removes the specified <see cref="T:SharpCraft.Objective"/> from the world
            </summary>
            <param name="objective">the <see cref="T:SharpCraft.Objective"/> to remove</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassObjective.Display(SharpCraft.Objective,SharpCraft.ID.ScoreDisplay,System.Nullable{SharpCraft.ID.MinecraftColor})">
            <summary>
            Displays the specified <see cref="T:SharpCraft.Objective"/> in the specified display slot
            Note: each slot can only display one <see cref="T:SharpCraft.Objective"/>
            </summary>
            <param name="objective">the <see cref="T:SharpCraft.Objective"/> to display</param>
            <param name="display">the display slot to display it in</param>
            <param name="teamColor">only teams with this color can see it. Null makes everyone see it. Note: this only works with <see cref="F:SharpCraft.ID.ScoreDisplay.sidebar"/> as the <paramref name="display"/></param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassObjective.ClearDisplay(SharpCraft.ID.ScoreDisplay,System.Nullable{SharpCraft.ID.MinecraftColor})">
            <summary>
            Clears a display slot
            </summary>
            <param name="display">the display slot to clear</param>
            <param name="teamColor">the team's sidebar slot to clear. Note: this only works with <see cref="F:SharpCraft.ID.ScoreDisplay.sidebar"/> as the <paramref name="display"/></param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassObjective.DisplayName(SharpCraft.Objective,SharpCraft.BaseJsonText)">
            <summary>
            Changes the <see cref="T:SharpCraft.Objective"/>'s displayed name
            </summary>
            <param name="objective">the <see cref="T:SharpCraft.Objective"/> to change</param>
            <param name="name">The new display name</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassObjective.Render(SharpCraft.Objective,SharpCraft.ID.ObjectiveRender)">
            <summary>
            Changes the way the <see cref="T:SharpCraft.Objective"/> is rendered in the <see cref="F:SharpCraft.ID.ScoreDisplay.list"/> display slot
            </summary>
            <param name="objective">the <see cref="T:SharpCraft.Objective"/> to change</param>
            <param name="render">The way it should be rendered</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.WorldCommands.Team">
            <summary>
            All commands for teams
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.WorldCommands.ClassTeam">
            <summary>
            All commands for teams
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassTeam.Add(System.String,SharpCraft.BaseJsonText,System.Nullable{SharpCraft.ID.MinecraftColor})">
            <summary>
            Adds the specified <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/> to the world
            </summary>
            <param name="teamName">the <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/>'s name</param>
            <param name="displayName">the displayed name of the <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/></param>
            <param name="teamColor">the color of the <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/>. If null the <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/> will have the default color (white)</param>
            <returns>the newly created <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/></returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassTeam.Remove(SharpCraft.Team)">
            <summary>
            Removes the specified <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/> from the world
            </summary>
            <param name="removeTeam">the <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/> to remove</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassTeam.Color(SharpCraft.Team,SharpCraft.ID.MinecraftColor)">
            <summary>
            Changes the color of the specified <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/>
            </summary>
            <param name="changeTeam">the <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/> to change</param>
            <param name="color">The new color</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassTeam.DeathMessage(SharpCraft.Team,SharpCraft.ID.TeamVisibility)">
            <summary>
            Changes how the specified <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/>'s death messages are displayed
            </summary>
            <param name="changeTeam">the <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/> to change</param>
            <param name="visible">the visibility rule</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassTeam.Collision(SharpCraft.Team,SharpCraft.ID.TeamCollision)">
            <summary>
            Changes how the specified <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/> collides things
            </summary>
            <param name="changeTeam">the <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/> to change</param>
            <param name="collision">the collision rule</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassTeam.FriendlyFire(SharpCraft.Team,System.Boolean)">
            <summary>
            Changes if the specified <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/> can damage players on their own team or not
            </summary>
            <param name="changeTeam">the <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/> to change</param>
            <param name="friendlyFire">If the team should be able to damage their own team or not</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassTeam.SeeInvisibleFriends(SharpCraft.Team,System.Boolean)">
            <summary>
            Changes how the specified <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/> is displayed when invisible
            </summary>
            <param name="changeTeam">the <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/> to change</param>
            <param name="see">the visibility rule</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassTeam.Nametag(SharpCraft.Team,SharpCraft.ID.TeamVisibility)">
            <summary>
            Changes how the specified <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/>'s nametags are visible
            </summary>
            <param name="changeTeam">the <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/> to change</param>
            <param name="visible">the visibility tule</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassTeam.DisplayName(SharpCraft.Team,SharpCraft.BaseJsonText)">
            <summary>
            Changes the display name of the specified <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/>
            </summary>
            <param name="changeTeam">the <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/> to change</param>
            <param name="name">The new name of the team</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassTeam.Clear(SharpCraft.Team)">
            <summary>
            Removes all players from the specified <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/>
            </summary>
            <param name="clearTeam">the <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/> to remove players from</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassTeam.Prefix(SharpCraft.Team,SharpCraft.BaseJsonText)">
            <summary>
            Changes the prefix shown before the name of players in the specified <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/>
            </summary>
            <param name="changeTeam">the <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/> to change</param>
            <param name="preffixJson">The new prefix to show</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassTeam.Suffix(SharpCraft.Team,SharpCraft.BaseJsonText)">
            <summary>
            Changes the suffix shown after the name of players in the specified <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/>
            </summary>
            <param name="changeTeam">the <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Team"/> to change</param>
            <param name="suffixJson">the new prefix to show</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.WorldCommands.Datapack">
            <summary>
            All commands for datapacks
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.WorldCommands.ClassDatapack">
            <summary>
            All commands for datapacks
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassDatapack.Disable(SharpCraft.BaseDatapack)">
            <summary>
            Disables the specified <see cref="T:SharpCraft.Datapack"/>
            </summary>
            <param name="datapack">the <see cref="T:SharpCraft.Datapack"/> to disable</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassDatapack.Enable(SharpCraft.BaseDatapack,SharpCraft.ID.DatapackPlace,SharpCraft.Datapack)">
            <summary>
            Enables the specified <see cref="T:SharpCraft.Datapack"/>
            </summary>
            <param name="datapack">the <see cref="T:SharpCraft.Datapack"/> to enable</param>
            <param name="placeAt">choses where the <see cref="T:SharpCraft.Datapack"/> should be placed relative to other enabled <see cref="T:SharpCraft.Datapack"/>s</param>
            <param name="otherPack">the <see cref="T:SharpCraft.Datapack"/> the <paramref name="datapack"/> is placed relative to</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.WorldCommands.Time">
            <summary>
            All commands for time
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.WorldCommands.ClassTime">
            <summary>
            All commands for time
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassTime.Add(SharpCraft.Time)">
            <summary>
            Adds the specified amount of <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Time"/> to the time of day
            </summary>
            <param name="time">the <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Time"/> to add</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassTime.Set(SharpCraft.Time)">
            <summary>
            Sets the time of day to the specified <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Time"/>
            </summary>
            <param name="time">the <see cref="F:SharpCraft.FunctionWriters.WorldCommands.Time"/> to set it to</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassTime.GetDay">
            <summary>
            Gets the amount of days which has gone by
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassTime.GetDayTime">
            <summary>
            Gets the time of day it is in ticks
            (0-24000)
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassTime.GetTime">
            <summary>
            Gets the time of the world
            (Pretty much just <see cref="M:SharpCraft.FunctionWriters.WorldCommands.ClassTime.GetDay"/> * 24000 + <see cref="M:SharpCraft.FunctionWriters.WorldCommands.ClassTime.GetDayTime"/>)
            </summary>
        </member>
        <member name="F:SharpCraft.FunctionWriters.WorldCommands.Border">
            <summary>
            All commands for the world border
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.WorldCommands.ClassBorder">
            <summary>
            All commands for the world border
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassBorder.Add(System.Double,SharpCraft.Time)">
            <summary>
            Adds blocks to the world border size
            </summary>
            <param name="add">The amount of blocks to add. 
            Note: the blocks are spread out from the center, so adding 1 block adds a half block to all sides
            Note: if the number is negative blocks will be removed</param>
            <param name="time">The amount of time it should take to add the blocks</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassBorder.Center(SharpCraft.Vector)">
            <summary>
            Changes the center of the world border
            </summary>
            <param name="coords">the location of the new center</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassBorder.Damage(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Changes the amount of damage the world border does
            </summary>
            <param name="amountPerBlock">The amount of damage it does per block the player is too far outside</param>
            <param name="buffer">The amount of blocks the player has to be outside the border before taking damage</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassBorder.Get">
            <summary>
            Gets the worldborder's current size in blocks
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassBorder.Warning(System.Nullable{System.Int32},SharpCraft.Time)">
            <summary>
            Changes when the worldborder starts to show red on the players' screens
            </summary>
            <param name="distance">the maximum distance in blocks the player has be away from the border for the red to show</param>
            <param name="time">The maximum amount of time the player is away from the border for the red to show.
            (Time as in: "the world border will be at the player in X seconds")</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassBorder.Set(System.Double,SharpCraft.Time)">
            <summary>
            Sets the world border's size in blocks
            </summary>
            <param name="set">The amount of blocks wide the border is</param>
            <param name="time">The time it should take for the border to get there</param>
        </member>
        <member name="F:SharpCraft.FunctionWriters.WorldCommands.BossBar">
            <summary>
            All commands for boss bars
            </summary>
        </member>
        <member name="T:SharpCraft.FunctionWriters.WorldCommands.ClassBossBar">
            <summary>
            All commands for boss bars
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassBossBar.Add(System.String,SharpCraft.BaseJsonText)">
            <summary>
            Adds a <see cref="T:SharpCraft.BossBar"/> with the specified name to the world
            </summary>
            <param name="name">the name of the <see cref="T:SharpCraft.BossBar"/></param>
            <param name="showName">The name to show ontop of the <see cref="T:SharpCraft.BossBar"/></param>
            <returns>the newly created <see cref="T:SharpCraft.BossBar"/></returns>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassBossBar.Remove(SharpCraft.BossBar)">
            <summary>
            Removes the specified <see cref="T:SharpCraft.BossBar"/> from the world
            </summary>
            <param name="removeThis">the <see cref="T:SharpCraft.BossBar"/> to remove</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassBossBar.SetValue(SharpCraft.BossBar,System.Int32)">
            <summary>
            Sets the specified <see cref="T:SharpCraft.BossBar"/>'s value
            </summary>
            <param name="bossBar">the <see cref="T:SharpCraft.BossBar"/> to change</param>
            <param name="setTo">the new value</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassBossBar.SetMax(SharpCraft.BossBar,System.Int32)">
            <summary>
            Sets the maximum value the specified <see cref="T:SharpCraft.BossBar"/> can display
            </summary>
            <param name="bossBar">the <see cref="T:SharpCraft.BossBar"/> to change</param>
            <param name="setTo">the new max value</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassBossBar.SetName(SharpCraft.BossBar,SharpCraft.BaseJsonText)">
            <summary>
            Changes the specified <see cref="T:SharpCraft.BossBar"/>'s display name
            </summary>
            <param name="bossBar">the <see cref="T:SharpCraft.BossBar"/> to change</param>
            <param name="newName">the new display name for the bar</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassBossBar.SetVisible(SharpCraft.BossBar,System.Boolean)">
            <summary>
            Changes if the specified <see cref="T:SharpCraft.BossBar"/> is visible
            </summary>
            <param name="bossBar">the <see cref="T:SharpCraft.BossBar"/> to change</param>
            <param name="visible">If it should be visible or not</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassBossBar.SetStyle(SharpCraft.BossBar,SharpCraft.ID.BossBarStyle)">
            <summary>
            Changes the style of the specified <see cref="T:SharpCraft.BossBar"/>
            </summary>
            <param name="bossBar">the <see cref="T:SharpCraft.BossBar"/> to change</param>
            <param name="style">the new style of the <see cref="T:SharpCraft.BossBar"/></param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassBossBar.SetColor(SharpCraft.BossBar,SharpCraft.ID.BossBarColor)">
            <summary>
            Changes the color of the specified <see cref="T:SharpCraft.BossBar"/>
            </summary>
            <param name="bossBar">the <see cref="T:SharpCraft.BossBar"/> to change</param>
            <param name="color">the new color</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassBossBar.SetPlayers(SharpCraft.BossBar,SharpCraft.BaseSelector)">
            <summary>
            Makes the selected players see the specified <see cref="T:SharpCraft.BossBar"/>
            </summary>
            <param name="bossBar">the <see cref="T:SharpCraft.BossBar"/> to show</param>
            <param name="players">the <see cref="T:SharpCraft.BaseSelector"/> to use</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassBossBar.GetValue(SharpCraft.BossBar)">
            <summary>
            Gets the specified <see cref="T:SharpCraft.BossBar"/>'s value
            </summary>
            <param name="bossBar">the <see cref="T:SharpCraft.BossBar"/> to get from</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassBossBar.GetMax(SharpCraft.BossBar)">
            <summary>
            Gets the specified <see cref="T:SharpCraft.BossBar"/>'s max value
            </summary>
            <param name="bossBar">the <see cref="T:SharpCraft.BossBar"/> to get from</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassBossBar.GetVisible(SharpCraft.BossBar)">
            <summary>
            Gets the specified <see cref="T:SharpCraft.BossBar"/>'s visibility value
            </summary>
            <param name="bossBar">the <see cref="T:SharpCraft.BossBar"/> to get from</param>
        </member>
        <member name="M:SharpCraft.FunctionWriters.WorldCommands.ClassBossBar.GetPlayers(SharpCraft.BossBar)">
            <summary>
            Gets a number stating how many players can see the specified <see cref="T:SharpCraft.BossBar"/>
            </summary>
            <param name="bossBar">the <see cref="T:SharpCraft.BossBar"/> to get from</param>
        </member>
        <member name="T:SharpCraft.Commands.AdvancementAllCommand">
            <summary>
            Command which grants/revokes all advancements for some players
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.AdvancementAllCommand.#ctor(SharpCraft.BaseSelector,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.AdvancementAllCommand"/>
            </summary>
            <param name="selector">Selector for selecting players to grant/revoke all advancements for</param>
            <param name="grant">True if the advancements should be granted. False if they should be revoked</param>
        </member>
        <member name="P:SharpCraft.Commands.AdvancementAllCommand.Selector">
            <summary>
            Selector for selecting players to grant/revoke all advancements for
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.AdvancementAllCommand.Grant">
            <summary>
            True if the advancements should be granted. False if they should be revoked
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.AdvancementAllCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>advancement grant/revoke [Selector] everything</returns>
        </member>
        <member name="T:SharpCraft.Commands.AdvancementSingleCommand">
            <summary>
            Command which grants/revokes a single advancement or advancement criterion for some players
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.AdvancementSingleCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.IAdvancement,SharpCraft.AdvancementObjects.ITrigger,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.AdvancementSingleCommand"/>
            </summary>
            <param name="selector">Selector for selecting players to grant/revoke the advancement or advancement criterion for</param>
            <param name="grant">True if the advancement should be granted. False if it should be revoked</param>
            <param name="advancement">The advancement to grant/revoke</param>
            <param name="criterion">The advancement criterion to grant/revoke. Leave null to only grant/revoke the advancement</param>
        </member>
        <member name="P:SharpCraft.Commands.AdvancementSingleCommand.Selector">
            <summary>
            Selector for selecting players to grant/revoke the advancement or advancement criterion for
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.AdvancementSingleCommand.Advancement">
            <summary>
            The advancement to grant/revoke
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.AdvancementSingleCommand.Criterion">
            <summary>
            The advancement criterion to grant/revoke. Leave null to only grant/revoke the advancement
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.AdvancementSingleCommand.Grant">
            <summary>
            True if the advancement should be granted. False if it should be revoked
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.AdvancementSingleCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>advancement grant/revoke [Selector] only [Advancement] (Criterion)</returns>
        </member>
        <member name="T:SharpCraft.Commands.AdvancementSomeCommand">
            <summary>
            Command which grants/revokes some advancement for some players based on the advancements relative position to another advancement
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.AdvancementSomeCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.IAdvancement,SharpCraft.ID.RelativeAdvancement,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.AdvancementSomeCommand"/>
            </summary>
            <param name="selector">Selector for selecting players to grant/revoke the advancement or advancement criterion for</param>
            <param name="grant">True if the advancement should be granted. False if it should be revoked</param>
            <param name="advancement">The advancement to grant/revoke</param>
            <param name="select">The advancements to grant/revoke</param>
        </member>
        <member name="P:SharpCraft.Commands.AdvancementSomeCommand.Selector">
            <summary>
            Selector for selecting players to grant/revoke the advancement or advancement criterion for
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.AdvancementSomeCommand.Advancement">
            <summary>
            The advancement to grant/revoke
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.AdvancementSomeCommand.Select">
            <summary>
            The advancements to grant/revoke
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.AdvancementSomeCommand.Grant">
            <summary>
            True if the advancement should be granted. False if it should be revoked
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.AdvancementSomeCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>advancement grant/revoke [Selector] [Select] [Advancement]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ICommand">
            <summary>
            base interface for commands
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ICommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>The command as a string</returns>
        </member>
        <member name="M:SharpCraft.Commands.ICommand.ShallowClone">
            <summary>
            Returns a shallow clone of the command
            </summary>
            <returns>A shallow clone of the command</returns>
        </member>
        <member name="T:SharpCraft.Commands.BaseCommand">
            <summary>
            base class for commands
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BaseCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>The command as a string</returns>
        </member>
        <member name="M:SharpCraft.Commands.BaseCommand.ShallowClone">
            <summary>
            Returns a shallow clone of this command
            </summary>
            <returns>A shallow clone of this command</returns>
        </member>
        <member name="T:SharpCraft.Commands.BossBarAddCommand">
            <summary>
            Command which adds the given boss bar to the world
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarAddCommand.#ctor(SharpCraft.BossBar,SharpCraft.BaseJsonText)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.BossBarAddCommand"/>
            </summary>
            <param name="bossBar">The boss bar to add</param>
            <param name="name">The shown name of the boss bar</param>
        </member>
        <member name="P:SharpCraft.Commands.BossBarAddCommand.BossBar">
            <summary>
            The boss bar to add
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.BossBarAddCommand.Name">
            <summary>
            The shown name of the boss bar
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarAddCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>bossbar add [Bossbar] [Name]</returns>
        </member>
        <member name="T:SharpCraft.Commands.BossBarGetValueCommand">
            <summary>
            Command which gets a value from a boss bar
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarGetValueCommand.#ctor(SharpCraft.BossBar,SharpCraft.ID.BossBarValue)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.BossBarGetValueCommand"/>
            </summary>
            <param name="bossBar">The boss bar to the value from</param>
            <param name="getValue">The value to get from the boss bar</param>
        </member>
        <member name="P:SharpCraft.Commands.BossBarGetValueCommand.BossBar">
            <summary>
            The boss bar to the value from
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.BossBarGetValueCommand.GetValue">
            <summary>
            The value to get from the boss bar
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarGetValueCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>bossbar add [Bossbar] [Name]</returns>
        </member>
        <member name="T:SharpCraft.Commands.BossBarGetAllCommand">
            <summary>
            Command which returns the amount of existing boss bars
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarGetAllCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>bossbar list</returns>
        </member>
        <member name="T:SharpCraft.Commands.BossBarRemoveCommand">
            <summary>
            Command which removes a boss bar
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarRemoveCommand.#ctor(SharpCraft.BossBar)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.BossBarRemoveCommand"/>
            </summary>
            <param name="bossBar">The boss bar to remove</param>
        </member>
        <member name="P:SharpCraft.Commands.BossBarRemoveCommand.BossBar">
            <summary>
            The boss bar to remove
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarRemoveCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>bossbar remove [Bossbar]</returns>
        </member>
        <member name="T:SharpCraft.Commands.BossBarChangeColorCommand">
            <summary>
            Command which changes a boss bar's color
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarChangeColorCommand.#ctor(SharpCraft.BossBar,SharpCraft.ID.BossBarColor)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.BossBarGetValueCommand"/>
            </summary>
            <param name="bossBar">The boss bar to change color on</param>
            <param name="color">The new color for the bar</param>
        </member>
        <member name="P:SharpCraft.Commands.BossBarChangeColorCommand.BossBar">
            <summary>
            The boss bar to change color on
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.BossBarChangeColorCommand.Color">
            <summary>
            The new color for the bar
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarChangeColorCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>bossbar set [Bossbar] color [Color]</returns>
        </member>
        <member name="T:SharpCraft.Commands.BossBarChangeMaxValueCommand">
            <summary>
            Command which changes a boss bar's max value
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarChangeMaxValueCommand.#ctor(SharpCraft.BossBar,System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.BossBarChangeMaxValueCommand"/>
            </summary>
            <param name="bossBar">The boss bar to change max value on</param>
            <param name="maxValue">The new max value for the bar</param>
        </member>
        <member name="P:SharpCraft.Commands.BossBarChangeMaxValueCommand.BossBar">
            <summary>
            The boss bar to change max value on
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.BossBarChangeMaxValueCommand.MaxValue">
            <summary>
            The new max value for the bar
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarChangeMaxValueCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>bossbar set [Bossbar] max [MaxValue]</returns>
        </member>
        <member name="T:SharpCraft.Commands.BossBarChangeValueCommand">
            <summary>
            Command which changes a boss bar's value
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarChangeValueCommand.#ctor(SharpCraft.BossBar,System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.BossBarChangeValueCommand"/>
            </summary>
            <param name="bossBar">The boss bar to change value on</param>
            <param name="value">The new value for the bar</param>
        </member>
        <member name="P:SharpCraft.Commands.BossBarChangeValueCommand.BossBar">
            <summary>
            The boss bar to change value on
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.BossBarChangeValueCommand.Value">
            <summary>
            The new value for the bar
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarChangeValueCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>bossbar set [Bossbar] value [Value]</returns>
        </member>
        <member name="T:SharpCraft.Commands.BossBarChangeNameCommand">
            <summary>
            Command which changes a boss bar's name
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarChangeNameCommand.#ctor(SharpCraft.BossBar,SharpCraft.BaseJsonText)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.BossBarChangeNameCommand"/>
            </summary>
            <param name="bossBar">The boss bar to change the name of</param>
            <param name="name">The name the bar should change to</param>
        </member>
        <member name="P:SharpCraft.Commands.BossBarChangeNameCommand.BossBar">
            <summary>
            The boss bar to change the name of
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.BossBarChangeNameCommand.Name">
            <summary>
            The name the bar should change to
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarChangeNameCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>bossbar set [Bossbar] name [Name]</returns>
        </member>
        <member name="T:SharpCraft.Commands.BossBarChangePlayersCommand">
            <summary>
            Command which changes who can see a boss bar
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarChangePlayersCommand.#ctor(SharpCraft.BossBar,SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.BossBarChangePlayersCommand"/>
            </summary>
            <param name="bossBar">The boss bar to change the name of</param>
            <param name="selector">Selector selecting players who should see the bar</param>
        </member>
        <member name="P:SharpCraft.Commands.BossBarChangePlayersCommand.BossBar">
            <summary>
            The boss bar to change the name of
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.BossBarChangePlayersCommand.Selector">
            <summary>
            Selector selecting players who should see the bar
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarChangePlayersCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>bossbar set [Bossbar] players [Selector]</returns>
        </member>
        <member name="T:SharpCraft.Commands.BossBarChangeStyleCommand">
            <summary>
            Command which changes a boss bar's style
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarChangeStyleCommand.#ctor(SharpCraft.BossBar,SharpCraft.ID.BossBarStyle)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.BossBarGetValueCommand"/>
            </summary>
            <param name="bossBar">The boss bar to change style on</param>
            <param name="style">The new style for the bar</param>
        </member>
        <member name="P:SharpCraft.Commands.BossBarChangeStyleCommand.BossBar">
            <summary>
            The boss bar to change style on
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.BossBarChangeStyleCommand.Style">
            <summary>
            The new style for the bar
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarChangeStyleCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>bossbar set [Bossbar] style [Style]</returns>
        </member>
        <member name="T:SharpCraft.Commands.BossBarChangeVisibilityCommand">
            <summary>
            Command which changes a boss bar's style
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarChangeVisibilityCommand.#ctor(SharpCraft.BossBar,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.BossBarChangeVisibilityCommand"/>
            </summary>
            <param name="bossBar">The boss bar to change visibility on</param>
            <param name="visible">The new visibility for the bar</param>
        </member>
        <member name="P:SharpCraft.Commands.BossBarChangeVisibilityCommand.BossBar">
            <summary>
            The boss bar to change visibility on
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.BossBarChangeVisibilityCommand.Visible">
            <summary>
            The new visibility for the bar
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BossBarChangeVisibilityCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>bossbar set [Bossbar] visible [Visible]</returns>
        </member>
        <member name="T:SharpCraft.Commands.CloneCommand">
            <summary>
            Command which clones blocks from one place to another
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.CloneCommand.#ctor(SharpCraft.Vector,SharpCraft.Vector,SharpCraft.Vector,System.Boolean,SharpCraft.ID.BlockCloneWay)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.CloneCommand"/>
            </summary>
            <param name="corner1">One of the corners of the structure to clone</param>
            <param name="corner2">The oppesite corners of the structure to clone</param>
            <param name="location">The location to clone the structure to</param>
            <param name="masked">True if air blocks shouldn't be cloned. False if air blocks should be cloned</param>
            <param name="mode">The way to clone the structure</param>
        </member>
        <member name="P:SharpCraft.Commands.CloneCommand.Corner1">
            <summary>
            One of the corners of the structure to clone
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.CloneCommand.Corner2">
            <summary>
            The oppesite corners of the structure to clone
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.CloneCommand.Location">
            <summary>
            The location to clone the structure to
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.CloneCommand.Masked">
            <summary>
            True if air blocks shouldn't be cloned. False if air blocks should be cloned
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.CloneCommand.Mode">
            <summary>
            The way to clone the structure
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.CloneCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>clone [Corner1] [Corner2] [Location] [Masked] [Mode]</returns>
        </member>
        <member name="T:SharpCraft.Commands.FilteredCloneCommand">
            <summary>
            Command which copies specific blocks from one location to another
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.FilteredCloneCommand.#ctor(SharpCraft.Vector,SharpCraft.Vector,SharpCraft.Vector,SharpCraft.Block,SharpCraft.ID.BlockCloneWay)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.FilteredCloneCommand"/>
            </summary>
            <param name="corner1">One of the corners of the structure to clone</param>
            <param name="corner2">The oppesite corners of the structure to clone</param>
            <param name="location">The location to clone the structure to</param>
            <param name="filterBlock">The block to clone from one place to another</param>
            <param name="mode">The way to clone the structure</param>
        </member>
        <member name="P:SharpCraft.Commands.FilteredCloneCommand.Corner1">
            <summary>
            One of the corners of the structure to clone
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.FilteredCloneCommand.Corner2">
            <summary>
            The oppesite corners of the structure to clone
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.FilteredCloneCommand.Location">
            <summary>
            The location to clone the structure to
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.FilteredCloneCommand.FilterBlock">
            <summary>
            The block to clone from one place to another
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.FilteredCloneCommand.Mode">
            <summary>
            The way to clone the structure
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.FilteredCloneCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>clone [Corner1] [Corner2] [Location] filtered [FilterBlock] [Mode]</returns>
        </member>
        <member name="T:SharpCraft.Commands.DataGetCommand">
            <summary>
            Command for getting data out of a place
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DataGetCommand.#ctor(SharpCraft.IDataLocation,System.Nullable{System.Double})">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.DataGetCommand"/>
            </summary>
            <param name="dataLocation">The place to get the data from</param>
            <param name="scale">A number to multiply the data with</param>
        </member>
        <member name="P:SharpCraft.Commands.DataGetCommand.DataLocation">
            <summary>
            The place to get the data from
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.DataGetCommand.Scale">
            <summary>
            A number to multiply the data with
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DataGetCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>data get [DataLocation] [Scale]</returns>
        </member>
        <member name="T:SharpCraft.Commands.DataMergeStorageCommand">
            <summary>
            Command for merging data in a storage
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DataMergeStorageCommand.#ctor(SharpCraft.Storage,SharpCraft.Data.SimpleDataHolder)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.DataMergeStorageCommand"/>
            </summary>
            <param name="storage">The storage to add the data to</param>
            <param name="data">The data to merge</param>
        </member>
        <member name="P:SharpCraft.Commands.DataMergeStorageCommand.Storage">
            <summary>
            The storage to add the data to
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.DataMergeStorageCommand.Data">
            <summary>
            The data to merge
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DataMergeStorageCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>data merge block [Coordinates] [Data]</returns>
        </member>
        <member name="T:SharpCraft.Commands.DataMergeBlockCommand">
            <summary>
            Command for merging data on a block
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DataMergeBlockCommand.#ctor(SharpCraft.Vector,SharpCraft.Data.SimpleDataHolder)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.DataMergeBlockCommand"/>
            </summary>
            <param name="coordinates">The location of the block holding the data</param>
            <param name="data">The data to merge</param>
        </member>
        <member name="P:SharpCraft.Commands.DataMergeBlockCommand.Coordinates">
            <summary>
            The location of the block holding the data
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.DataMergeBlockCommand.Data">
            <summary>
            The data to merge
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DataMergeBlockCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>data merge block [Coordinates] [Data]</returns>
        </member>
        <member name="T:SharpCraft.Commands.DataMergeEntityCommand">
            <summary>
            Command for merging data on a block
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DataMergeEntityCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.Data.SimpleDataHolder)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.DataMergeEntityCommand"/>
            </summary>
            <param name="selector">Selector selecting the entity holding the data</param>
            <param name="data">The data to merge</param>
        </member>
        <member name="P:SharpCraft.Commands.DataMergeEntityCommand.Selector">
            <summary>
            Selector selecting the entity holding the data
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.DataMergeEntityCommand.Data">
            <summary>
            The data to merge
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DataMergeEntityCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>data merge entity [Selector] [Data]</returns>
        </member>
        <member name="T:SharpCraft.Commands.DataModifyWithLocationCommand">
            <summary>
            Command used for modifying data at a location with data from another location
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DataModifyWithLocationCommand.#ctor(SharpCraft.IDataLocation,SharpCraft.ID.EntityDataModifierType,SharpCraft.IDataLocation)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.DataModifyWithLocationCommand"/>
            </summary>
            <param name="dataLocation">The location of the data to modify</param>
            <param name="modifyType">The way to modify the data</param>
            <param name="fromDataLocation">The location to get the data used for modifying</param>
        </member>
        <member name="P:SharpCraft.Commands.DataModifyWithLocationCommand.DataLocation">
            <summary>
            The location of the data to modify
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.DataModifyWithLocationCommand.FromDataLocation">
            <summary>
            The location to get the data used for modifying
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.DataModifyWithLocationCommand.ModifyType">
            <summary>
            The way to modify the data
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DataModifyWithLocationCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>data modify [DataLocation] [ModifyType] from [FromDataLocation]</returns>
        </member>
        <member name="T:SharpCraft.Commands.DataModifyWithDataCommand">
            <summary>
            Command used for modifying data at a location with given data
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DataModifyWithDataCommand.#ctor(SharpCraft.IDataLocation,SharpCraft.ID.EntityDataModifierType,SharpCraft.Data.SimpleDataHolder)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.DataModifyWithDataCommand"/>
            </summary>
            <param name="dataLocation">The location of the data to modify</param>
            <param name="modifyType">The way to modify the data</param>
            <param name="data">The data to modify with</param>
        </member>
        <member name="P:SharpCraft.Commands.DataModifyWithDataCommand.DataLocation">
            <summary>
            The location of the data to modify
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.DataModifyWithDataCommand.Data">
            <summary>
            The data to modify with
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.DataModifyWithDataCommand.ModifyType">
            <summary>
            The way to modify the data
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DataModifyWithDataCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>data modify [DataLocation] [ModifyType] value [Data]</returns>
        </member>
        <member name="T:SharpCraft.Commands.DataModifyInsertLocationCommand">
            <summary>
            Command used for modifying data at a location at an index with data from another location
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DataModifyInsertLocationCommand.#ctor(SharpCraft.IDataLocation,System.Int32,SharpCraft.IDataLocation)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.DataModifyInsertLocationCommand"/>
            </summary>
            <param name="dataLocation">The location of the data to modify</param>
            <param name="index">The index of the data to change</param>
            <param name="fromDataLocation">The location to get the data used for modifying</param>
        </member>
        <member name="P:SharpCraft.Commands.DataModifyInsertLocationCommand.DataLocation">
            <summary>
            The location of the data to modify
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.DataModifyInsertLocationCommand.FromDataLocation">
            <summary>
            The location to get the data used for modifying
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.DataModifyInsertLocationCommand.Index">
            <summary>
            The index of the data to change
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DataModifyInsertLocationCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>data modify [DataLocation] insert [Index] from [FromDataLocation]</returns>
        </member>
        <member name="T:SharpCraft.Commands.DataModifyInsertDataCommand">
            <summary>
            Command used for modifying data at a location at an index with given data
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DataModifyInsertDataCommand.#ctor(SharpCraft.IDataLocation,System.Int32,SharpCraft.Data.SimpleDataHolder)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.DataModifyInsertDataCommand"/>
            </summary>
            <param name="dataLocation">The location of the data to modify</param>
            <param name="index">The index of the data to change</param>
            <param name="data">The data to modify with</param>
        </member>
        <member name="P:SharpCraft.Commands.DataModifyInsertDataCommand.DataLocation">
            <summary>
            The location of the data to modify
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.DataModifyInsertDataCommand.Data">
            <summary>
            The data to modify with
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.DataModifyInsertDataCommand.Index">
            <summary>
            The index of the data to change
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DataModifyInsertDataCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>data modify [DataLocation] insert [Index] from [FromDataLocation]</returns>
        </member>
        <member name="T:SharpCraft.Commands.DataDeleteCommand">
            <summary>
            Command used for deleting data at a given location
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DataDeleteCommand.#ctor(SharpCraft.IDataLocation)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.DataDeleteCommand"/>
            </summary>
            <param name="dataLocation">The location of the data to remove</param>
        </member>
        <member name="P:SharpCraft.Commands.DataDeleteCommand.DataLocation">
            <summary>
            The location of the data to remove
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DataDeleteCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>data remove [DataLocation]</returns>
        </member>
        <member name="T:SharpCraft.Commands.DatapackDisableCommand">
            <summary>
            Command which disables a datapack
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DatapackDisableCommand.#ctor(SharpCraft.BaseDatapack)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.DatapackDisableCommand"/>
            </summary>
            <param name="datapack">The datapack to disable</param>
        </member>
        <member name="P:SharpCraft.Commands.DatapackDisableCommand.Datapack">
            <summary>
            The datapack to disable
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DatapackDisableCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>datapack disable [Datapack]</returns>
        </member>
        <member name="T:SharpCraft.Commands.DatapackEnableCommand">
            <summary>
            Command which enables a datapack
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DatapackEnableCommand.#ctor(SharpCraft.BaseDatapack,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.DatapackEnableCommand"/>
            </summary>
            <param name="datapack">The datapack to disable</param>
            <param name="loadFirst">True if the datapack should be loaded before others. False if it should be loaded last</param>
        </member>
        <member name="P:SharpCraft.Commands.DatapackEnableCommand.Datapack">
            <summary>
            The datapack to enable
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.DatapackEnableCommand.LoadFirst">
            <summary>
            True if the datapack should be loaded before others. False if it should be loaded last
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DatapackEnableCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>datapack enable [Datapack] [LoadFirst]</returns>
        </member>
        <member name="T:SharpCraft.Commands.DatapackEnableAtCommand">
            <summary>
            Command which enables a datapack before or after another datapack
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DatapackEnableAtCommand.#ctor(SharpCraft.BaseDatapack,System.Boolean,SharpCraft.BaseDatapack)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.DatapackEnableAtCommand"/>
            </summary>
            <param name="datapack">The datapack to disable</param>
            <param name="loadAfter">True if the datapack should be loaded before others. False if it should be loaded last</param>
            <param name="otherDatapack">The datapack to enable relative to</param>
        </member>
        <member name="P:SharpCraft.Commands.DatapackEnableAtCommand.Datapack">
            <summary>
            The datapack to enable
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.DatapackEnableAtCommand.LoadAfter">
            <summary>
            True if the datapack should be loaded before others. False if it should be loaded last
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.DatapackEnableAtCommand.OtherDatapack">
            <summary>
            The datapack to enable relative to
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DatapackEnableAtCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>datapack enable [Datapack] [LoadAfter] [OtherDatapack]</returns>
        </member>
        <member name="T:SharpCraft.Commands.DatapackListCommand">
            <summary>
            Command which returns a list of datapacks
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DatapackListCommand.#ctor(SharpCraft.ID.DatapackList)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.DatapackListCommand"/>
            </summary>
            <param name="list">The list to get</param>
        </member>
        <member name="P:SharpCraft.Commands.DatapackListCommand.List">
            <summary>
            The list to get
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DatapackListCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>datapack list [List]</returns>
        </member>
        <member name="T:SharpCraft.Commands.EffectGiveCommand">
            <summary>
            Command for giving entities an effect
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.EffectGiveCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.ID.Effect,System.Int32,System.Byte,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.EffectGiveCommand"/>
            </summary>
            <param name="selector">Selector selecting entities to give the effect to</param>
            <param name="effect">The effect to give</param>
            <param name="seconds">The amount of seconds the entities will have the effect for</param>
            <param name="amplifier">The amplifier of the effect</param>
            <param name="hideParticles">If the effect shouldn't show particles</param>
        </member>
        <member name="P:SharpCraft.Commands.EffectGiveCommand.Selector">
            <summary>
            Selector selecting entities to give the effect to
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.EffectGiveCommand.Seconds">
            <summary>
            The amount of seconds the entities will have the effect for
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.EffectGiveCommand.Amplifier">
            <summary>
            The amplifier of the effect
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.EffectGiveCommand.Effect">
            <summary>
            The effect to give
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.EffectGiveCommand.HideParticles">
            <summary>
            If the effect shouldn't show particles
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.EffectGiveCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>effect give [Selector] [Effect] [Seconds] [Amplifier] [HideParticles]</returns>
        </member>
        <member name="T:SharpCraft.Commands.EffectClearCommand">
            <summary>
            Command which removes one or more effects from some entities
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.EffectClearCommand.#ctor(SharpCraft.BaseSelector,System.Nullable{SharpCraft.ID.Effect})">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.EffectClearCommand"/>
            </summary>
            <param name="selector">Selector selecting the entities whose effects to clear</param>
            <param name="effect">The effect to clear. Set to null to clear all effects</param>
        </member>
        <member name="P:SharpCraft.Commands.EffectClearCommand.Selector">
            <summary>
            Selector selecting the entities whose effects to clear
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.EffectClearCommand.Effect">
            <summary>
            The effect to clear. Set to null to clear all effects
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.EffectClearCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>effect clear [Selector] [Effect]</returns>
        </member>
        <member name="T:SharpCraft.Commands.BaseExecuteCommand">
            <summary>
            Base class for execute commands
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BaseExecuteCommand.GetCommandString">
            <summary>
            Returns the execute command string
            </summary>
            <returns>The execute command string</returns>
        </member>
        <member name="P:SharpCraft.Commands.BaseExecuteCommand.ExecuteCommand">
            <summary>
            The command this execute command is going to execute
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.BaseExecuteCommand.DoneChanging">
            <summary>
            True if this execute command is done changing commands.
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BaseExecuteCommand.GetExecuteCommandPart">
            <summary>
            Returns the <see cref="M:SharpCraft.Commands.BaseExecuteCommand.GetCommandString"/> without the execute part at the beginning
            </summary>
            <returns>The command without the execute part at the beginning</returns>
        </member>
        <member name="M:SharpCraft.Commands.BaseExecuteCommand.ChangeCommand(SharpCraft.Commands.ICommand)">
            <summary>
            Adds the given command to the end of the execute line
            </summary>
            <param name="command">The command to add</param>
            <returns>Information about the adding</returns>
        </member>
        <member name="M:SharpCraft.Commands.BaseExecuteCommand.HasEndCommand">
            <summary>
            Returns true if the command at the end of the execute chain isn't an execute command. False if it is
            </summary>
            <returns>True if the command at the end of the execute chain isn't an execute command. False if it is</returns>
        </member>
        <member name="M:SharpCraft.Commands.BaseExecuteCommand.AddCommand(SharpCraft.Commands.ICommand)">
            <summary>
            Adds the given command to the execute chain
            </summary>
            <param name="command">The command to add</param>
            <returns>This execute command</returns>
        </member>
        <member name="M:SharpCraft.Commands.BaseExecuteCommand.GetExecutePart">
            <summary>
            Returns the command part of the execute command
            </summary>
            <returns>The command part of the execute command</returns>
            <remarks>
            eg: with the "/execute as [selector] run ..." command this would return the "as [selector]" part
            </remarks>
        </member>
        <member name="M:SharpCraft.Commands.BaseExecuteCommand.ShallowClone">
            <summary>
            Returns a shallow clone of this command
            </summary>
            <returns>A shallow clone of this command</returns>
        </member>
        <member name="T:SharpCraft.Commands.BaseExecuteIfCommand">
            <summary>
            base class for execute if/unless commands
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BaseExecuteIfCommand.#ctor(System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.BaseExecuteCommand"/>
            </summary>
            <param name="executeIf">True to use execute if and false to use execute unless the given thing is true</param>
        </member>
        <member name="P:SharpCraft.Commands.BaseExecuteIfCommand.ExecuteIf">
            <summary>
            True to use execute if and false to use execute unless the given thing is true
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BaseExecuteIfCommand.GetExecutePart">
            <summary>
            Returns the command string without the "execute" part at the beginning
            </summary>
            <returns>The command string without the "execute" part at the beginning</returns>
        </member>
        <member name="M:SharpCraft.Commands.BaseExecuteIfCommand.GetCheckPart">
            <summary>
            Returns the command part of the execute command without the if/unless part
            </summary>
            <returns>The command part of the execute command without the if/unless part</returns>
            <remarks>
            eg: with the "/execute if entity [selector] run ..." command this would return the "entity [selector]" part
            </remarks>
        </member>
        <member name="T:SharpCraft.Commands.BaseExecuteStoreCommand">
            <summary>
            base class for execute store commands
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BaseExecuteStoreCommand.#ctor(System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.BaseExecuteStoreCommand"/>
            </summary>
            <param name="storeResult">True if it should store the result. False if it should store success</param>
        </member>
        <member name="P:SharpCraft.Commands.BaseExecuteStoreCommand.StoreResult">
            <summary>
            True if it should store the result. False if it should store success
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.BaseExecuteStoreCommand.GetExecutePart">
            <summary>
            Returns the command string without the "execute" part at the beginning
            </summary>
            <returns>The command string without the "execute" part at the beginning</returns>
        </member>
        <member name="M:SharpCraft.Commands.BaseExecuteStoreCommand.GetStorePart">
            <summary>
            Returns the command part of the execute command without the store result/success part
            </summary>
            <returns>The command part of the execute command without the result/success part</returns>
            <remarks>
            eg: with the "/execute store score [selector] [objective] run ..." command this would return the "score [selector] [objective]" part
            </remarks>
        </member>
        <member name="T:SharpCraft.Commands.ExecuteAlign">
            <summary>
            Execute command used for aligning "execute at coordinates" to the exact coordinates of the block the the execute at coordinates are refering to
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteAlign.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteAlign"/> command
            </summary>
            <param name="alignX">If it should align in the x direction</param>
            <param name="alignY">If it should align in the y direction</param>
            <param name="alignZ">If it should align in the z direction</param>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteAlign.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteAlign"/> command which aligns in all directions
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteAlign.AlignX">
            <summary>
            If it should align in the x direction
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteAlign.AlignY">
            <summary>
            If it should align in the y direction
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteAlign.AlignZ">
            <summary>
            If it should align in the z direction
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteAlign.GetExecutePart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>align [xyz]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecuteAnchored">
            <summary>
            Execute command used for changing where the origin used by coordinates
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteAnchored.#ctor(SharpCraft.ID.FacingAnchor)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteAnchored"/> command
            </summary>
            <param name="anchor">The origin used by local coordinates</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteAnchored.Anchor">
            <summary>
            The origin used by local coordinates
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteAnchored.GetExecutePart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>anchored eyes/feet</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecuteAs">
            <summary>
            Execute command for changing the entity who is executing the command
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteAs.#ctor(SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteAs"/> command
            </summary>
            <param name="selector">The selector for selecting entities to run the command as</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteAs.Selector">
            <summary>
            The selector for selecting entities to run the command as
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteAs.GetExecutePart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>as [selector]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecuteAt">
            <summary>
            Execute command for changing where and what direction the command is getting executed
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteAt.#ctor(SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteAt"/> command
            </summary>
            <param name="selector">The selector for selecting entities to run the command at</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteAt.Selector">
            <summary>
            The selector for selecting entities to run the command as
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteAt.GetExecutePart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>at [selector]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecuteDimension">
            <summary>
            Execute command used for changing the dimension the command is being executed in
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteDimension.#ctor(SharpCraft.ID.Dimension)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteDimension"/> command
            </summary>
            <param name="dimension">The dimension the command should be executed in</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteDimension.Dimension">
            <summary>
            The dimension the command should be executed in
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteDimension.GetExecutePart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>in [Dimension]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecuteFacingCoord">
            <summary>
            Execute command for changing the rotation the command is being executed in
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteFacingCoord.#ctor(SharpCraft.Vector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteFacingCoord"/> command
            </summary>
            <param name="coordinates">The coordinates the command should execute in the direction of</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteFacingCoord.Coordinates">
            <summary>
            The coordinates the command should execute in the direction of
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteFacingCoord.GetExecutePart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>facing [Coordinates]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecuteFacingEntity">
            <summary>
            Execute command for changing the rotation the command is being executed in
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteFacingEntity.#ctor(SharpCraft.BaseSelector,SharpCraft.ID.FacingAnchor)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteFacingEntity"/> command
            </summary>
            <param name="selector">Selector for selecting entities the command should execute in the direction of</param>
            <param name="facingPart">The part of the entities the command should face</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteFacingEntity.Selector">
            <summary>
            Selector for selecting entities the command should execute in the direction of
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteFacingEntity.FacingPart">
            <summary>
            The part of the entities the command should face
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteFacingEntity.GetExecutePart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>facing entity [Selector] [FacingPart]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecuteIfBlock">
            <summary>
            Execute command which only executes the following command if the block at the location is the correct block
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteIfBlock.#ctor(SharpCraft.Vector,SharpCraft.Block,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteIfBlock"/> command
            </summary>
            <param name="coordinates">The coordinates of the block to check for</param>
            <param name="block">The block to check for</param>
            <param name="executeIf">True to use execute if and false to use execute unless the given thing is true</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteIfBlock.Coordinates">
            <summary>
            The coordinates of the block to check for
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteIfBlock.Block">
            <summary>
            The block to check for
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteIfBlock.GetCheckPart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>block [Coordinates] [Block]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecuteIfBlocks">
            <summary>
            Execute command which only executes the following command if the blocks at one location are the same as the blocks in another location
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteIfBlocks.#ctor(SharpCraft.Vector,SharpCraft.Vector,SharpCraft.Vector,System.Boolean,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteIfBlocks"/>
            </summary>
            <param name="corner1">One of the corners of the structure to check for</param>
            <param name="corner2">The oppesite corners of the structure to check for</param>
            <param name="location">The location to look for the structure</param>
            <param name="ignoreAir">If air blocks should be ignored when checking</param>
            <param name="executeIf">True to use execute if and false to use execute unless the given thing is true</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteIfBlocks.Corner1">
            <summary>
            One of the corners of the structure to check for
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteIfBlocks.Corner2">
            <summary>
            The oppesite corners of the structure to check for
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteIfBlocks.Location">
            <summary>
            The location to look for the structure
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteIfBlocks.IgnoreAir">
            <summary>
            If air blocks should be ignored when checking
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteIfBlocks.GetCheckPart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>blocks [Corner1] [Corner2] [Location] [IgnoreAir]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecuteIfData">
            <summary>
            Execute command which only executes the following command if the datapath exists
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteIfData.#ctor(SharpCraft.IDataLocation,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteIfData"/> command
            </summary>
            <param name="executeIf">True to use execute if and false to use execute unless the given thing is true</param>
            <param name="dataLocation">The location and datapath to check for</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteIfData.DataLocation">
            <summary>
            The location and datapath to check for
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteIfData.GetCheckPart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>data [DataLocation]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecuteIfEntity">
            <summary>
            Execute command which only executes the following command if the selector selects an entity
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteIfEntity.#ctor(SharpCraft.BaseSelector,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteIfEntity"/> command
            </summary>
            <param name="selector">Selector used to check if one or more entities exists</param>
            <param name="executeIf">True to use execute if and false to use execute unless the given thing is true</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteIfEntity.Selector">
            <summary>
            Selector used to check if one or more entities exists
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteIfEntity.GetCheckPart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>entity [Selector]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecuteIfPredicate">
            <summary>
            Execute command which only executes the following command if predicate is successfull
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteIfPredicate.#ctor(SharpCraft.IPredicate,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteIfPredicate"/> command
            </summary>
            <param name="predicate">The predicate to run</param>
            <param name="executeIf">True to use execute if and false to use execute unless the given thing is true</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteIfPredicate.Predicate">
            <summary>
            The predicate to run
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteIfPredicate.GetCheckPart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>predicate [Predicate]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecuteIfScoreMatches">
            <summary>
            Execute command which only executes the following command if the entity chosen by the selector has the datapath
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteIfScoreMatches.#ctor(SharpCraft.BaseSelector,SharpCraft.Objective,SharpCraft.MCRange,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteIfScoreMatches"/> command
            </summary>
            <param name="selector">Selector selecting the thing to get a score from</param>
            <param name="objective">The <see cref="T:SharpCraft.Objective"/> to get the score for <see cref="P:SharpCraft.Commands.ExecuteIfScoreMatches.Selector"/> from</param>
            <param name="range">The range the score should be inside</param>
            <param name="executeIf">True to use execute if and false to use execute unless the given thing is true</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteIfScoreMatches.Selector">
            <summary>
            Selector selecting the thing to get a score from
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteIfScoreMatches.Objective">
            <summary>
            The <see cref="T:SharpCraft.Objective"/> to get the score for <see cref="P:SharpCraft.Commands.ExecuteIfScoreMatches.Selector"/> from
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteIfScoreMatches.Range">
            <summary>
            The range the score should be inside
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteIfScoreMatches.GetCheckPart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>score [Selector] [Objective] matches [Range]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecuteIfScoreRelative">
            <summary>
            Execute command which only executes the following command if the entity chosen by the selector has the datapath
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteIfScoreRelative.#ctor(SharpCraft.BaseSelector,SharpCraft.Objective,SharpCraft.ID.IfScoreOperation,SharpCraft.BaseSelector,SharpCraft.Objective,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteIfScoreRelative"/> command
            </summary>
            <param name="selector1">Selector selecting the thing to get a score from</param>
            <param name="objective1">The <see cref="T:SharpCraft.Objective"/> to get the score for <see cref="F:SharpCraft.Commands.ExecuteIfScoreRelative.selector1"/> from</param>
            <param name="selector2">Selector selecting the thing to get a score from</param>
            <param name="objective2">The <see cref="T:SharpCraft.Objective"/> to get the score for <see cref="F:SharpCraft.Commands.ExecuteIfScoreRelative.selector2"/> from</param>
            <param name="operator">How the scores should be relative to each other</param>
            <param name="executeIf">True to use execute if and false to use execute unless the given thing is true</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteIfScoreRelative.Selector1">
            <summary>
            Selector selecting the thing to get a score from
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteIfScoreRelative.Objective1">
            <summary>
            The <see cref="T:SharpCraft.Objective"/> to get the score for <see cref="P:SharpCraft.Commands.ExecuteIfScoreRelative.Selector1"/> from
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteIfScoreRelative.Selector2">
            <summary>
            Selector selecting the thing to get a score from
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteIfScoreRelative.Objective2">
            <summary>
            The <see cref="T:SharpCraft.Objective"/> to get the score for <see cref="P:SharpCraft.Commands.ExecuteIfScoreRelative.Selector2"/> from
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteIfScoreRelative.Operator">
            <summary>
            How the scores should be relative to each other
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteIfScoreRelative.GetCheckPart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>score [Selector1] [Objective1] [Operator] [Selector2] [Objective2]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecutePosition">
            <summary>
            Execute command for changing the rotation the command is using when being executed
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecutePosition.#ctor(SharpCraft.Vector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecutePosition"/> command
            </summary>
            <param name="coordinates">The position the command should be executed at</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecutePosition.Coordinates">
            <summary>
            The position the command should be executed at
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecutePosition.GetExecutePart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>positioned [rotation]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecutePositionedAs">
            <summary>
            Execute command for changing the position the command is using when being executed
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecutePositionedAs.#ctor(SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecutePositionedAs"/> command
            </summary>
            <param name="selector">The selector for selecting the entity whose position to use for executing</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecutePositionedAs.Selector">
            <summary>
            The selector for selecting the entity whose position to use for executing
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecutePositionedAs.GetExecutePart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>positioned as [selector]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecuteRotated">
            <summary>
            Execute command for changing the rotation the command is using when being executed
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteRotated.#ctor(SharpCraft.Rotation)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteRotated"/> command
            </summary>
            <param name="rotation">The rotation the command should be executed in</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteRotated.Rotation">
            <summary>
            The rotation the command should be executed in
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteRotated.GetExecutePart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>rotated [rotation]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecuteRotatedAs">
            <summary>
            Execute command for changing the rotation the command is using when being executed
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteRotatedAs.#ctor(SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteRotatedAs"/> command
            </summary>
            <param name="selector">The selector for selecting the entity whose rotation to use for executing</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteRotatedAs.Selector">
            <summary>
            The selector for selecting the entity whose rotation to use for executing
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteRotatedAs.GetExecutePart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>rotated as [selector]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecuteStoreBossbar">
            <summary>
            Execute command used for storing the result of the command
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteStoreBossbar.#ctor(SharpCraft.BossBar,System.Boolean,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteStoreBossbar"/> command
            </summary>
            <param name="bossbar">The <see cref="T:SharpCraft.BossBar"/> to store the result in</param>
            <param name="storeAsValue">True if it should store it as the bossbar's value. False if it should store it as it's max value</param>
            <param name="storeResult">True if it should store the result. False if it should store success</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteStoreBossbar.Bossbar">
            <summary>
            The <see cref="T:SharpCraft.BossBar"/> to store the result in
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteStoreBossbar.StoreAsValue">
            <summary>
            True if it should store it as the bossbar's value. False if it should store it as it's max value
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteStoreBossbar.GetStorePart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>bossbar [Bossbar] [StoreAsValue]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecuteStoreData">
            <summary>
            Execute command used for storing the result of the command
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteStoreData.#ctor(SharpCraft.IDataLocation,SharpCraft.ID.StoreTypes,System.Double,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteStoreData"/> command
            </summary>
            <param name="dataLocation">The location to store the result in</param>
            <param name="valueType">The type of number to store the result as</param>
            <param name="scale">A number to multiply the result by before storing it</param>
            <param name="storeResult">True if it should store the result. False if it should store success</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteStoreData.ValueType">
            <summary>
            The type of number to store the result as
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteStoreData.Scale">
            <summary>
            A number to multiply the result by before storing it
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteStoreData.DataLocation">
            <summary>
            The location to store the result in
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteStoreData.GetStorePart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>[DataLocation.String] [ValueType] [Scale]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExecuteStoreScore">
            <summary>
            Execute command used for storing the result of the command
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteStoreScore.#ctor(SharpCraft.BaseSelector,SharpCraft.Objective,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExecuteStoreScore"/> command
            </summary>
            <param name="selector">The selector selecting the place to store the value at</param>
            <param name="objective">The <see cref="T:SharpCraft.Objective"/> to store the value in</param>
            <param name="storeResult">True if it should store the result. False if it should store success</param>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteStoreScore.Selector">
            <summary>
            The selector selecting the place to store the value at
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExecuteStoreScore.Objective">
            <summary>
            The <see cref="T:SharpCraft.Objective"/> to store the value in
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExecuteStoreScore.GetStorePart">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>score [Selector] [Objective]</returns>
        </member>
        <member name="T:SharpCraft.Commands.StopExecuteCommand">
            <summary>
            Command used for stopping an execute chain
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.StopExecuteCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>NULL</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExperienceModifyCommand">
            <summary>
            Command which changes one or more players' experience
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExperienceModifyCommand.#ctor(SharpCraft.BaseSelector,System.Boolean,SharpCraft.ID.AddSetModifier,System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExperienceModifyCommand"/>
            </summary>
            <param name="selector">Selector selecting the players whose experience to change</param>
            <param name="changeLevels">True if the players' levels should change. False if the players' points should change</param>
            <param name="modifier">The way to modify the players experience</param>
            <param name="value">The value to modify with</param>
        </member>
        <member name="P:SharpCraft.Commands.ExperienceModifyCommand.Selector">
            <summary>
            Selector selecting the players whose experience to change
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExperienceModifyCommand.ChangeLevels">
            <summary>
            True if the players' levels should change. False if the players' points should change
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExperienceModifyCommand.Modifier">
            <summary>
            The way to modify the players experience
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExperienceModifyCommand.Value">
            <summary>
            The value to modify with
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExperienceModifyCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>experience [Modifier] [Selector] [Value] [ChangeLevels]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ExperienceGetCommand">
            <summary>
            Command which gets a players experience
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExperienceGetCommand.#ctor(SharpCraft.BaseSelector,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ExperienceGetCommand"/>
            </summary>
            <param name="selector">Selector selecting the player whose experience to get</param>
            <param name="getLevels">True to get the player's levels. False to get the player's points</param>
        </member>
        <member name="P:SharpCraft.Commands.ExperienceGetCommand.Selector">
            <summary>
            Selector selecting the player whose experience to get
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ExperienceGetCommand.GetLevels">
            <summary>
            True to get the player's levels. False to get the player's points
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ExperienceGetCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>experience query [Selector] [ChangeLevels]</returns>
        </member>
        <member name="T:SharpCraft.Commands.FillCommand">
            <summary>
            Command which fills a square with a block
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.FillCommand.#ctor(SharpCraft.Vector,SharpCraft.Vector,SharpCraft.Block,SharpCraft.ID.BlockFill)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.FillCommand"/>
            </summary>
            <param name="corner1">One of the corners of the square to fill</param>
            <param name="corner2">The oppesite corner of the square to fill</param>
            <param name="block">The block to fill with</param>
            <param name="fillMode">The way to fill</param>
        </member>
        <member name="P:SharpCraft.Commands.FillCommand.Corner1">
            <summary>
            One of the corners of the square to fill
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.FillCommand.Corner2">
            <summary>
            The oppesite corner of the square to fill
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.FillCommand.Block">
            <summary>
            The block to fill with
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.FillCommand.FillMode">
            <summary>
            The way to fill
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.FillCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>fill [Corner1] [Corner2] [Block] [FillMode]</returns>
        </member>
        <member name="T:SharpCraft.Commands.FillReplaceCommand">
            <summary>
            Command which replaces all blocks in a square with another block
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.FillReplaceCommand.#ctor(SharpCraft.Vector,SharpCraft.Vector,SharpCraft.Block,SharpCraft.Block)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.FillReplaceCommand"/>
            </summary>
            <param name="corner1">One of the corners of the square to fill</param>
            <param name="corner2">The oppesite corner of the square to fill</param>
            <param name="block">The block to fill with</param>
            <param name="replaceBlock">The block to replace</param>
        </member>
        <member name="P:SharpCraft.Commands.FillReplaceCommand.Corner1">
            <summary>
            One of the corners of the square to fill
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.FillReplaceCommand.Corner2">
            <summary>
            The oppesite corner of the square to fill
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.FillReplaceCommand.Block">
            <summary>
            The block to fill with
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.FillReplaceCommand.ReplaceBlock">
            <summary>
            The block to replace
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.FillReplaceCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>fill [Corner1] [Corner2] [Block] replace [ReplaceBlock]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ForceloadChunkCommand">
            <summary>
            Command which adds/removes a forceloaded chunk
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ForceloadChunkCommand.#ctor(SharpCraft.Vector,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ForceloadChunkCommand"/>
            </summary>
            <param name="coordinates">A coordinate in the chunk to force load</param>
            <param name="addChunk">True if the chunk should be force loaded. False if the chunk shouldn't</param>
        </member>
        <member name="P:SharpCraft.Commands.ForceloadChunkCommand.Coordinates">
            <summary>
            A coordinate in the chunk to force load
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ForceloadChunkCommand.AddChunk">
            <summary>
            True if the chunk should be force loaded. False if the chunk shouldn't
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ForceloadChunkCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>forceload [AddChunk] [Coordinates]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ForceloadChunksCommand">
            <summary>
            Command which adds/removes a forceloaded chunk
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ForceloadChunksCommand.#ctor(SharpCraft.Vector,SharpCraft.Vector,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ForceloadChunksCommand"/>
            </summary>
            <param name="corner1">One of the corners of the square of chunks to forceload</param>
            <param name="corner2">The oppesite corner of the square of chunks to forceload</param>
            <param name="addChunk">True if the chunks should be force loaded. False if the chunks shouldn't</param>
        </member>
        <member name="P:SharpCraft.Commands.ForceloadChunksCommand.Corner1">
            <summary>
            One of the corners of the square of chunks to forceload
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ForceloadChunksCommand.Corner2">
            <summary>
            The oppesite corner of the square of chunks to forceload
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ForceloadChunksCommand.AddChunk">
            <summary>
            True if the chunks should be force loaded. False if the chunks shouldn't
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ForceloadChunksCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>forceload [AddChunk] [Corner1] [Corner2]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ForceloadRemoveAllCommand">
            <summary>
            Command which removes all force loaded chunks
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ForceloadRemoveAllCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>forceload remove all</returns>
        </member>
        <member name="T:SharpCraft.Commands.ForceloadQueryCommand">
            <summary>
            Command which checks how many chunks are loaded
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ForceloadQueryCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>forceload query</returns>
        </member>
        <member name="T:SharpCraft.Commands.ForceloadQueryChunkCommand">
            <summary>
            Command which checks if a chunk is force loaded
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ForceloadQueryChunkCommand.#ctor(SharpCraft.Vector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ForceloadQueryChunkCommand"/>
            </summary>
            <param name="coordinates">A coordinate in the chunk to check if loaded</param>
        </member>
        <member name="P:SharpCraft.Commands.ForceloadQueryChunkCommand.Coordinates">
            <summary>
            A coordinate in the chunk to check if loaded
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ForceloadQueryChunkCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>forceload query [Coordinates]</returns>
        </member>
        <member name="T:SharpCraft.Commands.GameruleSetBoolCommand">
            <summary>
            Command which changes one of the boolean gamerules
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.GameruleSetBoolCommand.#ctor(SharpCraft.ID.BoolGamerule,System.Nullable{System.Boolean})">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.GameruleSetBoolCommand"/>
            </summary>
            <param name="gamerule">The gamerule to change</param>
            <param name="changeTo">The value to change to. Leave null to not do a change.</param>
        </member>
        <member name="P:SharpCraft.Commands.GameruleSetBoolCommand.Gamerule">
            <summary>
            The gamerule to change
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.GameruleSetBoolCommand.ChangeTo">
            <summary>
            The value to change to. Leave null to not do a change.
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.GameruleSetBoolCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>gamerule [Gamerule] [ChangeTo]</returns>
        </member>
        <member name="T:SharpCraft.Commands.GameruleSetIntCommand">
            <summary>
            Command which changes one of the integer gamerules
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.GameruleSetIntCommand.#ctor(SharpCraft.ID.IntGamerule,System.Nullable{System.Int32})">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.GameruleSetIntCommand"/>
            </summary>
            <param name="gamerule">The gamerule to change</param>
            <param name="changeTo">The value to change to. Leave null to not do a change.</param>
        </member>
        <member name="P:SharpCraft.Commands.GameruleSetIntCommand.Gamerule">
            <summary>
            The gamerule to change
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.GameruleSetIntCommand.ChangeTo">
            <summary>
            The value to change to. Leave null to not do a change.
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.GameruleSetIntCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>gamerule [Gamerule] [ChangeTo]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ICommandChanger">
            <summary>
            Interface for commands which when added to a function file should be able to change commands added afterwards
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ICommandChanger.ChangeCommand(SharpCraft.Commands.ICommand)">
            <summary>
            Changes the given command
            </summary>
            <param name="command">The command to change</param>
            <returns>The changed command. Returning null will mean the command won't be changed anymore and also wont be added to the function</returns>
        </member>
        <member name="P:SharpCraft.Commands.ICommandChanger.DoneChanging">
            <summary>
            Bool marking if the <see cref="T:SharpCraft.Commands.ICommandChanger"/> is done chaning commands
            </summary>
        </member>
        <member name="T:SharpCraft.Commands.LootTargets">
            <summary>
            Targets for the loot command
            </summary>
        </member>
        <member name="T:SharpCraft.Commands.LootTargets.ILootTarget">
            <summary>
            Interface for the target to give the loot to
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootTargets.ILootTarget.GetTargetString">
            <summary>
            Returns a string for selecting the target
            </summary>
            <returns>A string for selecting the target</returns>
        </member>
        <member name="T:SharpCraft.Commands.LootTargets.SpawnTarget">
            <summary>
            Spawns the loot into the world
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootTargets.SpawnTarget.#ctor(SharpCraft.Vector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.LootTargets.SpawnTarget"/>
            </summary>
            <param name="coordinates">The coordinates to spawn the loot at</param>
        </member>
        <member name="P:SharpCraft.Commands.LootTargets.SpawnTarget.Coordinates">
            <summary>
            The coordinates to spawn the loot at
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootTargets.SpawnTarget.GetTargetString">
            <summary>
            Returns a string for selecting the target
            </summary>
            <returns>A string for selecting the target</returns>
        </member>
        <member name="T:SharpCraft.Commands.LootTargets.EntityTarget">
            <summary>
            Gives the loot to one or more entities
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootTargets.EntityTarget.#ctor(SharpCraft.BaseSelector,SharpCraft.Slots.IItemSlot)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.LootTargets.EntityTarget"/>
            </summary>
            <param name="selector">Selector selecting the entities who should be given the loot</param>
            <param name="slot">The slot to insert the loot into</param>
        </member>
        <member name="P:SharpCraft.Commands.LootTargets.EntityTarget.Selector">
            <summary>
            Selector selecting the entities who should be given the loot
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.LootTargets.EntityTarget.Slot">
            <summary>
            The slot to insert the loot into
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootTargets.EntityTarget.GetTargetString">
            <summary>
            Returns a string for selecting the target
            </summary>
            <returns>A string for selecting the target</returns>
        </member>
        <member name="T:SharpCraft.Commands.LootTargets.BlockTarget">
            <summary>
            Gives the loot to a block
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootTargets.BlockTarget.#ctor(SharpCraft.Vector,SharpCraft.Slots.IItemSlot)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.LootTargets.BlockTarget"/>
            </summary>
            <param name="coordinates">The coordinates to spawn the loot at</param>
            <param name="slot">The slot to insert the loot into</param>
        </member>
        <member name="P:SharpCraft.Commands.LootTargets.BlockTarget.Coordinates">
            <summary>
            The coordinates to spawn the loot at
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.LootTargets.BlockTarget.Slot">
            <summary>
            The slot to insert the loot into
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootTargets.BlockTarget.GetTargetString">
            <summary>
            Returns a string for selecting the target
            </summary>
            <returns>A string for selecting the target</returns>
        </member>
        <member name="T:SharpCraft.Commands.LootTargets.GiveTarget">
            <summary>
            Gives the loot to one or more players
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootTargets.GiveTarget.#ctor(SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.LootTargets.EntityTarget"/>
            </summary>
            <param name="selector">Selector selecting the players who should be given the loot</param>
        </member>
        <member name="P:SharpCraft.Commands.LootTargets.GiveTarget.Selector">
            <summary>
            Selector selecting the players who should be given the loot
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootTargets.GiveTarget.GetTargetString">
            <summary>
            Returns a string for selecting the target
            </summary>
            <returns>A string for selecting the target</returns>
        </member>
        <member name="T:SharpCraft.Commands.LootTargets.InsertTarget">
            <summary>
            Spawns the loot in a block
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootTargets.InsertTarget.#ctor(SharpCraft.Vector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.LootTargets.InsertTarget"/>
            </summary>
            <param name="coordinates">The coordinates to spawn the loot in</param>
        </member>
        <member name="P:SharpCraft.Commands.LootTargets.InsertTarget.Coordinates">
            <summary>
            The coordinates to spawn the loot in
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootTargets.InsertTarget.GetTargetString">
            <summary>
            Returns a string for selecting the target
            </summary>
            <returns>A string for selecting the target</returns>
        </member>
        <member name="T:SharpCraft.Commands.LootSources">
            <summary>
            Sources for the loot command
            </summary>
        </member>
        <member name="T:SharpCraft.Commands.LootSources.ILootSource">
            <summary>
            Interface for the source to get the loot from
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootSources.ILootSource.GetSourceString">
            <summary>
            Returns a string for selecting the source
            </summary>
            <returns>A string for selecting the source</returns>
        </member>
        <member name="T:SharpCraft.Commands.LootSources.FishHandSource">
            <summary>
            Gets loot like it was gotten from fishing using an item an entity is holding
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootSources.FishHandSource.#ctor(SharpCraft.ILootTable,SharpCraft.Vector,System.Boolean)">
            <summary>
            Intailizes a new <see cref="T:SharpCraft.Commands.LootSources.FishHandSource"/>
            </summary>
            <param name="loottable">The loot table the "fish" is coming from</param>
            <param name="fishLocation">The location the fish was caught</param>
            <param name="mainHand">True if the fish was caught with the executing entity's mainhand. False if with off hand</param>
        </member>
        <member name="P:SharpCraft.Commands.LootSources.FishHandSource.Loottable">
            <summary>
            The loot table the "fish" is coming from
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.LootSources.FishHandSource.FishLocation">
            <summary>
            The location the fish was caught
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.LootSources.FishHandSource.MainHand">
            <summary>
            True if the fish was caught with the executing entity's mainhand. False if with off hand
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootSources.FishHandSource.GetSourceString">
            <summary>
            Returns a string for selecting the source
            </summary>
            <returns>A string for selecting the source</returns>
        </member>
        <member name="T:SharpCraft.Commands.LootSources.FishItemSource">
            <summary>
            Gets loot like it was gotten from fishing using a specific item
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootSources.FishItemSource.#ctor(SharpCraft.ILootTable,SharpCraft.Vector,SharpCraft.Item)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.LootSources.FishItemSource"/>
            </summary>
            <param name="loottable">The loot table the "fish" is coming from</param>
            <param name="fishLocation">The location the fish was caught</param>
            <param name="usedItem">The item used to get the "fish"</param>
        </member>
        <member name="P:SharpCraft.Commands.LootSources.FishItemSource.Loottable">
            <summary>
            The loot table the "fish" is coming from
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.LootSources.FishItemSource.FishLocation">
            <summary>
            The location the fish was caught
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.LootSources.FishItemSource.UsedItem">
            <summary>
            The item used to get the "fish"
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootSources.FishItemSource.GetSourceString">
            <summary>
            Returns a string for selecting the source
            </summary>
            <returns>A string for selecting the source</returns>
        </member>
        <member name="T:SharpCraft.Commands.LootSources.LoottableSource">
            <summary>
            Gets loot from a loot table
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootSources.LoottableSource.#ctor(SharpCraft.ILootTable)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.LootSources.LoottableSource"/>
            </summary>
            <param name="loottable">The loot table the get the loot from</param>
        </member>
        <member name="P:SharpCraft.Commands.LootSources.LoottableSource.Loottable">
            <summary>
            The loot table the get the loot from
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootSources.LoottableSource.GetSourceString">
            <summary>
            Returns a string for selecting the source
            </summary>
            <returns>A string for selecting the source</returns>
        </member>
        <member name="T:SharpCraft.Commands.LootSources.KillSource">
            <summary>
            Gets the loot the entity would drop if killed
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootSources.KillSource.#ctor(SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.LootSources.KillSource"/>
            </summary>
            <param name="selector">Selector selecting the entity to get kill loot from</param>
        </member>
        <member name="P:SharpCraft.Commands.LootSources.KillSource.Selector">
            <summary>
            Selector selecting the entity to get kill loot from
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootSources.KillSource.GetSourceString">
            <summary>
            Returns a string for selecting the source
            </summary>
            <returns>A string for selecting the source</returns>
        </member>
        <member name="T:SharpCraft.Commands.LootSources.MineHandSource">
            <summary>
            Gets the loot the block would drop if mined with an item an entity is holding
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootSources.MineHandSource.#ctor(SharpCraft.Vector,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.LootSources.MineHandSource"/>
            </summary>
            <param name="coordinates">The coordinates of the block get the loot from</param>
            <param name="mainHand">True if the block was mined with the main hand. False if with off hand</param>
        </member>
        <member name="P:SharpCraft.Commands.LootSources.MineHandSource.Coordinates">
            <summary>
            The coordinates of the block get the loot from
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.LootSources.MineHandSource.MainHand">
            <summary>
            True if the block was mined with executer's the main hand. False if with off hand
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootSources.MineHandSource.GetSourceString">
            <summary>
            Returns a string for selecting the source
            </summary>
            <returns>A string for selecting the source</returns>
        </member>
        <member name="T:SharpCraft.Commands.LootSources.MineItemSource">
            <summary>
            Gets the loot the block would drop if mined with a specific item
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootSources.MineItemSource.#ctor(SharpCraft.Vector,SharpCraft.Item)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.LootSources.MineHandSource"/>
            </summary>
            <param name="coordinates">The coordinates of the block get the loot from</param>
            <param name="usedItem">The item used for mining</param>
        </member>
        <member name="P:SharpCraft.Commands.LootSources.MineItemSource.Coordinates">
            <summary>
            The coordinates of the block get the loot from
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.LootSources.MineItemSource.UsedItem">
            <summary>
            The item used for mining
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootSources.MineItemSource.GetSourceString">
            <summary>
            Returns a string for selecting the source
            </summary>
            <returns>A string for selecting the source</returns>
        </member>
        <member name="T:SharpCraft.Commands.LootCommand">
            <summary>
            Command which gets the loot from somewhere and places it somewhere else
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootCommand.#ctor(SharpCraft.Commands.LootTargets.ILootTarget,SharpCraft.Commands.LootSources.ILootSource)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.LootCommand"/>
            </summary>
            <param name="source">The source to get the loot from</param>
            <param name="target">The place to place the loot</param>
        </member>
        <member name="P:SharpCraft.Commands.LootCommand.Source">
            <summary>
            The source to get the loot from
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.LootCommand.Target">
            <summary>
            The place to place the loot
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LootCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>loot [Source] [Target]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ParticleNormalCommand">
            <summary>
            Command which makes particles appear
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ParticleNormalCommand.#ctor(SharpCraft.ID.Particle,SharpCraft.Vector,SharpCraft.Vector,System.Double,System.Int32,System.Boolean,SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ParticleNormalCommand"/>
            </summary>
            <param name="particle">The particles to display</param>
            <param name="displayCoords">The coordinates to display the particles at</param>
            <param name="size">The size to each side the particles can spawn in</param>
            <param name="speed">The speed of the particles</param>
            <param name="count">The amount of particles</param>
            <param name="force">True if particles always should be shown. False if particles shouldn't</param>
            <param name="selector">Selector selecting players to show the particles to. Leave null to show particles to everyone</param>
        </member>
        <member name="P:SharpCraft.Commands.ParticleNormalCommand.Particle">
            <summary>
            The particles to display
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleNormalCommand.DisplayCoords">
            <summary>
            The coordinates to display the particles at
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleNormalCommand.Size">
            <summary>
            The size to each side the particles can spawn in
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleNormalCommand.Speed">
            <summary>
            The speed of the particles
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleNormalCommand.Count">
            <summary>
            The amount of particles
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleNormalCommand.Force">
            <summary>
            True if particles always should be shown. False if particles shouldn't
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleNormalCommand.Selector">
            <summary>
            Selector selecting players to show the particles to. Leave null to show particles to everyone
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ParticleNormalCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>particle [Particle] [DisplayCoords] [Size] [Speed] [Count] [Force] [Selector]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ParticleColoredDustCommand">
            <summary>
            Command which makes colored dust particles appear
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ParticleColoredDustCommand.#ctor(SharpCraft.RGBColor,System.Double,SharpCraft.Vector,SharpCraft.Vector,System.Double,System.Int32,System.Boolean,SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ParticleColoredDustCommand"/>
            </summary>
            <param name="color">The color of the particles</param>
            <param name="particleSize">The size of the particles</param>
            <param name="displayCoords">The coordinates to display the particles at</param>
            <param name="size">The size to each side the particles can spawn in</param>
            <param name="speed">The speed of the particles</param>
            <param name="count">The amount of particles</param>
            <param name="force">True if particles always should be shown. False if particles shouldn't</param>
            <param name="selector">Selector selecting players to show the particles to. Leave null to show particles to everyone</param>
        </member>
        <member name="P:SharpCraft.Commands.ParticleColoredDustCommand.Color">
            <summary>
            The color of the particles
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleColoredDustCommand.ParticleSize">
            <summary>
            The size of the particles
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleColoredDustCommand.DisplayCoords">
            <summary>
            The coordinates to display the particles at
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleColoredDustCommand.Size">
            <summary>
            The size to each side the particles can spawn in
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleColoredDustCommand.Speed">
            <summary>
            The speed of the particles
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleColoredDustCommand.Count">
            <summary>
            The amount of particles
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleColoredDustCommand.Force">
            <summary>
            True if particles always should be shown. False if particles shouldn't
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleColoredDustCommand.Selector">
            <summary>
            Selector selecting players to show the particles to. Leave null to show particles to everyone
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ParticleColoredDustCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>particle dust [Color] [ParticleSize] [DisplayCoords] [Size] [Speed] [Count] [Force] [Selector]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ParticleBlockCommand">
            <summary>
            Command which makes block particles appear
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ParticleBlockCommand.#ctor(SharpCraft.Block,SharpCraft.Vector,SharpCraft.Vector,System.Double,System.Int32,System.Boolean,System.Boolean,SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ParticleBlockCommand"/>
            </summary>
            <param name="displayCoords">The coordinates to display the particles at</param>
            <param name="size">The size to each side the particles can spawn in</param>
            <param name="speed">The speed of the particles</param>
            <param name="count">The amount of particles</param>
            <param name="force">True if particles always should be shown. False if particles shouldn't</param>
            <param name="selector">Selector selecting players to show the particles to. Leave null to show particles to everyone</param>
            <param name="asBlockDust">True if the particles should be in dust form. False if they should be squares</param>
            <param name="block">The block the particles should look like</param>
        </member>
        <member name="P:SharpCraft.Commands.ParticleBlockCommand.Block">
            <summary>
            The block the particles should look like
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleBlockCommand.DisplayCoords">
            <summary>
            The coordinates to display the particles at
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleBlockCommand.Size">
            <summary>
            The size to each side the particles can spawn in
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleBlockCommand.Speed">
            <summary>
            The speed of the particles
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleBlockCommand.Count">
            <summary>
            The amount of particles
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleBlockCommand.AsBlockDust">
            <summary>
            True if the particles should be in dust form. False if they should be squares
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleBlockCommand.Force">
            <summary>
            True if particles always should be shown. False if particles shouldn't
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleBlockCommand.Selector">
            <summary>
            Selector selecting players to show the particles to. Leave null to show particles to everyone
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ParticleBlockCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>particle [AsBlockDust] [Block] [DisplayCoords] [Size] [Speed] [Count] [Force] [Selector]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ParticleItemCommand">
            <summary>
            Command which makes item particles appear
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ParticleItemCommand.#ctor(SharpCraft.Item,SharpCraft.Vector,SharpCraft.Vector,System.Double,System.Int32,System.Boolean,SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ParticleItemCommand"/>
            </summary>
            <param name="displayCoords">The coordinates to display the particles at</param>
            <param name="size">The size to each side the particles can spawn in</param>
            <param name="speed">The speed of the particles</param>
            <param name="count">The amount of particles</param>
            <param name="force">True if particles always should be shown. False if particles shouldn't</param>
            <param name="selector">Selector selecting players to show the particles to. Leave null to show particles to everyone</param>
            <param name="item">The item the particles should look like</param>
        </member>
        <member name="P:SharpCraft.Commands.ParticleItemCommand.Item">
            <summary>
            The item the particles should look like
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleItemCommand.DisplayCoords">
            <summary>
            The coordinates to display the particles at
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleItemCommand.Size">
            <summary>
            The size to each side the particles can spawn in
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleItemCommand.Speed">
            <summary>
            The speed of the particles
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleItemCommand.Count">
            <summary>
            The amount of particles
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleItemCommand.Force">
            <summary>
            True if particles always should be shown. False if particles shouldn't
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ParticleItemCommand.Selector">
            <summary>
            Selector selecting players to show the particles to. Leave null to show particles to everyone
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ParticleItemCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>particle [AsBlockDust] [Block] [DisplayCoords] [Size] [Speed] [Count] [Force] [Selector]</returns>
        </member>
        <member name="T:SharpCraft.Commands.RecipeCommand">
            <summary>
            Command which gives/takes a recipe from one or more players
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.RecipeCommand.#ctor(SharpCraft.IRecipe,SharpCraft.BaseSelector,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.RecipeCommand"/>
            </summary>
            <param name="giveRecipe">True if the recipe should be given. False if it should be taken</param>
            <param name="recipe">The recipe to give/take</param>
            <param name="selector">Selector selecting the players to give/take the recipe from</param>
        </member>
        <member name="P:SharpCraft.Commands.RecipeCommand.GiveRecipe">
            <summary>
            True if the recipe should be given. False if it should be taken
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.RecipeCommand.Recipe">
            <summary>
            The recipe to give/take
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.RecipeCommand.Selector">
            <summary>
            Selector selecting the players to give/take the recipe from
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.RecipeCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>recipe [GiveRecipe] [Selector] [Recipe]</returns>
        </member>
        <member name="T:SharpCraft.Commands.RecipeAllCommand">
            <summary>
            Command which gives/takes all recipes from one or more players
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.RecipeAllCommand.#ctor(SharpCraft.BaseSelector,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.RecipeAllCommand"/>
            </summary>
            <param name="giveRecipe">True if the recipe should be given. False if it should be taken</param>
            <param name="selector">Selector selecting the players to give/take the recipe from</param>
        </member>
        <member name="P:SharpCraft.Commands.RecipeAllCommand.GiveRecipe">
            <summary>
            True if the recipes should be given. False if they should be taken
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.RecipeAllCommand.Selector">
            <summary>
            Selector selecting the players to give/take the recipes from
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.RecipeAllCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>recipe [GiveRecipe] [Selector] *</returns>
        </member>
        <member name="T:SharpCraft.Commands.ReplaceitemBlockCommand">
            <summary>
            Command which replaces an item in a block
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ReplaceitemBlockCommand.#ctor(SharpCraft.Vector,SharpCraft.Slots.IItemSlot,SharpCraft.Item,System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ReplaceitemBlockCommand"/>
            </summary>
            <param name="coordinates">The coordinates of the block to put the item into</param>
            <param name="slot">The slot to put the item into</param>
            <param name="item">The item to put into the block</param>
            <param name="count">The amount of the item</param>
        </member>
        <member name="P:SharpCraft.Commands.ReplaceitemBlockCommand.Coordinates">
            <summary>
            The coordinates of the block to put the item into
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ReplaceitemBlockCommand.Slot">
            <summary>
            The slot to put the item into
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ReplaceitemBlockCommand.Item">
            <summary>
            The item to put into the block
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ReplaceitemBlockCommand.Count">
            <summary>
            The amount of the item
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ReplaceitemBlockCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>replaceitem block [Coordinates] [Slot] [Item] [Count]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ReplaceitemEntityCommand">
            <summary>
            Command which replaces an item on one or more entities
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ReplaceitemEntityCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.Slots.IItemSlot,SharpCraft.Item,System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ReplaceitemEntityCommand"/>
            </summary>
            <param name="selector">Selector selecting the entities to replace the item on</param>
            <param name="slot">The slot to put the item into</param>
            <param name="item">The item to put into the block</param>
            <param name="count">The amount of the item</param>
        </member>
        <member name="P:SharpCraft.Commands.ReplaceitemEntityCommand.Selector">
            <summary>
            Selector selecting the entities to replace the item on
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ReplaceitemEntityCommand.Slot">
            <summary>
            The slot to put the item into
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ReplaceitemEntityCommand.Item">
            <summary>
            The item to put into the block
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ReplaceitemEntityCommand.Count">
            <summary>
            The amount of the item
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ReplaceitemEntityCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>replaceitem entity [Selector] [Slot] [Item] [Count]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ScheduleAddCommand">
            <summary>
            Command which makes a function run at some point in time
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScheduleAddCommand.#ctor(SharpCraft.IFunction,SharpCraft.Time,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ScheduleAddCommand"/>
            </summary>
            <param name="function">The function to schedule</param>
            <param name="time">The amount of time before the function should run</param>
            <param name="append">True if the function should append. False if it should replace other times the function has been scheduled.</param>
        </member>
        <member name="P:SharpCraft.Commands.ScheduleAddCommand.Function">
            <summary>
            The function to schedule
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ScheduleAddCommand.Time">
            <summary>
            The amount of time before the function should run
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ScheduleAddCommand.Append">
            <summary>
            True if the function should append. False if it should replace other times the function has been scheduled.
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScheduleAddCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>schedule function [Function] [Time] [Append]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ScheduleClearCommand">
            <summary>
            Command which clears a function's schedule
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScheduleClearCommand.#ctor(SharpCraft.IFunction)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ScheduleClearCommand"/>
            </summary>
            <param name="function">The function to clear the schedule for</param>
        </member>
        <member name="P:SharpCraft.Commands.ScheduleClearCommand.Function">
            <summary>
            The function to clear the schedule for
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScheduleClearCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>schedule [Function] [Time] [Append]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ScoreboardObjectiveAddCommand">
            <summary>
            Command which adds a new scoreboard objective to the world
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardObjectiveAddCommand.#ctor(SharpCraft.Objective,System.String,SharpCraft.BaseJsonText)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ScoreboardObjectiveAddCommand"/>
            </summary>
            <param name="displayName">The displayed name of the objective</param>
            <param name="scoreObject">The objective</param>
            <param name="criterion">The criterion for the objective</param>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardObjectiveAddCommand.DisplayName">
            <summary>
            The displayed name of the objective
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardObjectiveAddCommand.ScoreObject">
            <summary>
            The objective
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardObjectiveAddCommand.Criterion">
            <summary>
            The criterion for the objective
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardObjectiveAddCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>scoreboard objectives add [ScoreObject] [Criterion] [DisplayName]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ScoreboardObjectiveListCommand">
            <summary>
            Command which returns a list of all existing scoreboard objectives
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardObjectiveListCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>scoreboard objectives list</returns>
        </member>
        <member name="T:SharpCraft.Commands.ScoreboardObjectiveChangeNameCommand">
            <summary>
            Command which changes the display name of an objective
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardObjectiveChangeNameCommand.#ctor(SharpCraft.Objective,SharpCraft.BaseJsonText)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ScoreboardObjectiveChangeNameCommand"/>
            </summary>
            <param name="displayName">The new display name for the objective</param>
            <param name="scoreObject">The objective to change</param>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardObjectiveChangeNameCommand.DisplayName">
            <summary>
            The new display name for the objective
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardObjectiveChangeNameCommand.ScoreObject">
            <summary>
            The objective to change
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardObjectiveChangeNameCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>scoreboard objectives modify [ScoreObject] displayname [DisplayName]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ScoreboardObjectiveChangeRenderCommand">
            <summary>
            Command which changes how an objective is displayed in tab
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardObjectiveChangeRenderCommand.#ctor(SharpCraft.Objective,SharpCraft.ID.ObjectiveRender)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ScoreboardObjectiveChangeRenderCommand"/>
            </summary>
            <param name="scoreObject">The objective to change</param>
            <param name="rendering">The new way to render the objective in tab</param>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardObjectiveChangeRenderCommand.ScoreObject">
            <summary>
            The objective to change
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardObjectiveChangeRenderCommand.Rendering">
            <summary>
            The new way to render the objective in tab
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardObjectiveChangeRenderCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>scoreboard objectives modify [ScoreObject] rendertype [Rendering]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ScoreboardObjectiveRemoveCommand">
            <summary>
            Command which removes an objective
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardObjectiveRemoveCommand.#ctor(SharpCraft.Objective)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ScoreboardObjectiveRemoveCommand"/>
            </summary>
            <param name="scoreObject">The objective to remove</param>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardObjectiveRemoveCommand.ScoreObject">
            <summary>
            The objective to remove
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardObjectiveRemoveCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>scoreboard objectives remove [ScoreObject]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ScoreboardSetDisplayCommand">
            <summary>
            Command which changes a display slot
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardSetDisplayCommand.#ctor(SharpCraft.Objective,SharpCraft.ID.ScoreDisplay)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ScoreboardSetDisplayCommand"/>
            </summary>
            <param name="scoreObject">The objective to display. Null to display nothing</param>
            <param name="displaySlot">The slot to change displayed objective</param>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardSetDisplayCommand.ScoreObject">
            <summary>
            The objective to display. Null to display nothing
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardSetDisplayCommand.DisplaySlot">
            <summary>
            The slot to change displayed objective
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardSetDisplayCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>scoreboard objectives setdisplay [DisplaySlot] ([ScoreObject])</returns>
        </member>
        <member name="T:SharpCraft.Commands.ScoreboardSetTeamDisplayCommand">
            <summary>
            Command which changes a team sidebar display slot
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardSetTeamDisplayCommand.#ctor(SharpCraft.Objective,SharpCraft.ID.MinecraftColor)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ScoreboardSetTeamDisplayCommand"/>
            </summary>
            <param name="scoreObject">The objective to display. Null to display nothing</param>
            <param name="teamColor">The slot color to change</param>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardSetTeamDisplayCommand.ScoreObject">
            <summary>
            The objective to display. Null to display nothing
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardSetTeamDisplayCommand.TeamColor">
            <summary>
            The slot color to change
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardSetTeamDisplayCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>scoreboard objectives setdisplay sidebar.team.[TeamColor] ([ScoreObject])</returns>
        </member>
        <member name="T:SharpCraft.Commands.ScoreboardValueChangeCommand">
            <summary>
            Command which changes the value of a score
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardValueChangeCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.Objective,SharpCraft.ID.ScoreChange,System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ScoreboardValueChangeCommand"/>
            </summary>
            <param name="selector">Selector for selecting the scores to change</param>
            <param name="scoreObject">The objective to change score in</param>
            <param name="changeType">The way to change the score</param>
            <param name="changeNumber">The number to change the score with</param>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardValueChangeCommand.Selector">
            <summary>
            Selector for selecting the scores to change
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardValueChangeCommand.ScoreObject">
            <summary>
            The objective to change score in
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardValueChangeCommand.ChangeType">
            <summary>
            The way to change the score
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardValueChangeCommand.ChangeNumber">
            <summary>
            The number to change the score with
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardValueChangeCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>scoreboard players [ChangeType] [Selector] [ScoreObject] [ChangeNumber]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ScoreboardValueGetCommand">
            <summary>
            Command which changes the value of a score
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardValueGetCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.Objective)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ScoreboardValueGetCommand"/>
            </summary>
            <param name="selector">Selector for selecting the score to get</param>
            <param name="scoreObject">The objective to get the score from</param>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardValueGetCommand.Selector">
            <summary>
            Selector for selecting the score to get
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardValueGetCommand.ScoreObject">
            <summary>
            The objective to get the score from
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardValueGetCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>scoreboard players get [Selector] [ScoreObject]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ScoreboardEnableTriggerCommand">
            <summary>
            Command which enables a trigger objective for one or more players
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardEnableTriggerCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.Objective)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ScoreboardEnableTriggerCommand"/>
            </summary>
            <param name="selector">Selector for selecting the players to enable a trigger for</param>
            <param name="scoreObject">The objective to enable triggering</param>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardEnableTriggerCommand.Selector">
            <summary>
            Selector for selecting the players to enable a trigger for
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardEnableTriggerCommand.ScoreObject">
            <summary>
            The objective to enable triggering
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardEnableTriggerCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>scoreboard players enable [Selector] [ScoreObject]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ScoreboardResetCommand">
            <summary>
            Command which resets a objective for one or more players
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardResetCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.Objective)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ScoreboardResetCommand"/>
            </summary>
            <param name="selector">Selector for selecting the scores to reset</param>
            <param name="scoreObject">The objective to reset scores in. Null to reset all scores for the selected scores</param>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardResetCommand.Selector">
            <summary>
            Selector for selecting the scores to reset
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardResetCommand.ScoreObject">
            <summary>
            The objective to reset scores in. Null to reset all scores for the selected scores
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardResetCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>scoreboard players reset [Selector] [ScoreObject]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ScoreboardListCommand">
            <summary>
            Commands which returns a list of an entity's scores
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardListCommand.#ctor(SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ScoreboardObjectiveListCommand"/>
            </summary>
            <param name="selector">Selector for selecting the entity to get a list of scores for</param>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardListCommand.Selector">
            <summary>
            Selector for selecting the entity to get a list of scores for
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardListCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>scoreboard players list [Selector]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ScoreboardOperationCommand">
            <summary>
            Command which modfifies one score with another
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardOperationCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.Objective,SharpCraft.ID.Operation,SharpCraft.BaseSelector,SharpCraft.Objective)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.ScoreboardOperationCommand"/>
            </summary>
            <param name="selector1">Selector for selecting the scores to change</param>
            <param name="objective1">The objective the scores to change is in</param>
            <param name="operator">The operation use on the 2 scores</param>
            <param name="selector2">Selector for selecting the scores to change with</param>
            <param name="objective2">The objective the scores used for changing is in</param>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardOperationCommand.Selector1">
            <summary>
            Selector for selecting the scores to change
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardOperationCommand.Objective1">
            <summary>
            The objective the scores to change is in
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardOperationCommand.Selector2">
            <summary>
            Selector for selecting the scores to change with
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardOperationCommand.Objective2">
            <summary>
            The objective the scores used for changing is in
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ScoreboardOperationCommand.Operator">
            <summary>
            The operation use on the 2 scores
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ScoreboardOperationCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>scoreboard players operation [Selector1] [Objective1] [Operator] [Selector2] [Objective2]</returns>
        </member>
        <member name="T:SharpCraft.Commands.SayMeCommand">
            <summary>
            Says some text with the executing entity's name and a * at the beginning
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.SayMeCommand.#ctor(System.String)">
            <summary>
            intializes a new <see cref="T:SharpCraft.Commands.SayMeCommand"/>
            </summary>
            <param name="text">The text it should display</param>
        </member>
        <member name="P:SharpCraft.Commands.SayMeCommand.Text">
            <summary>
            The text it should display
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.SayMeCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>me [Text]</returns>
        </member>
        <member name="T:SharpCraft.Commands.Comment">
            <summary>
            A # comment
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.Comment.#ctor(System.String)">
            <summary>
            intializes a new <see cref="T:SharpCraft.Commands.Comment"/>
            </summary>
            <param name="text">The comment</param>
        </member>
        <member name="P:SharpCraft.Commands.Comment.Text">
            <summary>
            The comment
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.Comment.GetCommandString">
            <summary>
            Returns the comment as a string
            </summary>
            <returns>#[Text]</returns>
        </member>
        <member name="T:SharpCraft.Commands.SayCommand">
            <summary>
            Says some text with the executing entity's name in [] at the beginning
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.SayCommand.#ctor(System.String)">
            <summary>
            intializes a new <see cref="T:SharpCraft.Commands.SayCommand"/>
            </summary>
            <param name="text">The text it should display</param>
        </member>
        <member name="P:SharpCraft.Commands.SayCommand.Text">
            <summary>
            The text it should display
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.SayCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>say [Text]</returns>
        </member>
        <member name="T:SharpCraft.Commands.MsgCommand">
            <summary>
            Sends a private message to one or more players
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.MsgCommand.#ctor(SharpCraft.BaseSelector,System.String)">
            <summary>
            intializes a new <see cref="T:SharpCraft.Commands.MsgCommand"/>
            </summary>
            <param name="text">The text it should display</param>
            <param name="selector">Selector for selecting players to private message</param>
        </member>
        <member name="P:SharpCraft.Commands.MsgCommand.Text">
            <summary>
            The text it should display
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.MsgCommand.Selector">
            <summary>
            Selector for selecting players to private message
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.MsgCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>msg [Selector] [Text]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeamMsgCommand">
            <summary>
            Private messages players on the same team as the player executing this command
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamMsgCommand.#ctor(System.String)">
            <summary>
            intializes a new <see cref="T:SharpCraft.Commands.TeamMsgCommand"/>
            </summary>
            <param name="text">The text to private message</param>
        </member>
        <member name="P:SharpCraft.Commands.TeamMsgCommand.Text">
            <summary>
            The text to private message
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamMsgCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>say [Text]</returns>
        </member>
        <member name="T:SharpCraft.Commands.SeedCommand">
            <summary>
            Command which gets the seed of the world
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.SeedCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>seed</returns>
        </member>
        <member name="T:SharpCraft.Commands.LocateCommand">
            <summary>
            Command which locates where the closest structure of the given type is at
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LocateCommand.#ctor(SharpCraft.ID.Structure)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.LocateCommand"/>
            </summary>
            <param name="structure">The structure to locate</param>
        </member>
        <member name="P:SharpCraft.Commands.LocateCommand.Structure">
            <summary>
            The structure to locate
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.LocateCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>locate [Structure]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TriggerCommand">
            <summary>
            Changes a trigger objective for the executing player.
            Player doesn't need op to run this command.
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TriggerCommand.#ctor(SharpCraft.Objective,System.Boolean,System.Int32)">
            <summary>
            intializes a new <see cref="T:SharpCraft.Commands.TriggerCommand"/>
            </summary>
            <param name="objective">The objective to change</param>
            <param name="score">The number to modify it with</param>
            <param name="shouldSet">True if it should set the objective to the score. False if it should add the score to the objective</param>
        </member>
        <member name="P:SharpCraft.Commands.TriggerCommand.Objective">
            <summary>
            The objective to change
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TriggerCommand.Score">
            <summary>
            True if it should set the objective to the score. False if it should add the score to the objective
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TriggerCommand.ShouldSet">
            <summary>
            The number to modify it with
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TriggerCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>trigger [Objective] [ShouldSet] [Score]</returns>
        </member>
        <member name="T:SharpCraft.Commands.DefaultGamemodeCommand">
            <summary>
            Command which changes the default gamemode in the world
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DefaultGamemodeCommand.#ctor(SharpCraft.ID.Gamemode)">
            <summary>
            intializes a new <see cref="T:SharpCraft.Commands.DefaultGamemodeCommand"/>
            </summary>
            <param name="gamemode">The gamemode to change to be the default gamemode</param>
        </member>
        <member name="P:SharpCraft.Commands.DefaultGamemodeCommand.Gamemode">
            <summary>
            The gamemode to change to be the default gamemode
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DefaultGamemodeCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>defaultgamemode [Gamemode]</returns>
        </member>
        <member name="T:SharpCraft.Commands.DifficultyCommand">
            <summary>
            Command which changes the difficulty in the world
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DifficultyCommand.#ctor(SharpCraft.ID.Difficulty)">
            <summary>
            intializes a new <see cref="T:SharpCraft.Commands.DifficultyCommand"/>
            </summary>
            <param name="difficulty">The new difficulty</param>
        </member>
        <member name="P:SharpCraft.Commands.DifficultyCommand.Difficulty">
            <summary>
            The new difficulty
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.DifficultyCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>difficulty [Difficulty]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ReloadCommand">
            <summary>
            Command which reloads datapacks in the world
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ReloadCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>reload</returns>
        </member>
        <member name="T:SharpCraft.Commands.EnchantCommand">
            <summary>
            Command which enchants a player's selected item with an enchant
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.EnchantCommand.#ctor(SharpCraft.BaseSelector,System.Int32,SharpCraft.ID.Enchant)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.EnchantCommand"/>
            </summary>
            <param name="selector">Selector selecting the player's whose item to enchant</param>
            <param name="level">The level of the enchant</param>
            <param name="enchant">The enchant to enchant the player's selected item with</param>
        </member>
        <member name="P:SharpCraft.Commands.EnchantCommand.Selector">
            <summary>
            Selector selecting the player's whose item to enchant
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.EnchantCommand.Level">
            <summary>
            The level of the enchant
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.EnchantCommand.Enchant">
            <summary>
            The enchant to enchant the player's selected item with
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.EnchantCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>enchant [Selector] [Enchant] [Level]</returns>
        </member>
        <member name="T:SharpCraft.Commands.RunFunctionCommand">
            <summary>
            Command for running a function
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.RunFunctionCommand.#ctor(SharpCraft.IFunction)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.RunFunctionCommand"/>
            </summary>
            <param name="function">The function to run</param>
        </member>
        <member name="P:SharpCraft.Commands.RunFunctionCommand.Function">
            <summary>
            The function to run
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.RunFunctionCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>function [Function]</returns>
        </member>
        <member name="T:SharpCraft.Commands.GamemodeCommand">
            <summary>
            Command which changes player's gamemode
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.GamemodeCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.ID.Gamemode)">
            <summary>
            intializes a new <see cref="T:SharpCraft.Commands.GamemodeCommand"/>
            </summary>
            <param name="gamemode">The gamemode to change the players to</param>
            <param name="selector">Selector selecting the player's whose gamemode to change</param>
        </member>
        <member name="P:SharpCraft.Commands.GamemodeCommand.Gamemode">
            <summary>
            The gamemode to change the players to
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.GamemodeCommand.Selector">
            <summary>
            Selector selecting the player's whose gamemode to change
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.GamemodeCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>gamemode [Gamemode] [Selector]</returns>
        </member>
        <member name="T:SharpCraft.Commands.KillCommand">
            <summary>
            Command which changes player's gamemode
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.KillCommand.#ctor(SharpCraft.BaseSelector)">
            <summary>
            intializes a new <see cref="T:SharpCraft.Commands.KillCommand"/>
            </summary>
            <param name="selector">Selector selecting the entities to kill</param>
        </member>
        <member name="P:SharpCraft.Commands.KillCommand.Selector">
            <summary>
            Selector selecting the entities to kill
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.KillCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>kill [Selector]</returns>
        </member>
        <member name="T:SharpCraft.Commands.SetblockCommand">
            <summary>
            Command which places a block in the world
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.SetblockCommand.#ctor(SharpCraft.Vector,SharpCraft.Block,SharpCraft.ID.BlockAdd)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.SetblockCommand"/>
            </summary>
            <param name="coordinates">The coords to place the block at</param>
            <param name="block">The block to place</param>
            <param name="mode">The way to place the block</param>
        </member>
        <member name="P:SharpCraft.Commands.SetblockCommand.Coordinates">
            <summary>
            The coords to place the block at
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.SetblockCommand.Block">
            <summary>
            The block to place
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.SetblockCommand.Mode">
            <summary>
            The way to place the block
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.SetblockCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>setblock [Coordinates] [Block] [Mode]</returns>
        </member>
        <member name="T:SharpCraft.Commands.SetWorldSpawnCommand">
            <summary>
            Command which changes the world spawn
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.SetWorldSpawnCommand.#ctor(SharpCraft.Vector)">
            <summary>
            intializes a new <see cref="T:SharpCraft.Commands.SetWorldSpawnCommand"/>
            </summary>
            <param name="coordinates">The coordinates to place the world spawn at</param>
        </member>
        <member name="P:SharpCraft.Commands.SetWorldSpawnCommand.Coordinates">
            <summary>
            The coordinates to place the world spawn at
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.SetWorldSpawnCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>setworldspawn [Coordinates]</returns>
        </member>
        <member name="T:SharpCraft.Commands.SpreadPlayersCommand">
            <summary>
            Command which spreads entities around a location
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.SpreadPlayersCommand.#ctor(SharpCraft.Vector,SharpCraft.BaseSelector,System.Double,System.Double,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.SpreadPlayersCommand"/>
            </summary>
            <param name="coordinates">The coordinates to spread the entities around</param>
            <param name="selector">Selector selecting the entities to spread</param>
            <param name="distance">The minimum distance between spreaded entities</param>
            <param name="maxRange">The max distance the entities can be spread</param>
            <param name="respectTeams">True if teams should be grouped together. False if they shouldn't</param>
        </member>
        <member name="M:SharpCraft.Commands.SpreadPlayersCommand.ChangeRanges(System.Double,System.Double)">
            <summary>
            Changes both distance and maxRange at the same time
            </summary>
            <param name="distance"></param>
            <param name="maxRange"></param>
        </member>
        <member name="P:SharpCraft.Commands.SpreadPlayersCommand.Coordinates">
            <summary>
            The coordinates to spread the entities around
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.SpreadPlayersCommand.Selector">
            <summary>
            Selector selecting the entities to spread
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.SpreadPlayersCommand.Distance">
            <summary>
            The minimum distance between spreaded entities
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.SpreadPlayersCommand.MaxRange">
            <summary>
            The max distance the entities can be spread
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.SpreadPlayersCommand.RespectTeams">
            <summary>
            True if teams should be grouped together. False if they shouldn't
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.SpreadPlayersCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>spreadplayers [Coordinates] [Distance] [MaxRange] [RespectTeams] [Selector]</returns>
        </member>
        <member name="T:SharpCraft.Commands.SummonCommand">
            <summary>
            Command which summons an entity at the given location
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.SummonCommand.#ctor(SharpCraft.Entity,SharpCraft.Vector)">
            <summary>
            intializes a new <see cref="T:SharpCraft.Commands.SummonCommand"/>
            </summary>
            <param name="entity">The entity to summon</param>
            <param name="coordinates">The coordinates the summon the entity at</param>
        </member>
        <member name="P:SharpCraft.Commands.SummonCommand.Entity">
            <summary>
            The entity to summon
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.SummonCommand.Coordinates">
            <summary>
            The coordinates the summon the entity at
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.SummonCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>summon [Entity(type)] [Coordinates] [Entity(data)]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TellrawCommand">
            <summary>
            Sends a private message to one or more players
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TellrawCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.BaseJsonText)">
            <summary>
            intializes a new <see cref="T:SharpCraft.Commands.TellrawCommand"/>
            </summary>
            <param name="text">The text it should display</param>
            <param name="selector">Selector for selecting players to private message</param>
        </member>
        <member name="P:SharpCraft.Commands.TellrawCommand.Text">
            <summary>
            The text it should display
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TellrawCommand.Selector">
            <summary>
            Selector for selecting players to private message
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TellrawCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>tellraw [Selector] [Text]</returns>
        </member>
        <member name="T:SharpCraft.Commands.ClearCommand">
            <summary>
            Clears one or more items from some selected players' inventories
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ClearCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.Item,System.Nullable{System.Int32})">
            <summary>
            intializes a new <see cref="T:SharpCraft.Commands.ClearCommand"/>
            </summary>
            <param name="selector">Selector for selecting players to clear</param>
            <param name="item">The item to clear. Leave null to clear all items</param>
            <param name="maxCount">The maximum amount of items to clear. An item has to be set to use this</param>
        </member>
        <member name="P:SharpCraft.Commands.ClearCommand.Item">
            <summary>
            The item to clear. Leave null to clear all items
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ClearCommand.Selector">
            <summary>
            Selector for selecting players to clear
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.ClearCommand.MaxCount">
            <summary>
            The maximum amount of items to clear. An item has to be set to use this
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.ClearCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>clear [Selector] ([Item]) ([MaxCount])</returns>
        </member>
        <member name="T:SharpCraft.Commands.GiveCommand">
            <summary>
            Commands which gives a player an item
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.GiveCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.Item,System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.GiveCommand"/>
            </summary>
            <param name="item">The item to give</param>
            <param name="selector">Selector for selecting players to give the item to</param>
            <param name="count">The amount of the item to give</param>
        </member>
        <member name="P:SharpCraft.Commands.GiveCommand.Item">
            <summary>
            The item to give
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.GiveCommand.Selector">
            <summary>
            Selector for selecting players to give the item to
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.GiveCommand.Count">
            <summary>
            The amount of the item to give
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.GiveCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>give [Selector] [Item] [Count]</returns>
        </member>
        <member name="T:SharpCraft.Commands.PlaySoundCommand">
            <summary>
            Command which plays a sound
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.PlaySoundCommand.#ctor(System.String,SharpCraft.ID.SoundSource,SharpCraft.BaseSelector,SharpCraft.Vector,System.Double,System.Double,System.Double)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.PlaySoundCommand"/>
            </summary>
            <param name="sound">The sound to play</param>
            <param name="source">The category to play the music in</param>
            <param name="selector">Selector selecting players to play the sound for</param>
            <param name="volume">The volume of the sound. Everything above 2 won't sound louder, but will make the sound hearable from further away</param>
            <param name="pitch">The pitch of the sound</param>
            <param name="minimumVolume">The minimum value of the sound</param>
            <param name="coordinates">The coordinates to play the sound at</param>
        </member>
        <member name="P:SharpCraft.Commands.PlaySoundCommand.Sound">
            <summary>
            The sound to play
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.PlaySoundCommand.Source">
            <summary>
            The category to play the music in
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.PlaySoundCommand.Selector">
            <summary>
            Selector selecting players to play the sound for
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.PlaySoundCommand.Coordinates">
            <summary>
            The coordinates to play the sound at
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.PlaySoundCommand.Volume">
            <summary>
            The volume of the sound. Everything above 2 won't sound louder, but will make the sound hearable from further away
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.PlaySoundCommand.Pitch">
            <summary>
            The pitch of the sound
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.PlaySoundCommand.MinimumVolume">
            <summary>
            The minimum value of the sound
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.PlaySoundCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>playsound [Sound] [Source] [Selector] [Coordinates] [Volume] [Pitch] [MinimumVolume]</returns>
        </member>
        <member name="T:SharpCraft.Commands.SpawnPointCommand">
            <summary>
            Command which changes one or more player's spawnpoints
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.SpawnPointCommand.#ctor(SharpCraft.Vector,SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.SpawnPointCommand"/>
            </summary>
            <param name="coordinates">The place to move the spawnpoint to</param>
            <param name="selector">Selector selecting the players whose spawn point to change</param>
        </member>
        <member name="P:SharpCraft.Commands.SpawnPointCommand.Coordinates">
            <summary>
            The place to move the spawnpoint to
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.SpawnPointCommand.Selector">
            <summary>
            Selector selecting the players whose spawn point to change
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.SpawnPointCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>clear [Selector] ([Item]) ([MaxCount])</returns>
        </member>
        <member name="T:SharpCraft.Commands.StopSoundCommand">
            <summary>
            Command which stops a sound for one or more players
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.StopSoundCommand.#ctor(SharpCraft.BaseSelector,System.String,System.Nullable{SharpCraft.ID.SoundSource})">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.StopSoundCommand"/>
            </summary>
            <param name="selector">Selector selecting the players to stop the sound for</param>
            <param name="sound">The sound to stop. Leave null to stop all sounds</param>
            <param name="source">The category to stop sounds in. Leave null to stop sound in all categories</param>
        </member>
        <member name="P:SharpCraft.Commands.StopSoundCommand.Selector">
            <summary>
            Selector selecting the players to stop the sound for
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.StopSoundCommand.Sound">
            <summary>
            The sound to stop. Leave null to stop all sounds
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.StopSoundCommand.Source">
            <summary>
            The category to stop sounds in. Leave null to stop sound in all categories
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.StopSoundCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>stopsound [Selector] ([Source]) ([Sound])</returns>
        </member>
        <member name="T:SharpCraft.Commands.WeatherCommand">
            <summary>
            Command which changes the weather for some time
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.WeatherCommand.#ctor(SharpCraft.ID.WeatherType,SharpCraft.Time)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.WeatherCommand"/>
            </summary>
            <param name="time">The amount of time the weather is there for</param>
            <param name="weather">The weather to change the weather to</param>
        </member>
        <member name="P:SharpCraft.Commands.WeatherCommand.Time">
            <summary>
            The amount of time the weather is there for
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.WeatherCommand.Weather">
            <summary>
            The weather to change the weather to
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.WeatherCommand.GetCommandString">
            <summary>
            Returns the command as a string
            </summary>
            <returns>weather [Weather] [Time]</returns>
        </member>
        <member name="T:SharpCraft.Commands.SpectateCommand">
            <summary>
            Command which makes a player spectate an entity
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.SpectateCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.SpectateCommand"/>
            </summary>
            <param name="spectate">Selector selecting the entity to spectate</param>
            <param name="spectator">Selector selecting the player which should be spectating. (Player has to be in spectator mode)</param>
        </member>
        <member name="P:SharpCraft.Commands.SpectateCommand.Spectate">
            <summary>
            Selector selecting the entity to spectate
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.SpectateCommand.Spectator">
            <summary>
            Selector selecting the player which should be spectating. (Player has to be in spectator mode)
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.SpectateCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>spectate [Spectate] [Spectator]</returns>
        </member>
        <member name="T:SharpCraft.Commands.SpectateStopCommand">
            <summary>
            Makes the executing player stop spectating
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.SpectateStopCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>spectate</returns>
        </member>
        <member name="T:SharpCraft.Commands.TagCommand">
            <summary>
            Command which adds/removes a tag from one or more entities
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TagCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.Tag,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TagCommand"/>
            </summary>
            <param name="selector">Selector for selecting the entities to add/remove the tag from</param>
            <param name="tag">The tag to add/remove</param>
            <param name="addTag">True if the tag should be added. False if removed</param>
        </member>
        <member name="P:SharpCraft.Commands.TagCommand.Selector">
            <summary>
            Selector for selecting the entities to add/remove the tag from
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TagCommand.Tag">
            <summary>
            The tag to add/remove
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TagCommand.AddTag">
            <summary>
            True if the tag should be added. False if removed
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TagCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>tag [Selector] [AddTag] [Tag]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TagListCommand">
            <summary>
            Command which returns a list of tags from one or more entities
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TagListCommand.#ctor(SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TagListCommand"/>
            </summary>
            <param name="selector">Selector for selecting the entities to get a list of tags from</param>
        </member>
        <member name="P:SharpCraft.Commands.TagListCommand.Selector">
            <summary>
            Selector for selecting the entities to get a list of tags from
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TagListCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>tag [Selector] list</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeamAddCommand">
            <summary>
            Command which adds a team to the world
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamAddCommand.#ctor(SharpCraft.Team,SharpCraft.BaseJsonText)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TeamAddCommand"/>
            </summary>
            <param name="team">The team to add</param>
            <param name="displayName">The team's displayed name</param>
        </member>
        <member name="P:SharpCraft.Commands.TeamAddCommand.Team">
            <summary>
            The team to add
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TeamAddCommand.DisplayName">
            <summary>
            The team's displayed name
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamAddCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>team add [Team] ([DisplayName])</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeamEmptyCommand">
            <summary>
            Command which empties a team
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamEmptyCommand.#ctor(SharpCraft.Team)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TeamEmptyCommand"/>
            </summary>
            <param name="team">The team to empty</param>
        </member>
        <member name="P:SharpCraft.Commands.TeamEmptyCommand.Team">
            <summary>
            The team to empty
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamEmptyCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>team empty [Team]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeamJoinCommand">
            <summary>
            Command which makes entities join a team
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamJoinCommand.#ctor(SharpCraft.Team,SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TeamJoinCommand"/>
            </summary>
            <param name="team">The team to join</param>
            <param name="selector">Selector selecting the entities to put into the team</param>
        </member>
        <member name="P:SharpCraft.Commands.TeamJoinCommand.Team">
            <summary>
            The team to join
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TeamJoinCommand.Selector">
            <summary>
            Selector selecting the entities to put into the team
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamJoinCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>team join [Team] [Selector]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeamLeaveCommand">
            <summary>
            Command which makes entities leave their team
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamLeaveCommand.#ctor(SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TeamLeaveCommand"/>
            </summary>
            <param name="selector">Selector for selecting entities to make leave their team</param>
        </member>
        <member name="P:SharpCraft.Commands.TeamLeaveCommand.Selector">
            <summary>
            Selector for selecting entities to make leave their team
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamLeaveCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>team leave [Selector]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeamListCommand">
            <summary>
            Command which returns a list of all teams
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamListCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>team list</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeamPlayerListCommand">
            <summary>
            Command which returns a list of players in a team
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamPlayerListCommand.#ctor(SharpCraft.Team)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TeamPlayerListCommand"/>
            </summary>
            <param name="team">The team to get a list of players for</param>
        </member>
        <member name="P:SharpCraft.Commands.TeamPlayerListCommand.Team">
            <summary>
            The team to get a list of players for
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamPlayerListCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>team list [Team]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeamRemoveCommand">
            <summary>
            Command which removes a team from the world
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamRemoveCommand.#ctor(SharpCraft.Team)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TeamRemoveCommand"/>
            </summary>
            <param name="team">The team to remove</param>
        </member>
        <member name="P:SharpCraft.Commands.TeamRemoveCommand.Team">
            <summary>
            The team to remove
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamRemoveCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>team remove [Team]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeamModifyDisplayCommand">
            <summary>
            Command which changes how a team is displayed
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamModifyDisplayCommand.#ctor(SharpCraft.Team,SharpCraft.ID.TeamDisplayName,SharpCraft.BaseJsonText)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TeamModifyDisplayCommand"/>
            </summary>
            <param name="team">The team to modify</param>
            <param name="displaySlot">The display to change</param>
            <param name="value">The value to change it to</param>
        </member>
        <member name="P:SharpCraft.Commands.TeamModifyDisplayCommand.Team">
            <summary>
            The team to modify
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TeamModifyDisplayCommand.DisplaySlot">
            <summary>
            The display to change
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TeamModifyDisplayCommand.Value">
            <summary>
            The value to change it to
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamModifyDisplayCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>team modify [Team] [DisplaySlot] [Value]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeamModifyCollisionCommand">
            <summary>
            Command which changes how collision works on a team
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamModifyCollisionCommand.#ctor(SharpCraft.Team,SharpCraft.ID.TeamCollision)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TeamModifyCollisionCommand"/>
            </summary>
            <param name="team">The team to modify</param>
            <param name="value">The new collision setting</param>
        </member>
        <member name="P:SharpCraft.Commands.TeamModifyCollisionCommand.Team">
            <summary>
            The team to modify
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TeamModifyCollisionCommand.Value">
            <summary>
            The new collision setting
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamModifyCollisionCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>team modify [Team] collisionRule [Value]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeamModifyColorCommand">
            <summary>
            Command which changes the color of a team
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamModifyColorCommand.#ctor(SharpCraft.Team,SharpCraft.ID.MinecraftColor)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TeamModifyColorCommand"/>
            </summary>
            <param name="team">The team to modify</param>
            <param name="value">The new color to change to</param>
        </member>
        <member name="P:SharpCraft.Commands.TeamModifyColorCommand.Team">
            <summary>
            The team to modify
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TeamModifyColorCommand.Value">
            <summary>
            The new color to change to
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamModifyColorCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>team modify [Team] color [Value]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeamModifyDeathMessageCommand">
            <summary>
            Command which changes who can see a team's death messages
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamModifyDeathMessageCommand.#ctor(SharpCraft.Team,SharpCraft.ID.TeamVisibility)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TeamModifyDeathMessageCommand"/>
            </summary>
            <param name="team">The team to modify</param>
            <param name="value">The new death message visibility setting</param>
        </member>
        <member name="P:SharpCraft.Commands.TeamModifyDeathMessageCommand.Team">
            <summary>
            The team to modify
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TeamModifyDeathMessageCommand.Value">
            <summary>
            The new death message visibility setting
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamModifyDeathMessageCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>team modify [Team] deathMessageVisibility [Value]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeamModifyNameVisibilityCommand">
            <summary>
            A command which changes who can see a players on a team's names
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamModifyNameVisibilityCommand.#ctor(SharpCraft.Team,SharpCraft.ID.TeamVisibility)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TeamModifyNameVisibilityCommand"/>
            </summary>
            <param name="team">The team to modify</param>
            <param name="value">The new name visibility setting</param>
        </member>
        <member name="P:SharpCraft.Commands.TeamModifyNameVisibilityCommand.Team">
            <summary>
            The team to modify
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TeamModifyNameVisibilityCommand.Value">
            <summary>
            The new name visibility setting
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamModifyNameVisibilityCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>team modify [Team] nametagVisibility [Value]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeamModifyFriendlyFireCommand">
            <summary>
            Command which changes if players on a team can hit each other
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamModifyFriendlyFireCommand.#ctor(SharpCraft.Team,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TeamModifyFriendlyFireCommand"/>
            </summary>
            <param name="team">The team to modify</param>
            <param name="value">True if friendly fire should be on. False if not</param>
        </member>
        <member name="P:SharpCraft.Commands.TeamModifyFriendlyFireCommand.Team">
            <summary>
            The team to modify
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TeamModifyFriendlyFireCommand.Value">
            <summary>
            True if friendly fire should be on. False if not
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamModifyFriendlyFireCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>team modify [Team] friendlyFire [Value]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeamModifyInvisibilityCommand">
            <summary>
            Command which changes if players on a team can see their invisible team mates
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamModifyInvisibilityCommand.#ctor(SharpCraft.Team,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TeamModifyInvisibilityCommand"/>
            </summary>
            <param name="team">The team to modify</param>
            <param name="value">True if players in a team should be able to see invisible players in their own team. False if not</param>
        </member>
        <member name="P:SharpCraft.Commands.TeamModifyInvisibilityCommand.Team">
            <summary>
            The team to modify
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TeamModifyInvisibilityCommand.Value">
            <summary>
            True if players in a team should be able to see invisible players in their own team. False if not
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeamModifyInvisibilityCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>team modify [Team] seeFriendlyInvisibles [Value]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeleportToCommand">
            <summary>
            Command which teleports one or more entities to another location
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeleportToCommand.#ctor(SharpCraft.Vector,SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TeleportToCommand"/>
            </summary>
            <param name="coordinates">The place to teleport the entities to</param>
            <param name="selector">Selector selecting the entities to teleport</param>
        </member>
        <member name="P:SharpCraft.Commands.TeleportToCommand.Coordinates">
            <summary>
            The place to teleport the entities to
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TeleportToCommand.Selector">
            <summary>
            Selector selecting the entities to teleport
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeleportToCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>tp [Selector] [Coordinates]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeleportToEntityCommand">
            <summary>
            Command which teleports one or more entities to another entity
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeleportToEntityCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TeleportToEntityCommand"/>
            </summary>
            <param name="selector">Selector selecting the entities to teleport</param>
            <param name="toSelector">The entity to teleport to</param>
        </member>
        <member name="P:SharpCraft.Commands.TeleportToEntityCommand.Selector">
            <summary>
            Selector selecting the entities to teleport
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TeleportToEntityCommand.ToSelector">
            <summary>
            The entity to teleport to
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeleportToEntityCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>tp [Selector] [ToSelector]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeleportToFacingCommand">
            <summary>
            Command which teleports one or more entities to a location facing another location
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeleportToFacingCommand.#ctor(SharpCraft.Vector,SharpCraft.BaseSelector,SharpCraft.Vector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TeleportToFacingCommand"/>
            </summary>
            <param name="coordinates">The place to teleport the entities to</param>
            <param name="selector">Selector selecting the entities to teleport</param>
            <param name="facingCoordinates">The coordinates the entities will be facing after teleporting</param>
        </member>
        <member name="P:SharpCraft.Commands.TeleportToFacingCommand.FacingCoordinates">
            <summary>
            The coordinates the entities will be facing after teleporting
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeleportToFacingCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>tp [Selector] [Coordinates] facing [FacingCoordinates]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeleportToFacingEntityCommand">
            <summary>
            Command which teleports one or more entities to a location facing another entity
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeleportToFacingEntityCommand.#ctor(SharpCraft.Vector,SharpCraft.BaseSelector,SharpCraft.BaseSelector,SharpCraft.ID.FacingAnchor)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TeleportToFacingEntityCommand"/>
            </summary>
            <param name="coordinates">The place to teleport the entities to</param>
            <param name="selector">Selector selecting the entities to teleport</param>
            <param name="facingSelector">The entity the other entities should face when teleported</param>
            <param name="anchor">The part of the entity to face</param>
        </member>
        <member name="P:SharpCraft.Commands.TeleportToFacingEntityCommand.FacingSelector">
            <summary>
            The entity the other entities should face when teleported
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TeleportToFacingEntityCommand.Anchor">
            <summary>
            The part of the entity to face
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeleportToFacingEntityCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>tp [Selector] [Coordinates] facing entity [FacingSelector] [Anchor]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TeleportToRotationCommand">
            <summary>
            Command which teleports one or more entities to a location and change their rotation
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeleportToRotationCommand.#ctor(SharpCraft.Vector,SharpCraft.BaseSelector,SharpCraft.Rotation)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TeleportToRotationCommand"/>
            </summary>
            <param name="coordinates">The place to teleport the entities to</param>
            <param name="selector">Selector selecting the entities to teleport</param>
            <param name="rotation">The rotation the entites gets after being teleported</param>
        </member>
        <member name="P:SharpCraft.Commands.TeleportToRotationCommand.Rotation">
            <summary>
            The rotation the entites gets after being teleported
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TeleportToRotationCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>tp [Selector] [Coordinates] [Rotation]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TimeModifyCommand">
            <summary>
            Command which changes the time in the world
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TimeModifyCommand.#ctor(SharpCraft.Time,SharpCraft.ID.AddSetModifier)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TimeModifyCommand"/>
            </summary>
            <param name="time">The value to modify with</param>
            <param name="modifier">The way to use the modify value</param>
        </member>
        <member name="P:SharpCraft.Commands.TimeModifyCommand.Time">
            <summary>
            The value to modify with
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TimeModifyCommand.Modifier">
            <summary>
            The way to use the modify value
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TimeModifyCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>time [Modifier] [Time]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TimeQueryCommand">
            <summary>
            Command which gets the time in the world
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TimeQueryCommand.#ctor(SharpCraft.ID.QueryTime)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TimeQueryCommand"/>
            </summary>
            <param name="query">The thing to get</param>
        </member>
        <member name="P:SharpCraft.Commands.TimeQueryCommand.Query">
            <summary>
            The thing to get
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TimeQueryCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>time query [Query]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TitleClearCommand">
            <summary>
            Command which clears the title on the selected players' screens
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TitleClearCommand.#ctor(SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TitleClearCommand"/>
            </summary>
            <param name="selector">Selector selecting the players whose title to clear</param>
        </member>
        <member name="P:SharpCraft.Commands.TitleClearCommand.Selector">
            <summary>
            Selector selecting the players whose title to clear
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TitleClearCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>title [Selector] clear</returns>
        </member>
        <member name="T:SharpCraft.Commands.TitleResetCommand">
            <summary>
            Command which clears the selected players' title settings
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TitleResetCommand.#ctor(SharpCraft.BaseSelector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TitleResetCommand"/>
            </summary>
            <param name="selector">Selector selecting the players whose title settings to reset</param>
        </member>
        <member name="P:SharpCraft.Commands.TitleResetCommand.Selector">
            <summary>
            Selector selecting the players whose title settings to reset
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TitleResetCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>title [Selector] reset</returns>
        </member>
        <member name="T:SharpCraft.Commands.TitleCommand">
            <summary>
            Command which displayes a title
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TitleCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.BaseJsonText)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TitleCommand"/>
            </summary>
            <param name="selector">Selector selecting players to show the title for</param>
            <param name="text">The text to show</param>
        </member>
        <member name="P:SharpCraft.Commands.TitleCommand.Selector">
            <summary>
            Selector selecting players to show the title for
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TitleCommand.Text">
            <summary>
            The text to show
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TitleCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>title [Selector] title [Text]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TitleSubtitleCommand">
            <summary>
            Command which sets the sub title to display next
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TitleSubtitleCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.BaseJsonText)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TitleSubtitleCommand"/>
            </summary>
            <param name="selector">Selector selecting the players whose sub title to change</param>
            <param name="text">The text to show</param>
        </member>
        <member name="P:SharpCraft.Commands.TitleSubtitleCommand.Selector">
            <summary>
            Selector selecting the players whose sub title to change
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TitleSubtitleCommand.Text">
            <summary>
            The text to show
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TitleSubtitleCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>title [Selector] subtitle [Text]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TitleActionbarCommand">
            <summary>
            Command which sets the text shown in the selected players' action bars
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TitleActionbarCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.BaseJsonText)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TitleActionbarCommand"/>
            </summary>
            <param name="selector">Selector selecting the players to show the action bar text for</param>
            <param name="text">The text to show</param>
        </member>
        <member name="P:SharpCraft.Commands.TitleActionbarCommand.Selector">
            <summary>
            Selector selecting the players to show the action bar text for
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TitleActionbarCommand.Text">
            <summary>
            The text to show
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TitleActionbarCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>title [Selector] actionbar [Text]</returns>
        </member>
        <member name="T:SharpCraft.Commands.TitleTimesCommand">
            <summary>
            Command which changes how long a title will appear for the selected players
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TitleTimesCommand.#ctor(SharpCraft.BaseSelector,SharpCraft.Time,SharpCraft.Time,SharpCraft.Time)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.TitleTimesCommand"/>
            </summary>
            <param name="selector">Selector selecting the players to change the title times for</param>
            <param name="fadeIn">How long it takes for the title to fade in</param>
            <param name="stay">How long the title stays</param>
            <param name="fadeOut">How long it takes for the title to fade out</param>
        </member>
        <member name="P:SharpCraft.Commands.TitleTimesCommand.Selector">
            <summary>
            Selector selecting the players to change the title times for
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TitleTimesCommand.FadeIn">
            <summary>
            How long it takes for the title to fade in
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TitleTimesCommand.Stay">
            <summary>
            How long the title stays
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.TitleTimesCommand.FadeOut">
            <summary>
            How long it takes for the title to fade out
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.TitleTimesCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>title [Selector] times [FadeIn] [Stay] [FadeOut]</returns>
        </member>
        <member name="T:SharpCraft.Commands.WorldborderSizeCommand">
            <summary>
            Command which changes the size of the worldborder
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.WorldborderSizeCommand.#ctor(System.Double,SharpCraft.ID.AddSetModifier,SharpCraft.Time)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.WorldborderSizeCommand"/>
            </summary>
            <param name="size">The size to modify with</param>
            <param name="modifier">The way to modify the size</param>
            <param name="time">The amount of time to modification takes. Leave null to make it happen instant</param>
        </member>
        <member name="P:SharpCraft.Commands.WorldborderSizeCommand.Size">
            <summary>
            The size to modify with
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.WorldborderSizeCommand.Modifier">
            <summary>
            The way to modify the size
            </summary>
        </member>
        <member name="P:SharpCraft.Commands.WorldborderSizeCommand.Time">
            <summary>
            The amount of time to modification takes. Leave null to make it happen instant
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.WorldborderSizeCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>worldborder [Modifier] [Size] ([Time])</returns>
        </member>
        <member name="T:SharpCraft.Commands.WorldborderCenterCommand">
            <summary>
            Command which changes the center of the world border
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.WorldborderCenterCommand.#ctor(SharpCraft.Vector)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.WorldborderCenterCommand"/>
            </summary>
            <param name="coordinates">The new center of the world border</param>
        </member>
        <member name="P:SharpCraft.Commands.WorldborderCenterCommand.Coordinates">
            <summary>
            The new center of the world border
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.WorldborderCenterCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>worldborder center [Coordinates]</returns>
        </member>
        <member name="T:SharpCraft.Commands.WorldborderDamageAmountCommand">
            <summary>
            Command which changes the amount of damage the worlder border does
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.WorldborderDamageAmountCommand.#ctor(System.Double)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.WorldborderDamageAmountCommand"/>
            </summary>
            <param name="damagePerBlock">The amount of damage the border should do per block per second</param>
        </member>
        <member name="P:SharpCraft.Commands.WorldborderDamageAmountCommand.DamagePerBlock">
            <summary>
            The amount of damage the border should do per block per second
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.WorldborderDamageAmountCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>worldborder damage amount [DamagePerBlock]</returns>
        </member>
        <member name="T:SharpCraft.Commands.WorldborderDamageBufferCommand">
            <summary>
            Command which changes the amount of blocks players can be inside the border before taking damage
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.WorldborderDamageBufferCommand.#ctor(System.Double)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.WorldborderDamageBufferCommand"/>
            </summary>
            <param name="buffer">The amount of blocks the player has to be inside the border to take damage</param>
        </member>
        <member name="P:SharpCraft.Commands.WorldborderDamageBufferCommand.Buffer">
            <summary>
            The amount of blocks the player has to be inside the border to take damage
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.WorldborderDamageBufferCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>worldborder damage buffer [Buffer]</returns>
        </member>
        <member name="T:SharpCraft.Commands.WorldborderGetCommand">
            <summary>
            Command which returns the size of the world border
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.WorldborderGetCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>worldborder get</returns>
        </member>
        <member name="T:SharpCraft.Commands.WorldborderWarningDistanceCommand">
            <summary>
            Command which changes the distance players have to be away from the border to be warned
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.WorldborderWarningDistanceCommand.#ctor(System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Commands.WorldborderWarningDistanceCommand"/>
            </summary>
            <param name="distance">The distance the player has to be away from the border before they are being warned</param>
        </member>
        <member name="P:SharpCraft.Commands.WorldborderWarningDistanceCommand.Distance">
            <summary>
            The distance the player has to be away from the border before they are being warned
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.WorldborderWarningDistanceCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>worldborder warning distance [Distance]</returns>
        </member>
        <member name="T:SharpCraft.Commands.WorldborderWarningTimeCommand">
            <summary>
            Command which changes how much time in advance the border should warn players when the border is shrinking
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.WorldborderWarningTimeCommand.#ctor(SharpCraft.Time)">
            <summary>
            Intializes an ew <see cref="T:SharpCraft.Commands.WorldborderWarningTimeCommand"/>
            </summary>
            <param name="time">The amount of time in advance the border should warn players when the border is shrinking</param>
        </member>
        <member name="P:SharpCraft.Commands.WorldborderWarningTimeCommand.Time">
            <summary>
            The amount of time in advance the border should warn players when the border is shrinking
            </summary>
        </member>
        <member name="M:SharpCraft.Commands.WorldborderWarningTimeCommand.GetCommandString">
            <summary>
            Returns the part of the execute command there is special for this command
            </summary>
            <returns>worldborder warning time [Time]</returns>
        </member>
        <member name="T:SharpCraft.Function">
            <summary>
            Class for function files
            </summary>
        </member>
        <member name="T:SharpCraft.Function.FunctionWriter">
            <summary>
            Used to add commands to the given function
            </summary>
            <param name="function">the function to give the commands to</param>
        </member>
        <member name="T:SharpCraft.Function.CommandWriteListener">
            <summary>
            Used for running things on a function when it writes a command
            </summary>
            <param name="file">the function file which is writing the command</param>
            <param name="command">The command its writing</param>
        </member>
        <member name="M:SharpCraft.Function.#ctor(System.Boolean,SharpCraft.BasePackNamespace,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Function"/> with the given values. Inherite from this constructor.
            </summary>
            <param name="space">The namespace the function is in</param>
            <param name="fileName">The name of the function</param>
            <param name="writeSetting">The setting for writing the file</param>
            <param name="_">Unused parameter used for specifing you want to use this constructor</param>
        </member>
        <member name="M:SharpCraft.Function.#ctor(SharpCraft.BasePackNamespace,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Function"/> with the given values
            </summary>
            <param name="space">The namespace the function is in</param>
            <param name="fileName">The name of the function</param>
            <param name="writeSetting">The setting for writing the file</param>
        </member>
        <member name="M:SharpCraft.Function.FinishedConstructing">
            <summary>
            Call when constructors are done
            </summary>
        </member>
        <member name="P:SharpCraft.Function.Commands">
            <summary>
            The commands in the function. If the function file is auto then this list only contains all commands there are after an active <see cref="T:SharpCraft.Commands.ICommandChanger"/>. Please use <see cref="M:SharpCraft.Function.AddCommand(SharpCraft.Commands.ICommand)"/> for actually adding commands
            </summary>
        </member>
        <member name="M:SharpCraft.Function.AddCommand(SharpCraft.Commands.ICommand)">
            <summary>
            Adds a command to this function
            </summary>
            <param name="command">The command to add</param>
        </member>
        <member name="P:SharpCraft.Function.Name">
            <summary>
            Returns <see cref="M:SharpCraft.BaseFile.GetNamespacedName"/>
            </summary>
        </member>
        <member name="M:SharpCraft.Function.GetStream">
            <summary>
            Returns the streamwriter to use
            </summary>
            <returns>the streamwriter to use</returns>
        </member>
        <member name="P:SharpCraft.Function.Block">
            <summary>
            Commands run on blocks
            </summary>
        </member>
        <member name="P:SharpCraft.Function.Entity">
            <summary>
            Commands run on entities
            </summary>
        </member>
        <member name="P:SharpCraft.Function.Execute">
            <summary>
            Execute commands
            </summary>
        </member>
        <member name="P:SharpCraft.Function.Player">
            <summary>
            Commands run on players
            </summary>
        </member>
        <member name="P:SharpCraft.Function.World">
            <summary>
            Commands run on the world
            </summary>
        </member>
        <member name="P:SharpCraft.Function.Custom">
            <summary>
            Custom commands to make life easier
            </summary>
        </member>
        <member name="M:SharpCraft.Function.NewChild(System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a folder with this function's name and creates a new <see cref="T:SharpCraft.Function"/> inside of it with the specified name
            </summary>
            <param name="name">The name of the new <see cref="T:SharpCraft.Function"/></param>
            <param name="writeSetting">The setting for writing the file</param>
            <returns>The new <see cref="T:SharpCraft.Function"/></returns>
        </member>
        <member name="M:SharpCraft.Function.NewChild(System.String,SharpCraft.Function.FunctionWriter,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a folder with this function's name and creates a new <see cref="T:SharpCraft.Function"/> inside of it with the specified name and commands
            </summary>
            <param name="name">The name of the new <see cref="T:SharpCraft.Function"/></param>
            <param name="creater">a method creating the new <see cref="T:SharpCraft.Function"/></param>
            <param name="writeSetting">The setting for writing the file</param>
            <returns>The new <see cref="T:SharpCraft.Function"/></returns>
        </member>
        <member name="M:SharpCraft.Function.NewChild(SharpCraft.Function.FunctionWriter,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a folder with this function's name and creates a new <see cref="T:SharpCraft.Function"/> inside of it with the specified commands
            </summary>
            <param name="creater">a method creating the new <see cref="T:SharpCraft.Function"/></param>
            <param name="writeSetting">The setting for writing the file</param>
            <returns>The new <see cref="T:SharpCraft.Function"/></returns>
        </member>
        <member name="M:SharpCraft.Function.NewSibling(System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a new <see cref="T:SharpCraft.Function"/> with the specified name in the same folder as this function
            </summary>
            <param name="name">The name of the new <see cref="T:SharpCraft.Function"/></param>
            <param name="writeSetting">The setting for writing the file</param>
            <returns>The new <see cref="T:SharpCraft.Function"/></returns>
        </member>
        <member name="M:SharpCraft.Function.NewSibling(System.String,SharpCraft.Function.FunctionWriter,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a new <see cref="T:SharpCraft.Function"/> with the specified name and commands in the same folder as this function
            </summary>
            <param name="name">The name of the new <see cref="T:SharpCraft.Function"/></param>
            <param name="creater">a method creating the new <see cref="T:SharpCraft.Function"/></param>
            <param name="writeSetting">The setting for writing the file</param>
            <returns>The new <see cref="T:SharpCraft.Function"/></returns>
        </member>
        <member name="M:SharpCraft.Function.NewSibling(SharpCraft.Function.FunctionWriter,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a new <see cref="T:SharpCraft.Function"/> with the specified commands in the same folder as this function
            </summary>
            <param name="creater">a method creating the new <see cref="T:SharpCraft.Function"/></param>
            <param name="writeSetting">The setting for writing the file</param>
            <returns>The new <see cref="T:SharpCraft.Function"/></returns>
        </member>
        <member name="M:SharpCraft.Function.AddCommandListener(SharpCraft.Function.CommandWriteListener)">
            <summary>
            Adds a listener to this file which will be called when the file writes a new command
            </summary>
            <param name="listener">The listener to add</param>
        </member>
        <member name="M:SharpCraft.Function.Dispose">
            <summary>
            Disposes this file. If the write setting is OnDispose it will write the file
            </summary>
        </member>
        <member name="M:SharpCraft.Function.WriteFile(System.IO.TextWriter)">
            <summary>
            Writes the file
            </summary>
            <param name="stream">The stream used for writing the file</param>
        </member>
        <member name="M:SharpCraft.Function.AfterDispose">
            <summary>
            Clears the things in the file.
            </summary>
        </member>
        <member name="M:SharpCraft.Function.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this recipe into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">Not in use</param>
            <param name="extraConversionData">Not in use</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="T:SharpCraft.EmptyFunction">
            <summary>
            Class for functions which should be callable.
            </summary>
        </member>
        <member name="M:SharpCraft.EmptyFunction.#ctor(SharpCraft.BasePackNamespace,System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.EmptyFunction"/>
            </summary>
            <param name="packNamespace">The namespace the function is in</param>
            <param name="name">The name of the function</param>
        </member>
        <member name="P:SharpCraft.EmptyFunction.FileId">
            <summary>
            The name of the function
            </summary>
        </member>
        <member name="P:SharpCraft.EmptyFunction.PackNamespace">
            <summary>
            The namespace the function is in
            </summary>
        </member>
        <member name="M:SharpCraft.EmptyFunction.GetNamespacedName">
            <summary>
            Returns the string used for running this function
            </summary>
            <returns>The string used for running this function</returns>
        </member>
        <member name="P:SharpCraft.EmptyFunction.Name">
            <summary>
            Returns <see cref="M:SharpCraft.BaseFile.GetNamespacedName"/>
            </summary>
        </member>
        <member name="M:SharpCraft.EmptyFunction.op_Implicit(System.String)~SharpCraft.EmptyFunction">
            <summary>
            Converts a string of the format NAMESPACE:FUNCTION into an <see cref="T:SharpCraft.EmptyFunction"/>
            </summary>
            <param name="function">The string to convert</param>
        </member>
        <member name="M:SharpCraft.EmptyFunction.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this recipe into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">Not in use</param>
            <param name="extraConversionData">Not in use</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="T:SharpCraft.IFunction">
            <summary>
            Interface for functions
            </summary>
        </member>
        <member name="P:SharpCraft.IFunction.FileId">
            <summary>
            The file name of the function
            </summary>
        </member>
        <member name="P:SharpCraft.IFunction.PackNamespace">
            <summary>
            The namespace the function is in
            </summary>
        </member>
        <member name="M:SharpCraft.IFunction.GetNamespacedName">
            <summary>
            Should return the string used for running the function
            </summary>
            <returns>string for running the function</returns>
        </member>
        <member name="T:SharpCraft.IGroup`1">
            <summary>
            Interface for groups of an item
            </summary>
        </member>
        <member name="T:SharpCraft.BaseGroup`1">
            <summary>
            Abstract class for Groups of an item.
            </summary>
            <typeparam name="TItem">The item the group is for</typeparam>
        </member>
        <member name="M:SharpCraft.BaseGroup`1.#ctor(SharpCraft.BasePackNamespace,System.String,System.Collections.Generic.List{`0},System.Boolean,SharpCraft.BaseFile.WriteSetting,System.String)">
            <summary>
            Intializes a new Group with the given parameters
            </summary>
            <param name="packNamespace">The namespace the group is in</param>
            <param name="fileName">The name of the group file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="items">The items in this group</param>
            <param name="appendGroup">If this group should append other groups of the same type and same name from other datapacks</param>
            <param name="fileType">The type of group file</param>
        </member>
        <member name="P:SharpCraft.BaseGroup`1.Items">
            <summary>
            The items in this group
            </summary>
        </member>
        <member name="P:SharpCraft.BaseGroup`1.AppendGroup">
            <summary>
            If this group should append other groups of the same type and same name from other datapacks
            </summary>
        </member>
        <member name="M:SharpCraft.BaseGroup`1.WriteFile(System.IO.TextWriter)">
            <summary>
            Writes the file
            </summary>
            <param name="stream">The stream used for writing the file</param>
        </member>
        <member name="M:SharpCraft.BaseGroup`1.GetNamespacedName">
            <summary>
            Returns the namespaced name of this file
            </summary>
            <returns>The namespaced name of this file</returns>
        </member>
        <member name="M:SharpCraft.BaseGroup`1.AfterDispose">
            <summary>
            Clears the things in the file.
            </summary>
        </member>
        <member name="T:SharpCraft.IGroupable">
            <summary>
            Interface for items which can be in a Minecraft group
            </summary>
        </member>
        <member name="P:SharpCraft.IGroupable.Name">
            <summary>
            The name Minecraft uses for the item
            </summary>
        </member>
        <member name="T:SharpCraft.BlockGroup">
            <summary>
            Class for <see cref="T:SharpCraft.BlockType"/> groups files
            </summary>
        </member>
        <member name="M:SharpCraft.BlockGroup.#ctor(System.Boolean,SharpCraft.BasePackNamespace,System.String,System.Collections.Generic.List{SharpCraft.BlockType},System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new Group with the given parameters. Inherite from this constructor.
            </summary>
            <param name="packNamespace">The namespace the group is in</param>
            <param name="fileName">The name of the group file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="items">The items in this group</param>
            <param name="appendGroup">If this group should append other groups of the same type and same name from other datapacks</param>
            <param name="_">Unused parameter used for specifing you want to use this constructor</param>
        </member>
        <member name="M:SharpCraft.BlockGroup.#ctor(SharpCraft.BasePackNamespace,System.String,System.Collections.Generic.List{SharpCraft.BlockType},System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new Group with the given parameters
            </summary>
            <param name="packNamespace">The namespace the group is in</param>
            <param name="fileName">The name of the group file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="items">The items in this group</param>
            <param name="appendGroup">If this group should append other groups of the same type and same name from other datapacks</param>
        </member>
        <member name="P:SharpCraft.BlockGroup.Name">
            <summary>
            Returns <see cref="M:SharpCraft.BaseFile.GetNamespacedName"/>
            </summary>
        </member>
        <member name="P:SharpCraft.BlockGroup.Value">
            <summary>
            The value (Used for when converted into a block type)
            </summary>
        </member>
        <member name="M:SharpCraft.BlockGroup.GetStream">
            <summary>
            Returns the stream this file is going to use for writing it's file
            </summary>
            <returns>The stream for this file</returns>
        </member>
        <member name="M:SharpCraft.BlockGroup.op_Implicit(SharpCraft.BlockGroup)~SharpCraft.BlockType">
            <summary>
            implicit converts a <see cref="T:SharpCraft.BlockGroup"/> into a <see cref="T:SharpCraft.BlockType"/> object
            </summary>
            <param name="group">The group to convert</param>
        </member>
        <member name="T:SharpCraft.EmptyGroup`1">
            <summary>
            Used for calling groups outside this program
            </summary>
        </member>
        <member name="M:SharpCraft.EmptyGroup`1.#ctor(SharpCraft.BasePackNamespace,System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.EmptyGroup`1"/>
            </summary>
            <param name="packNamespace">The namespace the group is in</param>
            <param name="fileName">The name of the group</param>
        </member>
        <member name="P:SharpCraft.EmptyGroup`1.FileName">
            <summary>
            The name of the group
            </summary>
        </member>
        <member name="P:SharpCraft.EmptyGroup`1.PackNamespace">
            <summary>
            The namespace the group is in
            </summary>
        </member>
        <member name="P:SharpCraft.EmptyGroup`1.Value">
            <summary>
            This
            </summary>
        </member>
        <member name="P:SharpCraft.EmptyGroup`1.Name">
            <summary>
            The name of this group
            </summary>
        </member>
        <member name="P:SharpCraft.EmptyGroup`1.FileId">
            <summary>
            The name of this group
            </summary>
        </member>
        <member name="M:SharpCraft.EmptyGroup`1.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this recipe into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">Not in use</param>
            <param name="extraConversionData">Not in use</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="M:SharpCraft.EmptyGroup`1.GetNamespacedName">
            <summary>
            Returns the string used for refering this group
            </summary>
            <returns>The string used for refering this group</returns>
        </member>
        <member name="T:SharpCraft.EntityGroup">
            <summary>
            Class for <see cref="T:SharpCraft.EntityType"/> groups files
            </summary>
        </member>
        <member name="M:SharpCraft.EntityGroup.#ctor(System.Boolean,SharpCraft.BasePackNamespace,System.String,System.Collections.Generic.List{SharpCraft.EntityType},System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new Group with the given parameters. Inherite from this constructor.
            </summary>
            <param name="packNamespace">The namespace the group is in</param>
            <param name="fileName">The name of the group file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="items">The items in this group</param>
            <param name="appendGroup">If this group should append other groups of the same type and same name from other datapacks</param>
            <param name="_">Unused parameter used for specifing you want to use this constructor</param>
        </member>
        <member name="M:SharpCraft.EntityGroup.#ctor(SharpCraft.BasePackNamespace,System.String,System.Collections.Generic.List{SharpCraft.EntityType},System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new Group with the given parameters
            </summary>
            <param name="packNamespace">The namespace the group is in</param>
            <param name="fileName">The name of the group file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="items">The items in this group</param>
            <param name="appendGroup">If this group should append other groups of the same type and same name from other datapacks</param>
        </member>
        <member name="P:SharpCraft.EntityGroup.Value">
            <summary>
            The value (Used for when converted into an entity type)
            </summary>
        </member>
        <member name="P:SharpCraft.EntityGroup.Name">
            <summary>
            Returns <see cref="M:SharpCraft.BaseFile.GetNamespacedName"/>
            </summary>
        </member>
        <member name="M:SharpCraft.EntityGroup.GetStream">
            <summary>
            Returns the stream this file is going to use for writing it's file
            </summary>
            <returns>The stream for this file</returns>
        </member>
        <member name="M:SharpCraft.EntityGroup.op_Implicit(SharpCraft.EntityGroup)~SharpCraft.EntityType">
            <summary>
            implicit converts a <see cref="T:SharpCraft.EntityGroup"/> into a <see cref="T:SharpCraft.EntityType"/> object
            </summary>
            <param name="group">The group to convert</param>
        </member>
        <member name="T:SharpCraft.FunctionGroup">
            <summary>
            Class for <see cref="T:SharpCraft.IFunction"/> groups files
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionGroup.#ctor(System.Boolean,SharpCraft.BasePackNamespace,System.String,System.Collections.Generic.List{SharpCraft.IFunction},System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new Group with the given parameters. Inherite from this constructor.
            </summary>
            <param name="packNamespace">The namespace the group is in</param>
            <param name="fileName">The name of the group file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="items">The items in this group</param>
            <param name="appendGroup">If this group should append other groups of the same type and same name from other datapacks</param>
            <param name="_">Unused parameter used for specifing you want to use this constructor</param>
        </member>
        <member name="M:SharpCraft.FunctionGroup.#ctor(SharpCraft.BasePackNamespace,System.String,System.Collections.Generic.List{SharpCraft.IFunction},System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new Group with the given parameters
            </summary>
            <param name="packNamespace">The namespace the group is in</param>
            <param name="fileName">The name of the group file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="items">The items in this group</param>
            <param name="appendGroup">If this group should append other groups of the same type and same name from other datapacks</param>
        </member>
        <member name="P:SharpCraft.FunctionGroup.Name">
            <summary>
            Returns <see cref="M:SharpCraft.BaseFile.GetNamespacedName"/>
            </summary>
        </member>
        <member name="M:SharpCraft.FunctionGroup.GetStream">
            <summary>
            Returns the stream this file is going to use for writing it's file
            </summary>
            <returns>The stream for this file</returns>
        </member>
        <member name="M:SharpCraft.FunctionGroup.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this recipe into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">Not in use</param>
            <param name="extraConversionData">Not in use</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="T:SharpCraft.ItemGroup">
            <summary>
            Class for <see cref="T:SharpCraft.IFunction"/> groups files
            </summary>
        </member>
        <member name="M:SharpCraft.ItemGroup.#ctor(System.Boolean,SharpCraft.BasePackNamespace,System.String,System.Collections.Generic.List{SharpCraft.ItemType},System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new Group with the given parameters. Inherite from this constructor.
            </summary>
            <param name="packNamespace">The namespace the group is in</param>
            <param name="fileName">The name of the group file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="items">The items in this group</param>
            <param name="appendGroup">If this group should append other groups of the same type and same name from other datapacks</param>
            <param name="_">Unused parameter used for specifing you want to use this constructor</param>
        </member>
        <member name="M:SharpCraft.ItemGroup.#ctor(SharpCraft.BasePackNamespace,System.String,System.Collections.Generic.List{SharpCraft.ItemType},System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new Group with the given parameters
            </summary>
            <param name="packNamespace">The namespace the group is in</param>
            <param name="fileName">The name of the group file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="items">The items in this group</param>
            <param name="appendGroup">If this group should append other groups of the same type and same name from other datapacks</param>
        </member>
        <member name="P:SharpCraft.ItemGroup.Value">
            <summary>
            The value (Used for when converted into an item type)
            </summary>
        </member>
        <member name="P:SharpCraft.ItemGroup.Name">
            <summary>
            Returns <see cref="M:SharpCraft.BaseFile.GetNamespacedName"/>
            </summary>
        </member>
        <member name="M:SharpCraft.ItemGroup.GetStream">
            <summary>
            Returns the stream this file is going to use for writing it's file
            </summary>
            <returns>The stream for this file</returns>
        </member>
        <member name="M:SharpCraft.ItemGroup.op_Implicit(SharpCraft.ItemGroup)~SharpCraft.ItemType">
            <summary>
            implicit converts a <see cref="T:SharpCraft.ItemGroup"/> into a <see cref="T:SharpCraft.ItemType"/> object
            </summary>
            <param name="group">The group to convert</param>
        </member>
        <member name="M:SharpCraft.ItemGroup.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this <see cref="T:SharpCraft.ItemType"/> into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">The type of tag to get. Set to null or <see cref="F:SharpCraft.ID.NBTTagType.TagString"/></param>
            <param name="extraConversionData">0: If true returns the string without the #</param>
            <returns>This <see cref="T:SharpCraft.ItemType"/> as a <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="T:SharpCraft.LiquidGroup">
            <summary>
            Class for <see cref="T:SharpCraft.LiquidType"/> groups files
            </summary>
        </member>
        <member name="M:SharpCraft.LiquidGroup.#ctor(System.Boolean,SharpCraft.BasePackNamespace,System.String,System.Collections.Generic.List{SharpCraft.LiquidType},System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new Group with the given parameters. Inherite from this constructor.
            </summary>
            <param name="packNamespace">The namespace the group is in</param>
            <param name="fileName">The name of the group file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="items">The items in this group</param>
            <param name="appendGroup">If this group should append other groups of the same type and same name from other datapacks</param>
            <param name="_">Unused parameter used for specifing you want to use this constructor</param>
        </member>
        <member name="M:SharpCraft.LiquidGroup.#ctor(SharpCraft.BasePackNamespace,System.String,System.Collections.Generic.List{SharpCraft.LiquidType},System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new Group with the given parameters
            </summary>
            <param name="packNamespace">The namespace the group is in</param>
            <param name="fileName">The name of the group file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="items">The items in this group</param>
            <param name="appendGroup">If this group should append other groups of the same type and same name from other datapacks</param>
        </member>
        <member name="P:SharpCraft.LiquidGroup.Value">
            <summary>
            The value (Used for when converted into a liquid type)
            </summary>
        </member>
        <member name="P:SharpCraft.LiquidGroup.Name">
            <summary>
            Returns <see cref="M:SharpCraft.BaseFile.GetNamespacedName"/>
            </summary>
        </member>
        <member name="M:SharpCraft.LiquidGroup.GetStream">
            <summary>
            Returns the stream this file is going to use for writing it's file
            </summary>
            <returns>The stream for this file</returns>
        </member>
        <member name="M:SharpCraft.LiquidGroup.op_Implicit(SharpCraft.LiquidGroup)~SharpCraft.LiquidType">
            <summary>
            implicit converts a <see cref="T:SharpCraft.LiquidGroup"/> into a <see cref="T:SharpCraft.LiquidType"/> object
            </summary>
            <param name="group">The group to convert</param>
        </member>
        <member name="T:SharpCraft.INamespaceSetting">
            <summary>
            Interface for settings a <see cref="T:SharpCraft.BasePackNamespace"/> can have
            </summary>
        </member>
        <member name="T:SharpCraft.NamespaceSettings">
            <summary>
            Holds settings <see cref="T:SharpCraft.BasePackNamespace"/> can have
            </summary>
        </member>
        <member name="M:SharpCraft.NamespaceSettings.GenerateNames">
            <summary>
            Use this setting to force files to get a generated name
            </summary>
            <returns>The setting</returns>
        </member>
        <member name="M:SharpCraft.NamespaceSettings.FunctionGroupedCommands">
            <summary>
            Settting used for making the custom command group method make a function instead of using execute commands.
            </summary>
            <returns>The setting</returns>
        </member>
        <member name="T:SharpCraft.LootObjects.AttributeChange">
            <summary>
            Changes the attributes on the item
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.AttributeChange.#ctor(SharpCraft.LootObjects.AttributeChange.Attribute[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.DecayChange"/>
            </summary>
            <param name="attributes">An array of attributes the item should get</param>
        </member>
        <member name="P:SharpCraft.LootObjects.AttributeChange.Attributes">
            <summary>
            An array of attributes the item should get
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.AttributeChange.Attribute">
            <summary>
            Class for attribute an item can get
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.AttributeChange.Attribute.#ctor(SharpCraft.ID.AttributeType,SharpCraft.ID.AttributeOperation,SharpCraft.MCRange,SharpCraft.ID.AttributeSlot[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.AttributeChange.Attribute"/>
            </summary>
            <param name="type">The type of attribute</param>
            <param name="operation">The attribute operation to use</param>
            <param name="value">The value to use in the operation</param>
            <param name="slot">Choses a random slot from the array the attribute effect works in</param>
        </member>
        <member name="M:SharpCraft.LootObjects.AttributeChange.Attribute.#ctor(SharpCraft.ID.AttributeType,SharpCraft.ID.AttributeOperation,SharpCraft.MCRange,SharpCraft.ID.AttributeSlot)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.AttributeChange.Attribute"/>
            </summary>
            <param name="type">The type of attribute</param>
            <param name="operation">The attribute operation to use</param>
            <param name="value">The value to use in the operation</param>
            <param name="slot">The slot the attribute effect works in</param>
        </member>
        <member name="P:SharpCraft.LootObjects.AttributeChange.Attribute.Type">
            <summary>
            The type of attribute
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.AttributeChange.Attribute.Name">
            <summary>
            The name of the attribute
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.AttributeChange.Attribute.Operation">
            <summary>
            The attribute operation to use
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.AttributeChange.Attribute.Value">
            <summary>
            The value to use in the operation
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.AttributeChange.Attribute.UUID">
            <summary>
            The UUID of the attribute. Leave empty to generate random one
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.AttributeChange.Attribute.Slot">
            <summary>
            Choses a random slot from the array the attribute effect works in
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.BaseChange">
            <summary>
            Base class for objects used for changing a loot table item
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.BaseChange.#ctor(System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.BaseChange"/>
            </summary>
            <param name="name">The name of the change</param>
        </member>
        <member name="P:SharpCraft.LootObjects.BaseChange.ChangeName">
            <summary>
            The name of the change
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.BaseChange.Conditions">
            <summary>
            An array conditions which has to be true for the change to take place
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.BaseChange.op_Implicit(SharpCraft.LootObjects.BaseChange)~SharpCraft.LootObjects.BaseChange[]">
            <summary>
            Converts a single change into an array
            </summary>
            <param name="change">The change to convert</param>
        </member>
        <member name="T:SharpCraft.LootObjects.BinomialDistributionCountChange">
            <summary>
            Changes the loot count using binomual distribution
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.BinomialDistributionCountChange.#ctor(SharpCraft.ID.Enchant,System.Int32,System.Double)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.BinomialDistributionCountChange"/>
            </summary>
            <param name="enchant">The enchant to get the level from. The level is added to extra</param>
            <param name="maxItems">The amount of items to drop</param>
            <param name="probability">The probability for an item to drop</param>
        </member>
        <member name="P:SharpCraft.LootObjects.BinomialDistributionCountChange.Formula">
            <summary>
            The formula used
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.BinomialDistributionCountChange.Enchant">
            <summary>
            The enchant to get the level from. The level is added to extra
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.BinomialDistributionCountChange.MaxItems">
            <summary>
            The amount of items to drop
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.BinomialDistributionCountChange.Probability">
            <summary>
            The probability for an item to drop
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.UniformDistributionCountChange">
            <summary>
            Changes the loot count using uniform distribution. Drops 0 to Enchant.Level * Multiplier
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.UniformDistributionCountChange.#ctor(SharpCraft.ID.Enchant,System.Double)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.UniformDistributionCountChange"/>
            </summary>
            <param name="enchant">The enchant to get the level from.</param>
            <param name="multiplier">The number to multiple the enchant level with.</param>
        </member>
        <member name="P:SharpCraft.LootObjects.UniformDistributionCountChange.Formula">
            <summary>
            The formula used
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.UniformDistributionCountChange.Enchant">
            <summary>
            The enchant to get the level from (An enchant on the item which activated this loot table)
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.UniformDistributionCountChange.Multiplier">
            <summary>
            The number to multiple the enchant level with.
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.ContentChange">
            <summary>
            Changes the content stored in the loot
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.ContentChange.#ctor(SharpCraft.LootObjects.BaseEntry[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.ContentChange"/>
            </summary>
            <param name="entries">The loot to put into the item</param>
        </member>
        <member name="P:SharpCraft.LootObjects.ContentChange.Entries">
            <summary>
            The loot to put into the item
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.CopyNameChange">
            <summary>
            Changes the loot name to the name of the broken block
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.CopyNameChange.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.CopyNameChange"/>
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.CopyNameChange.Target">
            <summary>
            The place to copy the name from (Can only be block_entity)
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.CopyNBTChange">
            <summary>
            Changes the loot nbt to nbt from another place
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.CopyNBTChange.#ctor(SharpCraft.ID.LootTarget,SharpCraft.LootObjects.CopyNBTChange.CopyOperation[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.CopyNBTChange"/>
            </summary>
            <param name="operations">The copy operations to run</param>
            <param name="target">The target to copy from</param>
        </member>
        <member name="P:SharpCraft.LootObjects.CopyNBTChange.Target">
            <summary>
            The target to copy from
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.CopyNBTChange.Operations">
            <summary>
            The copy operations to run
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.CopyNBTChange.CopyOperation">
            <summary>
            Class for making nbt copy operations
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.CopyNBTChange.CopyOperation.#ctor(System.String,System.String,SharpCraft.ID.EntityDataModifierType)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.CopyNBTChange.CopyOperation"/>
            </summary>
            <param name="fromDataPath">The datapath to copy from</param>
            <param name="toDataPath">The datapath on the item to copy to. Starting from the Item's "Tag" tag</param>
            <param name="copyType">The way to copy the data</param>
        </member>
        <member name="P:SharpCraft.LootObjects.CopyNBTChange.CopyOperation.FromDataPath">
            <summary>
            The datapath to copy from
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.CopyNBTChange.CopyOperation.ToDataPath">
            <summary>
            The datapath on the item to copy to. Starting from the Item's "Tag" tag
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.CopyNBTChange.CopyOperation.CopyType">
            <summary>
            The way to copy the data
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.CopyStateChange">
            <summary>
            Changes the state in the loot item to the state of the broken block
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.CopyStateChange.#ctor(SharpCraft.BlockType,System.String[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.CopyStateChange"/>
            </summary>
            <param name="id">The block to copy the state from</param>
            <param name="states">The states to copy</param>
        </member>
        <member name="P:SharpCraft.LootObjects.CopyStateChange.Id">
            <summary>
            The block to copy the state from
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.CopyStateChange.States">
            <summary>
            The states to copy
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.CountChange">
            <summary>
            Changes the amount of items
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.CountChange.#ctor(SharpCraft.MCRange)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.CountChange"/>
            </summary>
            <param name="count">The amount of items</param>
        </member>
        <member name="P:SharpCraft.LootObjects.CountChange.Count">
            <summary>
            The amount of items in each stack
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.DamageChange">
            <summary>
            Changes the amount of damage on the item
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.DamageChange.#ctor(SharpCraft.MCRange)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.DamageChange"/>
            </summary>
            <param name="damage">The amount of damage on the item. (0 = no durability, 1 = full)</param>
        </member>
        <member name="P:SharpCraft.LootObjects.DamageChange.Damage">
            <summary>
            The amount of damage on the item. (0 = no durability, 1 = full)
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.DecayChange">
            <summary>
            Makes less items drop. 1/Explosion Radius chance an item won't survive
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.DecayChange.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.DecayChange"/>
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.EnchantChange">
            <summary>
            Changes the enchants on the item to some of the given enchants
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.EnchantChange.#ctor(SharpCraft.ID.Enchant[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.EnchantChange"/>
            </summary>
            <param name="possibleEnchants">Enchants which the item randomly can get</param>
        </member>
        <member name="P:SharpCraft.LootObjects.EnchantChange.PossibleEnchants">
            <summary>
            Enchants which the item randomly can get
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.EnchantRandomlyChange">
            <summary>
            Changes the enchants on the item by enchanting the item with the given amount of levels
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.EnchantRandomlyChange.#ctor(SharpCraft.MCRange,System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.EnchantRandomlyChange"/>
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.EnchantRandomlyChange.Treasure">
            <summary>
            If treasure enchants should be get-able
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.EnchantRandomlyChange.Levels">
            <summary>
            The amount of levels to enchant with
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.LimitCountChange">
            <summary>
            Changes the amount of items there can be in each stack
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.LimitCountChange.#ctor(SharpCraft.MCRange)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.LimitCountChange"/>
            </summary>
            <param name="limit">The amount of items in each stack</param>
        </member>
        <member name="P:SharpCraft.LootObjects.LimitCountChange.Limit">
            <summary>
            The amount of items in each stack
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.LootingChange">
            <summary>
            Changes the amount of items there can be in each stack
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.LootingChange.#ctor(SharpCraft.MCRange,System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.LootingChange"/>
            </summary>
            <param name="count">The amount of items in each stack</param>
            <param name="limit">The maximum amount of items this change can make. Setting to 0 = no limit.</param>
        </member>
        <member name="P:SharpCraft.LootObjects.LootingChange.Count">
            <summary>
            The amount of extra items per looting level
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.LootingChange.Limit">
            <summary>
            The maximum amount of items this change can make. Setting to 0 = no limit.
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.LoreChange">
            <summary>
            Changes the loot lore
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.LoreChange.#ctor(SharpCraft.BaseJsonText[],System.Nullable{SharpCraft.ID.LootTarget},System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.LoreChange"/>
            </summary>
            <param name="lore">The lore</param>
            <param name="replace">True replaces the old lore. False appends the lore.</param>
            <param name="target">The entity @s referes to in the lore</param>
        </member>
        <member name="P:SharpCraft.LootObjects.LoreChange.Target">
            <summary>
            The entity @s referes to in the lore
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.LoreChange.Lore">
            <summary>
            The lore
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.LoreChange.Replace">
            <summary>
            True replaces the old lore. False appends the lore.
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.MapChange">
            <summary>
            Changes map item destination
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.MapChange.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.MapChange"/>
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.MapChange.Structure">
            <summary>
            The destination of the map
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.MapChange.Marker">
            <summary>
            The icon used for marking the destination on the map
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.MapChange.ZoomLevel">
            <summary>
            The zoom level on the map
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.MapChange.SearchRadius">
            <summary>
            The radius to search for the structure in.
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.MapChange.SkipExistingChunks">
            <summary>
            If the map shouldn't be able to find already found structures
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.NameChange">
            <summary>
            Changes the loot name
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.NameChange.#ctor(SharpCraft.BaseJsonText,System.Nullable{SharpCraft.ID.LootTarget})">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.NameChange"/>
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.NameChange.Target">
            <summary>
            The entity @s referes to in the name
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.NameChange.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.NBTChange">
            <summary>
            Changes the loot nbt
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.NBTChange.#ctor(SharpCraft.Data.SimpleDataHolder)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.NBTChange"/>
            </summary>
            <param name="data">The NBT to use</param>
        </member>
        <member name="P:SharpCraft.LootObjects.NBTChange.Data">
            <summary>
            The NBT to use
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.OreCountChange">
            <summary>
            Changes the loot count using the normal fortune ore drop method... whatever that is
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.OreCountChange.#ctor(SharpCraft.ID.Enchant)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.OreCountChange"/>
            </summary>
            <param name="enchant">The enchant to get the level from (An enchant on the item which activated this loot table)</param>
        </member>
        <member name="P:SharpCraft.LootObjects.OreCountChange.Formula">
            <summary>
            The formula used
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.OreCountChange.Enchant">
            <summary>
            The enchant to get the level from (An enchant on the item which activated this loot table)
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.PlayerHeadChange">
            <summary>
            Changes the skin on a player head
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.PlayerHeadChange.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.PlayerHeadChange"/>
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.PlayerHeadChange.Target">
            <summary>
            The entity to get the skull for
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.SmeltChange">
            <summary>
            Smelts the item
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.SmeltChange.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.SmeltChange"/>
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.StewChange">
            <summary>
            Changes the suspicious stew effect
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.StewChange.#ctor(SharpCraft.LootObjects.StewChange.StewEffect[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.StewChange"/>
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.StewChange.Effects">
            <summary>
            The stew effects
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.StewChange.StewEffect">
            <summary>
            Class for stew effects
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.StewChange.StewEffect.Effect">
            <summary>
            The effect
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.StewChange.StewEffect.Duration">
            <summary>
            The duration of the effect
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.AlternativesEntry">
            <summary>
            Entry where only the first entry where the conditions are true is used
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.AlternativesEntry.#ctor(SharpCraft.LootObjects.BaseEntry[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.GroupEntry"/>
            </summary>
            <param name="entries">The entries to alternative over</param>
        </member>
        <member name="P:SharpCraft.LootObjects.AlternativesEntry.Entries">
            <summary>
            The entries to alternative over
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.BaseEntry">
            <summary>
            Base class for loot entries in a loot pools in a loot tables
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.BaseEntry.#ctor(SharpCraft.ID.LootEntryType,System.Int32)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.BaseEntry"/>
            </summary>
            <param name="entryType">The entry type</param>
            <param name="weight">The weight of this entry</param>
        </member>
        <member name="P:SharpCraft.LootObjects.BaseEntry.EntryType">
            <summary>
            The type of loot entry
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.BaseEntry.Conditions">
            <summary>
            All conditions have to be true for this entry to be used
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.BaseEntry.Weight">
            <summary>
            The weight of this entry
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.BaseEntry.LuckyWeight">
            <summary>
            Extra weight for the entry based on the amount of luck the player has
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.BaseEntry.op_Implicit(SharpCraft.LootObjects.BaseEntry)~SharpCraft.LootObjects.BaseEntry[]">
            <summary>
            Converts a single entry into an array of entries
            </summary>
            <param name="entry">The entry to convert</param>
        </member>
        <member name="T:SharpCraft.LootObjects.DynamicEntry">
            <summary>
            Entry which drops dynamic loot
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.DynamicEntry.#ctor(SharpCraft.LootObjects.DynamicEntry.DynamicType)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.DynamicEntry"/>
            </summary>
            <param name="type">The type of loot to get</param>
        </member>
        <member name="P:SharpCraft.LootObjects.DynamicEntry.Type">
            <summary>
            The type of loot to get
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.DynamicEntry.DynamicType">
            <summary>
            the place to get the items from
            </summary>
        </member>
        <member name="F:SharpCraft.LootObjects.DynamicEntry.DynamicType.contents">
            <summary>
            The content of the block
            </summary>
        </member>
        <member name="F:SharpCraft.LootObjects.DynamicEntry.DynamicType.self">
            <summary>
            The block
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.EmptyEntry">
            <summary>
            Entry which drops dynamic loot
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.EmptyEntry.#ctor">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.EmptyEntry"/>
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.GroupEntry">
            <summary>
            Entry for dropping a group of entries
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.GroupEntry.#ctor(SharpCraft.LootObjects.BaseEntry[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.GroupEntry"/>
            </summary>
            <param name="entries">The entries to group together</param>
        </member>
        <member name="P:SharpCraft.LootObjects.GroupEntry.Entries">
            <summary>
            The entries to group together
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.ItemEntry">
            <summary>
            Entry for dropping an item
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.ItemEntry.#ctor(SharpCraft.ItemType)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.ItemEntry"/>
            </summary>
            <param name="item">The item the entry drops</param>
        </member>
        <member name="P:SharpCraft.LootObjects.ItemEntry.Item">
            <summary>
            The item the entry drops
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.ItemEntry.Changes">
            <summary>
            Changes to make to the entry
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.ItemGroupEntry">
            <summary>
            Entry for dropping an item group
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.ItemGroupEntry.#ctor(SharpCraft.IGroup{SharpCraft.ItemType},System.Boolean)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.ItemGroupEntry"/>
            </summary>
            <param name="itemGroup">The item group to drop</param>
            <param name="onlyDropOne">If true drops a random item from the tag. If false drops all items in the item tag.</param>
        </member>
        <member name="P:SharpCraft.LootObjects.ItemGroupEntry.ItemGroup">
            <summary>
            The item group to drop
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.ItemGroupEntry.OnlyDropOne">
            <summary>
            If true drops a random item from the tag. If false drops all items in the item tag.
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.SequenceEntry">
            <summary>
            Entry where only all entries are used untill an entry's conditions returns false
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.SequenceEntry.#ctor(SharpCraft.LootObjects.BaseEntry[])">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.SequenceEntry"/>
            </summary>
            <param name="entries">The entries to sequence over</param>
        </member>
        <member name="P:SharpCraft.LootObjects.SequenceEntry.Entries">
            <summary>
            The entries to sequence over
            </summary>
        </member>
        <member name="T:SharpCraft.LootObjects.LootPool">
            <summary>
            A loot pool in a loot table
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.LootPool.#ctor(SharpCraft.LootObjects.BaseEntry[],SharpCraft.MCRange,SharpCraft.Conditions.BaseCondition[],SharpCraft.MCRange)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootObjects.LootPool"/>
            </summary>
            <param name="rolls">The amount of rolls to make (The amount of entries to use)</param>
            <param name="luckyRolls">The amount of extra rolls to take based on luck</param>
            <param name="conditions">All conditions have to be true for this pool to be used</param>
            <param name="entries">Entries in this pool</param>
        </member>
        <member name="P:SharpCraft.LootObjects.LootPool.Rolls">
            <summary>
            The amount of rolls to make (The amount of entries to use)
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.LootPool.LuckyRolls">
            <summary>
            The amount of extra rolls to take based on luck
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.LootPool.Conditions">
            <summary>
            All conditions have to be true for this pool to be used
            </summary>
        </member>
        <member name="P:SharpCraft.LootObjects.LootPool.Entries">
            <summary>
            Entries in this pool
            </summary>
        </member>
        <member name="M:SharpCraft.LootObjects.LootPool.op_Implicit(SharpCraft.LootObjects.LootPool)~SharpCraft.LootObjects.LootPool[]">
            <summary>
            Converts a single pool into an array
            </summary>
            <param name="pool">The pool to convert</param>
        </member>
        <member name="T:SharpCraft.ILootTable">
            <summary>
            Interface for loot tables
            </summary>
        </member>
        <member name="P:SharpCraft.ILootTable.FileId">
            <summary>
            The file name of the loot table
            </summary>
        </member>
        <member name="P:SharpCraft.ILootTable.PackNamespace">
            <summary>
            The namespace the loot table is in
            </summary>
        </member>
        <member name="M:SharpCraft.ILootTable.GetNamespacedName">
            <summary>
            Should return the string used for giving the loot table
            </summary>
            <returns>string for running the loot table</returns>
        </member>
        <member name="T:SharpCraft.LootTable">
            <summary>
            Class for loot table files
            </summary>
        </member>
        <member name="T:SharpCraft.LootTable.TableType">
            <summary>
            Loot table types
            </summary>
        </member>
        <member name="F:SharpCraft.LootTable.TableType.empty">
            <summary>
            For empty loot tables which doesn't drop anything
            </summary>
        </member>
        <member name="F:SharpCraft.LootTable.TableType.entity">
            <summary>
            For entity loot tables
            </summary>
        </member>
        <member name="F:SharpCraft.LootTable.TableType.block">
            <summary>
            For block loot tables
            </summary>
        </member>
        <member name="F:SharpCraft.LootTable.TableType.chest">
            <summary>
            For chest loot tables
            </summary>
        </member>
        <member name="F:SharpCraft.LootTable.TableType.fishing">
            <summary>
            For fishing loot tables
            </summary>
        </member>
        <member name="F:SharpCraft.LootTable.TableType.advancement_reward">
            <summary>
            For advancement reward loot tables
            </summary>
        </member>
        <member name="F:SharpCraft.LootTable.TableType.generic">
            <summary>
            For all other types of loot tables
            </summary>
        </member>
        <member name="M:SharpCraft.LootTable.#ctor(System.Boolean,SharpCraft.BasePackNamespace,System.String,SharpCraft.LootObjects.LootPool[],System.Nullable{SharpCraft.LootTable.TableType},SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootTable"/> with the given parameters. Inherite from this constructor.
            </summary>
            <param name="packNamespace">The namespace the loot table is in</param>
            <param name="fileName">The name of the loot table file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="pools">The loot pools in the loot table</param>
            <param name="type">The type of loot table</param>
            <param name="_">Unused parameter used for specifing you want to use this constructor</param>
        </member>
        <member name="M:SharpCraft.LootTable.#ctor(SharpCraft.BasePackNamespace,System.String,SharpCraft.LootObjects.LootPool[],System.Nullable{SharpCraft.LootTable.TableType},SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.LootTable"/> with the given parameters
            </summary>
            <param name="packNamespace">The namespace the loot table is in</param>
            <param name="fileName">The name of the loot table file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="pools">The loot pools in the loot table</param>
            <param name="type">The type of loot table</param>
        </member>
        <member name="P:SharpCraft.LootTable.Type">
            <summary>
            The type of loot table
            </summary>
        </member>
        <member name="P:SharpCraft.LootTable.Pools">
            <summary>
            The loot pools in this loot table
            </summary>
        </member>
        <member name="M:SharpCraft.LootTable.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this loot table into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">Not in use</param>
            <param name="extraConversionData">Not in use</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="M:SharpCraft.LootTable.GetStream">
            <summary>
            Returns the stream this file is going to use for writing it's file
            </summary>
            <returns>The stream for this file</returns>
        </member>
        <member name="M:SharpCraft.LootTable.WriteFile(System.IO.TextWriter)">
            <summary>
            Writes the file
            </summary>
            <param name="stream">The stream used for writing the file</param>
        </member>
        <member name="M:SharpCraft.LootTable.AfterDispose">
            <summary>
            Clears the things in the file.
            </summary>
        </member>
        <member name="T:SharpCraft.EmptyLoottable">
            <summary>
            Used for calling loot tables outside this program
            </summary>
        </member>
        <member name="M:SharpCraft.EmptyLoottable.#ctor(SharpCraft.BasePackNamespace,System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.EmptyLoottable"/>
            </summary>
            <param name="packNamespace">The namespace the loot table is in</param>
            <param name="fileName">The name of the loot table</param>
        </member>
        <member name="P:SharpCraft.EmptyLoottable.FileId">
            <summary>
            The name of the loot table
            </summary>
        </member>
        <member name="P:SharpCraft.EmptyLoottable.PackNamespace">
            <summary>
            The namespace the loot table is in
            </summary>
        </member>
        <member name="M:SharpCraft.EmptyLoottable.GetNamespacedName">
            <summary>
            Returns the string used for evoking this loot table
            </summary>
            <returns>The string used for evoking this loot table</returns>
        </member>
        <member name="M:SharpCraft.EmptyLoottable.op_Implicit(System.String)~SharpCraft.EmptyLoottable">
            <summary>
            Converts a string of the format NAMESPACE:LOOTTABLE into an <see cref="T:SharpCraft.EmptyLoottable"/>
            </summary>
            <param name="loottable">The string to convert</param>
        </member>
        <member name="T:SharpCraft.PackNamespace">
            <summary>
            An <see cref="T:System.Object"/> used to define a namespace in a datapack
            </summary>
        </member>
        <member name="M:SharpCraft.PackNamespace.#ctor">
            <summary>
            Intializes a new namespace. Make sure to call <see cref="M:SharpCraft.BasePackNamespace.Setup(SharpCraft.BaseDatapack,System.String)"/> after using this
            </summary>
        </member>
        <member name="M:SharpCraft.PackNamespace.#ctor(SharpCraft.BaseDatapack,System.String)">
            <summary>
            Creates a new namespace in a datapack
            </summary>
            <param name="datapack">The datapack to add the namespace to</param>
            <param name="namespaceName">the name of the namespace</param>
        </member>
        <member name="M:SharpCraft.PackNamespace.GetID(System.Object)">
            <summary>
            Generates a random id for the given <see cref="T:System.Object"/>
            </summary>
            <param name="getIdFor">The object to id</param>
            <returns>The id for the object</returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.Predicate(System.String,SharpCraft.Conditions.BaseCondition,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a new predicate with the given name and condition
            </summary>
            <param name="name">The name of the predicate</param>
            <param name="condition">The condition</param>
            <param name="setting">The settings for how to write the file</param>
            <returns>The newly created predicate</returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.Function(System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a new function with the given name
            </summary>
            <param name="functionName">The function's name. If null will get random name</param>
            <param name="setting">The settings for how to write the file</param>
            <returns>The newly created function</returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.Function(System.String,SharpCraft.Function.FunctionWriter,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a new function with the given name and add commands to the function
            </summary>
            <param name="functionName">The function's name</param>
            <param name="creater">a method creating the function</param>
            <param name="setting">The settings for how to write the file</param>
            <returns>The newly created function</returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.Function(SharpCraft.Function.FunctionWriter,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a new randomly named function with the commands to the function
            </summary>
            <param name="creater">a method creating the function</param>
            <param name="setting">The settings for how to write the file</param>
            <returns>The newly created function</returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.EventFunction(SharpCraft.AdvancementObjects.BaseTrigger[],System.String,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a function which runs on a player when all the given triggers gets triggered.
            </summary>
            <param name="triggers">The triggers to trigger</param>
            <param name="functionName">The name of the function</param>
            <param name="advancementName">The name of the advancement</param>
            <param name="setting">The settings for how to write the file</param>
            <returns>The newly created function</returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.EventFunction(SharpCraft.AdvancementObjects.BaseTrigger[],SharpCraft.Function.FunctionWriter,System.String,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a function which runs on a player when all the given triggers gets triggered.
            </summary>
            <param name="triggers">The triggers to trigger</param>
            <param name="creater">The function writer</param>
            <param name="functionName">The name of the function</param>
            <param name="advancementName">The name of the advancement</param>
            <param name="setting">The settings for how to write the file</param>
            <returns>The newly created function</returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.Recipe(System.String,SharpCraft.ItemType[0:,0:],SharpCraft.ID.Item,System.Int32,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a new crafting table recipe with the given parameters
            </summary>
            <param name="name">The recipe's name</param>
            <param name="recipe">A multidimensional array describing how the items should be layed out in the crafting table</param>
            <param name="output">The output item</param>
            <param name="group">The string id of the group the recipe is in</param>
            <param name="outputCount">The amount of items to output</param>
            <param name="setting">The settings for how to write the file</param>
            <returns>The newly created recipe</returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.Recipe(System.String,SharpCraft.ItemType[],SharpCraft.ID.Item,System.Int32,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a new shapeless crafting table recipe with the given parameters
            </summary>
            <param name="name">The recipe's name</param>
            <param name="recipe">The items needed to craft the recipe</param>
            <param name="output">The output item</param>
            <param name="group">The string id of the group this recipe is in</param>
            <param name="outputCount">The amount of items to output</param>
            <param name="setting">The settings for how to write the file</param>
            <returns>The newly created recipe</returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.Recipe(System.String,SharpCraft.SmeltRecipe.SmeltType,SharpCraft.ItemType[],SharpCraft.ID.Item,System.Double,SharpCraft.Time,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a new furnace/a type of furnace recipe with the given parameters
            </summary>
            <param name="name">The recipe's name</param>
            <param name="ingredients">A list of items which are smeltable into the output item</param>
            <param name="output">the output item</param>
            <param name="xpDrop">the amount of xp the recipe should output</param>
            <param name="cookTime">the amount of time the recipe takes. Use null to use default time</param>
            <param name="type">The type of smelt recipe</param>
            <param name="group">The string id of the group this recipe is in</param>
            <param name="setting">The settings for how to write the file</param>
            <returns>The newly created recipe</returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.Recipe(System.String,SharpCraft.SmeltRecipe.SmeltType,SharpCraft.ItemType,SharpCraft.ID.Item,System.Double,SharpCraft.Time,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a new furnace/a type of furnace recipe with the given parameters
            </summary>
            <param name="name">The recipe's name</param>
            <param name="ingredient">The item to smelt</param>
            <param name="output">the output item</param>
            <param name="xpDrop">the amount of xp the recipe should output</param>
            <param name="cookTime">the amount of time the recipe takes. Use null to use default time</param>
            <param name="type">The type of smelt recipe</param>
            <param name="group">The string id of the group this recipe is in</param>
            <param name="setting">The settings for how to write the file</param>
            <returns>The newly created recipe</returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.Recipe(System.String,SharpCraft.ItemType[],SharpCraft.ID.Item,System.Int32,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a new stonecutter recipe
            </summary>
            <param name="name">The recipe's name</param>
            <param name="ingredients">A list of items which are cut-able into the output item</param>
            <param name="output">the output item</param>
            <param name="outputCount">The amount of items to output</param>
            <param name="setting">The settings for how to write the file</param>
            <returns>The newly created recipe</returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.Recipe(System.String,SharpCraft.ItemType,SharpCraft.ID.Item,System.Int32,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a new stonecutter recipe
            </summary>
            <param name="name">The recipe's name</param>
            <param name="ingredient">The cut-able which outputs the item</param>
            <param name="output">the output item</param>
            <param name="outputCount">The amount of items to output</param>
            <param name="setting">The settings for how to write the file</param>
            <returns>The newly created recipe</returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.Recipe(System.String)">
            <summary>
            Overwrites the recipe with the given name with an invalid recipe
            </summary>
            <param name="name">The recipe's name</param>
        </member>
        <member name="M:SharpCraft.PackNamespace.Loottable(System.String,SharpCraft.LootObjects.LootPool[],System.Nullable{SharpCraft.LootTable.TableType},SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a new <see cref="T:SharpCraft.LootTable"/> with the <paramref name="lootPools"/>
            </summary>
            <param name="tableName">The <see cref="T:SharpCraft.LootTable"/>'s name</param>
            <param name="lootPools">The <see cref="T:SharpCraft.LootObjects.LootPool"/>s in the <see cref="T:SharpCraft.LootTable"/></param>
            <param name="type">The type of loot table</param>
            <param name="writeSetting">The settings for how to write the file</param>
            <returns>The newly created <see cref="T:SharpCraft.LootTable"/></returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.Advancement(System.String,SharpCraft.AdvancementObjects.Requirement[],SharpCraft.AdvancementObjects.Reward,SharpCraft.BaseJsonText,SharpCraft.BaseJsonText,SharpCraft.Item,System.String,SharpCraft.ID.AdvancementFrame,System.Boolean,System.Boolean,System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a new parent advancement with the given parameters
            </summary>
            <param name="fileName">The name of the advancement file</param>
            <param name="writeSetting">The setting for writing the file</param>
            <param name="requirements">The requirements for getting the advancement</param>
            <param name="reward">The rewards to get for getting the advancement</param>
            <param name="announceInChat">True if when the advancement is unlocked it will be announced in chat. False if not</param>
            <param name="description">The description on the advancement</param>
            <param name="frame">The frame around the icon</param>
            <param name="hidden">True if the advancement can't be seen unless it has been unlocked</param>
            <param name="icon">The icon on the advancement</param>
            <param name="name">The shown advancement name</param>
            <param name="showToast">True if when the advancement is unlocked it will display a toast in the top right corner. False if not</param>
            <param name="background">The background in the advancement gui. Example: minecraft:textures/gui/advancements/backgrounds/end.png.</param>
            <returns>The advancement</returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.Advancement(System.String,SharpCraft.IAdvancement,SharpCraft.AdvancementObjects.Requirement[],SharpCraft.AdvancementObjects.Reward,SharpCraft.BaseJsonText,SharpCraft.BaseJsonText,SharpCraft.Item,SharpCraft.ID.AdvancementFrame,System.Boolean,System.Boolean,System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a new child advancement with the given parameters
            </summary>
            <param name="fileName">The name of the advancement file</param>
            <param name="writeSetting">The setting for writing the file</param>
            <param name="requirements">The requirements for getting the advancement</param>
            <param name="reward">The rewards to get for getting the advancement</param>
            <param name="announceInChat">True if when the advancement is unlocked it will be announced in chat. False if not</param>
            <param name="description">The description on the advancement</param>
            <param name="frame">The frame around the icon</param>
            <param name="hidden">True if the advancement can't be seen unless it has been unlocked</param>
            <param name="icon">The icon on the advancement</param>
            <param name="name">The shown advancement name</param>
            <param name="showToast">True if when the advancement is unlocked it will display a toast in the top right corner. False if not</param>
            <param name="parent">The parent advancement</param>
            <returns>The advancement</returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.Advancement(System.String,SharpCraft.AdvancementObjects.Requirement[],SharpCraft.AdvancementObjects.Reward,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Creates a new hidden advancement (Advancement is not visible in the advancement gui)
            </summary>
            <param name="fileName">The name of the advancement file</param>
            <param name="writeSetting">The setting for writing the file</param>
            <param name="requirements">The requirements for getting the advancement</param>
            <param name="reward">The rewards to get for getting the advancement</param>
            <returns>The advancement</returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.Advancement(System.String)">
            <summary>
            Makes the advancement with the file name invalid... which also makes all its children invalid
            </summary>
            <param name="fileName">The name of the file to make invalid</param>
        </member>
        <member name="M:SharpCraft.PackNamespace.Group(System.String,System.Collections.Generic.List{SharpCraft.IFunction},System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Returns a <see cref="T:SharpCraft.FunctionGroup"/> with the given functions
            </summary>
            <param name="name">The name of the group</param>
            <param name="functionList">The functions in the group</param>
            <param name="append">If the functions should be appended to existing functions from another datapack</param>
            <param name="writeSetting">The settings for how to write the file</param>
            <returns>The <see cref="T:SharpCraft.FunctionGroup"/></returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.Group(System.String,System.Collections.Generic.List{SharpCraft.BlockType},System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Returns a <see cref="T:SharpCraft.BlockGroup"/> with the given <see cref="T:SharpCraft.BlockType"/>s
            </summary>
            <param name="name">The name of the group</param>
            <param name="blockList">The <see cref="T:SharpCraft.BlockType"/>s in the group</param>
            <param name="append">If the <see cref="T:SharpCraft.BlockType"/>s should be appended to existing <see cref="T:SharpCraft.BlockType"/>s from another datapack</param>
            <param name="writeSetting">The settings for how to write the file</param>
            <returns>The <see cref="T:SharpCraft.BlockGroup"/></returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.Group(System.String,System.Collections.Generic.List{SharpCraft.ItemType},System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Returns a <see cref="T:SharpCraft.ItemGroup"/> with the given <see cref="T:SharpCraft.ItemType"/>s
            </summary>
            <param name="name">The name of the group</param>
            <param name="itemList">The <see cref="T:SharpCraft.ItemType"/>s in the group</param>
            <param name="append">If the <see cref="T:SharpCraft.ItemType"/>s should be appended to existing <see cref="T:SharpCraft.ItemType"/>s from another datapack</param>
            <param name="writeSetting">The settings for how to write the file</param>
            <returns>The <see cref="T:SharpCraft.ItemGroup"/></returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.Group(System.String,System.Collections.Generic.List{SharpCraft.EntityType},System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Returns a <see cref="T:SharpCraft.EntityGroup"/> with the given <see cref="T:SharpCraft.EntityType"/>s
            </summary>
            <param name="name">The name of the group</param>
            <param name="entityList">The <see cref="T:SharpCraft.EntityType"/>s in the group</param>
            <param name="append">If the <see cref="T:SharpCraft.EntityType"/>s should be appended to existing <see cref="T:SharpCraft.EntityType"/>s from another datapack</param>
            <param name="writeSetting">The settings for how to write the file</param>
            <returns>The <see cref="T:SharpCraft.EntityGroup"/></returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.Group(System.String,System.Collections.Generic.List{SharpCraft.LiquidType},System.Boolean,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Returns a <see cref="T:SharpCraft.LiquidGroup"/> with the given <see cref="T:SharpCraft.LiquidType"/>s
            </summary>
            <param name="name">The name of the group</param>
            <param name="liquidList">The <see cref="T:SharpCraft.LiquidType"/>s in the group</param>
            <param name="append">If the <see cref="T:SharpCraft.LiquidType"/>s should be appended to existing <see cref="T:SharpCraft.LiquidType"/>s from another datapack</param>
            <param name="writeSetting">The settings for how to write the file</param>
            <returns>The <see cref="T:SharpCraft.LiquidGroup"/></returns>
        </member>
        <member name="M:SharpCraft.PackNamespace.AddSetting(SharpCraft.INamespaceSetting)">
            <summary>
            Adds the given setting to this namespace
            </summary>
            <param name="setting">The setting to add</param>
        </member>
        <member name="T:SharpCraft.EmptyNamespace">
            <summary>
            A namespace used for refering functions and such which isn't in a datapack made with SharpCraft
            </summary>
        </member>
        <member name="M:SharpCraft.EmptyNamespace.GetMinecraftNamespace">
            <summary>
            Returns a reference to the minecraft namespace
            </summary>
            <returns>A reference to the minecraft namespace</returns>
        </member>
        <member name="M:SharpCraft.EmptyNamespace.GetNamespace(System.String)">
            <summary>
            Returns a reference to the namespace
            </summary>
            <param name="namespace">The namespace to get</param>
            <returns>The namespace</returns>
        </member>
        <member name="M:SharpCraft.EmptyNamespace.#ctor">
            <summary>
            Intializes a new empty namespace. Make sure to call <see cref="M:SharpCraft.BasePackNamespace.Setup(SharpCraft.BaseDatapack,System.String)"/> after using this. Suggested to use <see cref="M:SharpCraft.EmptyNamespace.GetNamespace(System.String)"/> instead.
            </summary>
        </member>
        <member name="M:SharpCraft.EmptyNamespace.#ctor(SharpCraft.BaseDatapack,System.String)">
            <summary>
            Creates a new namespace in a datapack. Suggested to use <see cref="M:SharpCraft.EmptyNamespace.GetNamespace(System.String)"/> instead
            </summary>
            <param name="datapack">The datapack to add the namespace to</param>
            <param name="namespaceName">the name of the namespace</param>
        </member>
        <member name="M:SharpCraft.EmptyNamespace.GetID(System.Object)">
            <summary>
            Not used. Makes no sense to generate names for empty namespace.
            </summary>
            <param name="getIdFor">Not used</param>
            <returns>Not used</returns>
        </member>
        <member name="T:SharpCraft.IPredicate">
            <summary>
            Interface for predicates
            </summary>
        </member>
        <member name="P:SharpCraft.IPredicate.FileId">
            <summary>
            The file name of the predicate
            </summary>
        </member>
        <member name="P:SharpCraft.IPredicate.PackNamespace">
            <summary>
            The namespace the predicate is in
            </summary>
        </member>
        <member name="M:SharpCraft.IPredicate.GetNamespacedName">
            <summary>
            Should return the string used for using the predicate
            </summary>
            <returns>string for using the predicate</returns>
        </member>
        <member name="M:SharpCraft.IPredicate.GetCondition">
            <summary>
            Should return a <see cref="T:SharpCraft.Conditions.PredicateCondition"/> which checks for this predicate
            </summary>
            <returns>A condition checking this predicate</returns>
        </member>
        <member name="T:SharpCraft.Predicate">
            <summary>
            Class for predicate files
            </summary>
        </member>
        <member name="M:SharpCraft.Predicate.#ctor(System.Boolean,SharpCraft.BasePackNamespace,System.String,SharpCraft.Conditions.BaseCondition,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Predicate"/>. Inherite from this constructor.
            </summary>
            <param name="packNamespace">The namespace the predicate is in</param>
            <param name="fileName">The name of the predicate file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="condition">The predicate to test for</param>
            <param name="_">Unused parameter used for specifing you want to use this constructor</param>
        </member>
        <member name="M:SharpCraft.Predicate.#ctor(SharpCraft.BasePackNamespace,System.String,SharpCraft.Conditions.BaseCondition,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.Predicate"/>
            </summary>
            <param name="packNamespace">The namespace the predicate is in</param>
            <param name="fileName">The name of the predicate file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="condition">The predicate to test for</param>
        </member>
        <member name="P:SharpCraft.Predicate.Condition">
            <summary>
            The condition to test for
            </summary>
        </member>
        <member name="M:SharpCraft.Predicate.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this predicate into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">Unused</param>
            <param name="extraConversionData">Unused</param>
            <returns>This predicate into a <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="M:SharpCraft.Predicate.GetStream">
            <summary>
            Returns the stream this file is going to use for writing it's file
            </summary>
            <returns>The stream for this file</returns>
        </member>
        <member name="M:SharpCraft.Predicate.WriteFile(System.IO.TextWriter)">
            <summary>
            Writes the file
            </summary>
            <param name="stream">The stream used for writing the file</param>
        </member>
        <member name="M:SharpCraft.Predicate.AfterDispose">
            <summary>
            Clears the things in the file.
            </summary>
        </member>
        <member name="M:SharpCraft.Predicate.GetCondition">
            <summary>
            Returns a condition checking this predicate
            </summary>
            <returns>A condition checking this predicate</returns>
        </member>
        <member name="T:SharpCraft.EmptyPredicate">
            <summary>
            Used for calling predicates outside this program
            </summary>
        </member>
        <member name="M:SharpCraft.EmptyPredicate.#ctor(SharpCraft.BasePackNamespace,System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.EmptyPredicate"/>
            </summary>
            <param name="packNamespace">The namespace the predicate is in</param>
            <param name="fileName">The name of the predicate</param>
        </member>
        <member name="P:SharpCraft.EmptyPredicate.FileId">
            <summary>
            The name of the predicate
            </summary>
        </member>
        <member name="P:SharpCraft.EmptyPredicate.PackNamespace">
            <summary>
            The namespace the predicate is in
            </summary>
        </member>
        <member name="M:SharpCraft.EmptyPredicate.GetNamespacedName">
            <summary>
            Returns the string used for checking the predicate
            </summary>
            <returns>The string used for checking the predicate</returns>
        </member>
        <member name="M:SharpCraft.EmptyPredicate.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this predicate into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">Unused</param>
            <param name="extraConversionData">Unused</param>
            <returns>This predicate into a <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="M:SharpCraft.EmptyPredicate.op_Implicit(System.String)~SharpCraft.EmptyPredicate">
            <summary>
            Converts a string of the format NAMESPACE:PREDICATE into an <see cref="T:SharpCraft.EmptyPredicate"/>
            </summary>
            <param name="predicate">The string to convert</param>
        </member>
        <member name="M:SharpCraft.EmptyPredicate.GetCondition">
            <summary>
            Returns a condition checking this predicate
            </summary>
            <returns>A condition checking this predicate</returns>
        </member>
        <member name="T:SharpCraft.BaseRecipe">
            <summary>
            Base class for recipe files
            </summary>
        </member>
        <member name="M:SharpCraft.BaseRecipe.#ctor(SharpCraft.BasePackNamespace,System.String,System.String,SharpCraft.BaseFile.WriteSetting,System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.BaseRecipe"/>
            </summary>
            <param name="packNamespace">The namespace the recipe is in</param>
            <param name="fileName">The name of the recipe file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="group">The name of the recipe group the recipe is in. Leave null for no group.</param>
            <param name="recipeType">The type of recipe file</param>
        </member>
        <member name="P:SharpCraft.BaseRecipe.Type">
            <summary>
            The type of recipe
            </summary>
        </member>
        <member name="P:SharpCraft.BaseRecipe.Group">
            <summary>
            The name of the recipe group the recipe is in. Leave null for no group.
            </summary>
        </member>
        <member name="M:SharpCraft.BaseRecipe.GetStream">
            <summary>
            Returns the stream this file is going to use for writing it's file
            </summary>
            <returns>The stream for this file</returns>
        </member>
        <member name="M:SharpCraft.BaseRecipe.WriteFileStart(System.IO.TextWriter)">
            <summary>
            Writes the beginning of the file
            </summary>
            <param name="stream">The stream to write to</param>
        </member>
        <member name="M:SharpCraft.BaseRecipe.WriteFileEnd(System.IO.TextWriter)">
            <summary>
            Writes the end of the file
            </summary>
            <param name="stream">The stream to write to</param>
        </member>
        <member name="M:SharpCraft.BaseRecipe.GetItemCompound(SharpCraft.ItemType)">
            <summary>
            Returns a string used for specifieng the item in the ingredient list
            </summary>
            <param name="item">The item to get the string for</param>
            <returns>A string used for specifieng the item in the ingredient list</returns>
        </member>
        <member name="M:SharpCraft.BaseRecipe.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this recipe into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">Not in use</param>
            <param name="extraConversionData">Not in use</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="M:SharpCraft.BaseRecipe.AfterDispose">
            <summary>
            Clears the things in the file.
            </summary>
        </member>
        <member name="T:SharpCraft.EmptyRecipe">
            <summary>
            Used for giving recipes outside this program
            </summary>
        </member>
        <member name="M:SharpCraft.EmptyRecipe.#ctor(SharpCraft.BasePackNamespace,System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.EmptyRecipe"/>
            </summary>
            <param name="packNamespace">The namespace the recipe is in</param>
            <param name="fileName">The name of the recipe</param>
        </member>
        <member name="P:SharpCraft.EmptyRecipe.FileId">
            <summary>
            The name of the recipe
            </summary>
        </member>
        <member name="P:SharpCraft.EmptyRecipe.PackNamespace">
            <summary>
            The namespace the recipe is in
            </summary>
        </member>
        <member name="M:SharpCraft.EmptyRecipe.GetNamespacedName">
            <summary>
            Returns the string used for evoking this recipe
            </summary>
            <returns>The string used for evoking this recipe</returns>
        </member>
        <member name="M:SharpCraft.EmptyRecipe.GetAsTag(System.Nullable{SharpCraft.ID.NBTTagType},System.Object[])">
            <summary>
            Converts this recipe into a <see cref="T:SharpCraft.Data.DataPartTag"/>
            </summary>
            <param name="asType">Not in use</param>
            <param name="extraConversionData">Not in use</param>
            <returns>the made <see cref="T:SharpCraft.Data.DataPartTag"/></returns>
        </member>
        <member name="M:SharpCraft.EmptyRecipe.op_Implicit(System.String)~SharpCraft.EmptyRecipe">
            <summary>
            Converts a string of the format NAMESPACE:RECIPE into an <see cref="T:SharpCraft.EmptyRecipe"/>
            </summary>
            <param name="recipe">The string to convert</param>
        </member>
        <member name="T:SharpCraft.CraftingRecipe">
            <summary>
            Class for normal crafting recipes
            </summary>
        </member>
        <member name="M:SharpCraft.CraftingRecipe.#ctor(System.Boolean,SharpCraft.BasePackNamespace,System.String,SharpCraft.ItemType[0:,0:],SharpCraft.ID.Item,System.Int32,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.CraftingRecipe"/>. Inherite from this constructor.
            </summary>
            <param name="packNamespace">The namespace the recipe is in</param>
            <param name="fileName">The name of the recipe file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="group">The name of the recipe group the recipe is in. Leave null for no group.</param>
            <param name="recipe">The recipe for crafting the item. Use <see cref="F:SharpCraft.ID.Item.air"/> or null for empty slots</param>
            <param name="count">The amount of the result item the recipe should output</param>
            <param name="result">The item to craft</param>
            <param name="_">Unused parameter used for specifing you want to use this constructor</param>
        </member>
        <member name="M:SharpCraft.CraftingRecipe.#ctor(SharpCraft.BasePackNamespace,System.String,SharpCraft.ItemType[0:,0:],SharpCraft.ID.Item,System.Int32,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.CraftingRecipe"/>
            </summary>
            <param name="packNamespace">The namespace the recipe is in</param>
            <param name="fileName">The name of the recipe file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="group">The name of the recipe group the recipe is in. Leave null for no group.</param>
            <param name="recipe">The recipe for crafting the item. Use <see cref="F:SharpCraft.ID.Item.air"/> or null for empty slots</param>
            <param name="count">The amount of the result item the recipe should output</param>
            <param name="result">The item to craft</param>
        </member>
        <member name="P:SharpCraft.CraftingRecipe.Recipe">
            <summary>
            The recipe for crafting the item. Use <see cref="F:SharpCraft.ID.Item.air"/> or null for empty slots
            </summary>
        </member>
        <member name="P:SharpCraft.CraftingRecipe.Result">
            <summary>
            The item to craft
            </summary>
        </member>
        <member name="P:SharpCraft.CraftingRecipe.Count">
            <summary>
            The amount of the result item the recipe should output
            </summary>
        </member>
        <member name="M:SharpCraft.CraftingRecipe.WriteFile(System.IO.TextWriter)">
            <summary>
            Writes the file
            </summary>
            <param name="stream">The stream used for writing the file</param>
        </member>
        <member name="M:SharpCraft.CraftingRecipe.AfterDispose">
            <summary>
            Clears the things in the file.
            </summary>
        </member>
        <member name="T:SharpCraft.CuttingRecipe">
            <summary>
            Class for stone cutter recipe files
            </summary>
        </member>
        <member name="M:SharpCraft.CuttingRecipe.#ctor(System.Boolean,SharpCraft.BasePackNamespace,System.String,SharpCraft.ItemType[],SharpCraft.ID.Item,System.Int32,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.CuttingRecipe"/>. Inherite from this constructor.
            </summary>
            <param name="packNamespace">The namespace the recipe is in</param>
            <param name="fileName">The name of the recipe file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="group">The name of the recipe group the recipe is in. Leave null for no group.</param>
            <param name="ingredients">The different types of items which can be used in the recipe</param>
            <param name="count">The amount of the result item the recipe should output</param>
            <param name="result">The item to craft</param>
            <param name="_">Unused parameter used for specifing you want to use this constructor</param>
        </member>
        <member name="M:SharpCraft.CuttingRecipe.#ctor(SharpCraft.BasePackNamespace,System.String,SharpCraft.ItemType[],SharpCraft.ID.Item,System.Int32,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.CuttingRecipe"/>
            </summary>
            <param name="packNamespace">The namespace the recipe is in</param>
            <param name="fileName">The name of the recipe file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="group">The name of the recipe group the recipe is in. Leave null for no group.</param>
            <param name="ingredients">The different types of items which can be used in the recipe</param>
            <param name="count">The amount of the result item the recipe should output</param>
            <param name="result">The item to craft</param>
        </member>
        <member name="M:SharpCraft.CuttingRecipe.#ctor(SharpCraft.BasePackNamespace,System.String,SharpCraft.ItemType,SharpCraft.ID.Item,System.Int32,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.CuttingRecipe"/>
            </summary>
            <param name="packNamespace">The namespace the recipe is in</param>
            <param name="fileName">The name of the recipe file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="group">The name of the recipe group the recipe is in. Leave null for no group.</param>
            <param name="ingredient">The item used in the recipe</param>
            <param name="count">The amount of the result item the recipe should output</param>
            <param name="result">The item to craft</param>
        </member>
        <member name="P:SharpCraft.CuttingRecipe.Ingredients">
            <summary>
            The different types of items which can be used in the recipe
            </summary>
        </member>
        <member name="P:SharpCraft.CuttingRecipe.Result">
            <summary>
            The item to craft
            </summary>
        </member>
        <member name="P:SharpCraft.CuttingRecipe.Count">
            <summary>
            The amount of the result item the recipe should output
            </summary>
        </member>
        <member name="M:SharpCraft.CuttingRecipe.WriteFile(System.IO.TextWriter)">
            <summary>
            Writes the file
            </summary>
            <param name="stream">The stream used for writing the file</param>
        </member>
        <member name="M:SharpCraft.CuttingRecipe.AfterDispose">
            <summary>
            Clears the things in the file.
            </summary>
        </member>
        <member name="T:SharpCraft.InvalidRecipe">
            <summary>
            Class for invalid recipe files. Used for removing default recipes
            </summary>
        </member>
        <member name="M:SharpCraft.InvalidRecipe.#ctor(System.Boolean,SharpCraft.BasePackNamespace,System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.InvalidRecipe"/>. Inherite from this constructor.
            </summary>
            <param name="packNamespace">The namespace the recipe is in</param>
            <param name="fileName">The name of the recipe file to invalidate</param>
            <param name="_">Unused parameter used for specifing you want to use this constructor</param>
        </member>
        <member name="M:SharpCraft.InvalidRecipe.#ctor(SharpCraft.BasePackNamespace,System.String)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.InvalidRecipe"/>
            </summary>
            <param name="packNamespace">The namespace the recipe is in</param>
            <param name="fileName">The name of the recipe file to invalidate</param>
        </member>
        <member name="M:SharpCraft.InvalidRecipe.WriteFile(System.IO.TextWriter)">
            <summary>
            Writes the file
            </summary>
            <param name="stream">The stream used for writing the file</param>
        </member>
        <member name="T:SharpCraft.IRecipe">
            <summary>
            Interface for recipes
            </summary>
        </member>
        <member name="P:SharpCraft.IRecipe.FileId">
            <summary>
            The file name of the recipe
            </summary>
        </member>
        <member name="P:SharpCraft.IRecipe.PackNamespace">
            <summary>
            The namespace the recipe is in
            </summary>
        </member>
        <member name="M:SharpCraft.IRecipe.GetNamespacedName">
            <summary>
            Should return the string used for giving the recipe
            </summary>
            <returns>string for giving the recipe</returns>
        </member>
        <member name="T:SharpCraft.ShapelessRecipe">
            <summary>
            Class for shapeless recipe files
            </summary>
        </member>
        <member name="M:SharpCraft.ShapelessRecipe.#ctor(System.Boolean,SharpCraft.BasePackNamespace,System.String,SharpCraft.ItemType[],SharpCraft.ID.Item,System.Int32,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.ShapelessRecipe"/>. Inherite from this constructor.
            </summary>
            <param name="packNamespace">The namespace the recipe is in</param>
            <param name="fileName">The name of the recipe file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="group">The name of the recipe group the recipe is in. Leave null for no group.</param>
            <param name="ingredients">The items used in the recipe</param>
            <param name="count">The amount of the result item the recipe should output</param>
            <param name="result">The item to craft</param>
            <param name="_">Unused parameter used for specifing you want to use this constructor</param>
        </member>
        <member name="M:SharpCraft.ShapelessRecipe.#ctor(SharpCraft.BasePackNamespace,System.String,SharpCraft.ItemType[],SharpCraft.ID.Item,System.Int32,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.ShapelessRecipe"/>
            </summary>
            <param name="packNamespace">The namespace the recipe is in</param>
            <param name="fileName">The name of the recipe file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="group">The name of the recipe group the recipe is in. Leave null for no group.</param>
            <param name="ingredients">The items used in the recipe</param>
            <param name="count">The amount of the result item the recipe should output</param>
            <param name="result">The item to craft</param>
        </member>
        <member name="P:SharpCraft.ShapelessRecipe.Ingredients">
            <summary>
            The items used in the recipe
            </summary>
        </member>
        <member name="P:SharpCraft.ShapelessRecipe.Result">
            <summary>
            The item to craft
            </summary>
        </member>
        <member name="P:SharpCraft.ShapelessRecipe.Count">
            <summary>
            The amount of the result item the recipe should output
            </summary>
        </member>
        <member name="M:SharpCraft.ShapelessRecipe.WriteFile(System.IO.TextWriter)">
            <summary>
            Writes the file
            </summary>
            <param name="stream">The stream used for writing the file</param>
        </member>
        <member name="M:SharpCraft.ShapelessRecipe.AfterDispose">
            <summary>
            Clears the things in the file.
            </summary>
        </member>
        <member name="T:SharpCraft.SmeltRecipe">
            <summary>
            Class for smeltable recipe files
            </summary>
        </member>
        <member name="T:SharpCraft.SmeltRecipe.SmeltType">
            <summary>
            Smelting recipe type
            </summary>
        </member>
        <member name="F:SharpCraft.SmeltRecipe.SmeltType.blasting">
            <summary>
            Blast furnace recipe
            </summary>
        </member>
        <member name="F:SharpCraft.SmeltRecipe.SmeltType.campfire_cooking">
            <summary>
            Campfire recipe
            </summary>
        </member>
        <member name="F:SharpCraft.SmeltRecipe.SmeltType.smelting">
            <summary>
            Furnace recipe
            </summary>
        </member>
        <member name="F:SharpCraft.SmeltRecipe.SmeltType.smoking">
            <summary>
            Smoker recipe
            </summary>
        </member>
        <member name="M:SharpCraft.SmeltRecipe.#ctor(System.Boolean,SharpCraft.BasePackNamespace,System.String,SharpCraft.SmeltRecipe.SmeltType,SharpCraft.ItemType[],SharpCraft.ID.Item,System.Double,SharpCraft.Time,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.SmeltRecipe"/>. Inherite from this constructor.
            </summary>
            <param name="packNamespace">The namespace the recipe is in</param>
            <param name="fileName">The name of the recipe file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="group">The name of the recipe group the recipe is in. Leave null for no group.</param>
            <param name="recipeType">The type of smelting recipe</param>
            <param name="ingredients">The different types of items which can be used in the recipe</param>
            <param name="result">The result from the recipe</param>
            <param name="experience">The amount of experience to get for smelting the item</param>
            <param name="cookingTime">The amount of time it takes to cook the item</param>
            <param name="_">Unused parameter used for specifing you want to use this constructor</param>
        </member>
        <member name="M:SharpCraft.SmeltRecipe.#ctor(SharpCraft.BasePackNamespace,System.String,SharpCraft.SmeltRecipe.SmeltType,SharpCraft.ItemType[],SharpCraft.ID.Item,System.Double,SharpCraft.Time,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.SmeltRecipe"/>
            </summary>
            <param name="packNamespace">The namespace the recipe is in</param>
            <param name="fileName">The name of the recipe file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="group">The name of the recipe group the recipe is in. Leave null for no group.</param>
            <param name="recipeType">The type of smelting recipe</param>
            <param name="ingredients">The different types of items which can be used in the recipe</param>
            <param name="result">The result from the recipe</param>
            <param name="experience">The amount of experience to get for smelting the item</param>
            <param name="cookingTime">The amount of time it takes to cook the item</param>
        </member>
        <member name="M:SharpCraft.SmeltRecipe.#ctor(SharpCraft.BasePackNamespace,System.String,SharpCraft.SmeltRecipe.SmeltType,SharpCraft.ItemType,SharpCraft.ID.Item,System.Double,SharpCraft.Time,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.SmeltRecipe"/>
            </summary>
            <param name="packNamespace">The namespace the recipe is in</param>
            <param name="fileName">The name of the recipe file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="group">The name of the recipe group the recipe is in. Leave null for no group.</param>
            <param name="recipeType">The type of smelting recipe</param>
            <param name="ingredient">The item to smelt</param>
            <param name="result">The result from the recipe</param>
            <param name="experience">The amount of experience to get for smelting the item</param>
            <param name="cookingTime">The amount of time in ticks it takes to cook the item</param>
        </member>
        <member name="P:SharpCraft.SmeltRecipe.Ingredients">
            <summary>
            The different types of items which can be used in the recipe
            </summary>
        </member>
        <member name="P:SharpCraft.SmeltRecipe.Result">
            <summary>
            The item to craft
            </summary>
        </member>
        <member name="P:SharpCraft.SmeltRecipe.Experience">
            <summary>
            The amount of experience to get for smelting the item
            </summary>
        </member>
        <member name="P:SharpCraft.SmeltRecipe.CookingTime">
            <summary>
            The amount of time in ticks it takes to cook the item
            </summary>
        </member>
        <member name="M:SharpCraft.SmeltRecipe.WriteFile(System.IO.TextWriter)">
            <summary>
            Writes the file
            </summary>
            <param name="stream">The stream used for writing the file</param>
        </member>
        <member name="M:SharpCraft.SmeltRecipe.AfterDispose">
            <summary>
            Clears the things in the file.
            </summary>
        </member>
        <member name="T:SharpCraft.SpecialRecipe">
            <summary>
            Class for special recipe files
            </summary>
        </member>
        <member name="T:SharpCraft.SpecialRecipe.SpecialType">
            <summary>
            Types of special recipes
            </summary>
        </member>
        <member name="F:SharpCraft.SpecialRecipe.SpecialType.armordye">
            <summary>
            Armor dying recipes
            </summary>
        </member>
        <member name="F:SharpCraft.SpecialRecipe.SpecialType.bannerduplicate">
            <summary>
            Banner duplicate recipe
            </summary>
        </member>
        <member name="F:SharpCraft.SpecialRecipe.SpecialType.bookcloning">
            <summary>
            Book cloning recipe
            </summary>
        </member>
        <member name="F:SharpCraft.SpecialRecipe.SpecialType.firework_rocket">
            <summary>
            Firework rocket recipes
            </summary>
        </member>
        <member name="F:SharpCraft.SpecialRecipe.SpecialType.firework_star">
            <summary>
            Firework star recipes
            </summary>
        </member>
        <member name="F:SharpCraft.SpecialRecipe.SpecialType.firework_star_fade">
            <summary>
            Firework star add fade recipes
            </summary>
        </member>
        <member name="F:SharpCraft.SpecialRecipe.SpecialType.mapcloning">
            <summary>
            map cloning recipe
            </summary>
        </member>
        <member name="F:SharpCraft.SpecialRecipe.SpecialType.repairitem">
            <summary>
            repair item recipe
            </summary>
        </member>
        <member name="F:SharpCraft.SpecialRecipe.SpecialType.shielddecoration">
            <summary>
            shild pattern recipes
            </summary>
        </member>
        <member name="F:SharpCraft.SpecialRecipe.SpecialType.shulkerboxcoloring">
            <summary>
            shulker box coloring recipes
            </summary>
        </member>
        <member name="F:SharpCraft.SpecialRecipe.SpecialType.tippedarrow">
            <summary>
            Tipped arrow recipes
            </summary>
        </member>
        <member name="F:SharpCraft.SpecialRecipe.SpecialType.suspeciousstew">
            <summary>
            suspecious stew recipes
            </summary>
        </member>
        <member name="M:SharpCraft.SpecialRecipe.#ctor(System.Boolean,SharpCraft.BasePackNamespace,System.String,SharpCraft.SpecialRecipe.SpecialType,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.SpecialRecipe"/>
            </summary>
            <param name="packNamespace">The namespace the recipe is in</param>. Inherite from this constructor.
            <param name="fileName">The name of the recipe file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="group">The name of the recipe group the recipe is in. Leave null for no group.</param>
            <param name="recipeType">The type of special recipe</param>
            <param name="_">Unused parameter used for specifing you want to use this constructor</param>
        </member>
        <member name="M:SharpCraft.SpecialRecipe.#ctor(SharpCraft.BasePackNamespace,System.String,SharpCraft.SpecialRecipe.SpecialType,System.String,SharpCraft.BaseFile.WriteSetting)">
            <summary>
            Intializes a new <see cref="T:SharpCraft.SpecialRecipe"/>
            </summary>
            <param name="packNamespace">The namespace the recipe is in</param>
            <param name="fileName">The name of the recipe file</param>
            <param name="writeSetting">The settings for how to write this file</param>
            <param name="group">The name of the recipe group the recipe is in. Leave null for no group.</param>
            <param name="recipeType">The type of special recipe</param>
        </member>
        <member name="M:SharpCraft.SpecialRecipe.WriteFile(System.IO.TextWriter)">
            <summary>
            Writes the file
            </summary>
            <param name="stream">The stream used for writing the file</param>
        </member>
        <member name="T:SharpCraft.SharpCraftSettings">
            <summary>
            Settings for SharpCraft
            </summary>
        </member>
        <member name="P:SharpCraft.SharpCraftSettings.OwnedChunk">
            <summary>
            A chunk SharpCraft freely can use. Note that the value has to be for a chunk and not for a block.
            </summary>
        </member>
        <member name="P:SharpCraft.SharpCraftSettings.SharpCraftNamespace">
            <summary>
            The namespace sharpcraft will generate it's files in
            </summary>
        </member>
        <member name="T:SharpCraft.Writer.ISharpWriter">
            <summary>
            Interface for classes with a method which should run using <see cref="T:SharpCraft.Writer.SharpWriter"/> 
            </summary>
        </member>
        <member name="P:SharpCraft.Writer.ISharpWriter.Index">
            <summary>
            The index of this writer. Low indexed ISharpWriter will be called before high indexed ones
            </summary>
        </member>
        <member name="T:SharpCraft.Writer.ISharpWriterNormal">
            <summary>
            Interface for classes with a method which should run using <see cref="T:SharpCraft.Writer.SharpWriter"/> 
            </summary>
        </member>
        <member name="M:SharpCraft.Writer.ISharpWriterNormal.Write">
            <summary>
            Method to run using <see cref="M:SharpCraft.Writer.SharpWriter.RunNormalWriters``1(System.Boolean)"/>
            </summary>
        </member>
        <member name="T:SharpCraft.Writer.ISharpWriterNamespace">
            <summary>
            Interface for classes with a method which should run using <see cref="T:SharpCraft.Writer.SharpWriter"/> 
            </summary>
        </member>
        <member name="M:SharpCraft.Writer.ISharpWriterNamespace.Write">
            <summary>
            Method to run using <see cref="M:SharpCraft.Writer.SharpWriter.RunNormalWriters``1(System.Boolean)"/>
            </summary>
        </member>
        <member name="P:SharpCraft.Writer.ISharpWriterNamespace.Namespace">
            <summary>
            The namespace to write to
            </summary>
        </member>
        <member name="P:SharpCraft.Writer.ISharpWriterNamespace.NamespaceName">
            <summary>
            The name of the namespace this writer will get when called
            </summary>
        </member>
        <member name="T:SharpCraft.Writer.SharpWriter">
            <summary>
            Static class containing methods for running writers
            </summary>
        </member>
        <member name="M:SharpCraft.Writer.SharpWriter.RunNormalWriters``1(System.Boolean)">
            <summary>
            Runs all writers inheriting from the given type
            </summary>
            <param name="allAssemblies">True if there should be searched for writers in all assemblies</param>
            <typeparam name="TWriter">The type the writers should inherite from</typeparam>
        </member>
        <member name="M:SharpCraft.Writer.SharpWriter.RunNamespaceWriters``1(SharpCraft.Datapack,System.Boolean)">
            <summary>
            Runs all writers inheriting from the given type
            </summary>
            <param name="datapack">Datapack to get namespaces from</param>
            <param name="allAssemblies">True if there should be searched for writers in all assemblies</param>
            <typeparam name="TWriter">The type the writers should inherite from</typeparam>
        </member>
        <member name="M:SharpCraft.Writer.SharpWriter.GetWriters``1(System.Boolean)">
            <summary>
            Returns a list of all the writers inheriting from the given type
            </summary>
            <param name="allAssemblies">True if there should be searched for writers in all assemblies</param>
            <typeparam name="TWriter">The type the writers should inherite from</typeparam>
            <returns>A list of writers</returns>
        </member>
    </members>
</doc>
