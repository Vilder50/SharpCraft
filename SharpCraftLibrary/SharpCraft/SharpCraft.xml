<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpCraft</name>
    </assembly>
    <members>
        <member name="T:SharpCraft.Block">
            <summary>
            A object for minecraft blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new block which is the given type of block
            </summary>
            <param name="type">The block's ID/Type</param>
        </member>
        <member name="M:SharpCraft.Block.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.ID">
            <summary>
            The block's ID
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Group">
            <summary>
            The name of the block group
            </summary>
        </member>
        <member name="P:SharpCraft.Block.HasState">
            <summary>
            Checks if the block has any block states defined
            </summary>
        </member>
        <member name="P:SharpCraft.Block.HasData">
            <summary>
            Checks if the block has any block data defined
            </summary>
        </member>
        <member name="M:SharpCraft.Block.ClearStates">
            <summary>
            Clears the block's state
            </summary>
        </member>
        <member name="M:SharpCraft.Block.ClearData">
            <summary>
            Clears the block's data
            </summary>
        </member>
        <member name="M:SharpCraft.Block.GetDataString">
            <summary>
            Gets the raw data for the data the block contains
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="M:SharpCraft.Block.GetStateString">
            <summary>
            Gets the raw data for the states the block has
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="M:SharpCraft.Block.ToString">
            <summary>
            Gets the raw data used to set block this block
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="M:SharpCraft.Block.Clone">
            <summary>
            Creates a copy of this block
            </summary>
            <returns>The copied new block</returns>
        </member>
        <member name="M:SharpCraft.Block.op_Implicit(SharpCraft.ID.Block)~SharpCraft.Block">
            <summary>
            Converts a block id into a block
            </summary>
            <param name="type">The block id to convert</param>
        </member>
        <member name="T:SharpCraft.Block.Banner">
            <summary>
            An object for banner blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Banner.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new banner block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Banner.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Banner.SRotation">
            <summary>
            The way the banner is rotated.
            (0-15. Rotation = X*22.5+South (goes south-west-north-east))
            (Used for standing banners)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Banner.SFacing">
            <summary>
            The way the banner is facing.
            (Used for banners on a wall)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Banner.DCustomName">
            <summary>
            The banners name.
            This name is showed on maps which has clicked this banner.
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Banner.DPatterns">
            <summary>
            The banner's patterns
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Banner.BannerPattern">
            <summary>
            An object defining a banner pattern
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Banner.BannerPattern.#ctor(SharpCraft.ID.BannerPattern,SharpCraft.ID.Color)">
            <summary>
            Creates a new banner pattern
            </summary>
            <param name="SetPattern">The pattern to use</param>
            <param name="SetColor">The color of the pattern</param>
        </member>
        <member name="F:SharpCraft.Block.Banner.BannerPattern.Color">
            <summary>
            The pattern's color
            </summary>
        </member>
        <member name="F:SharpCraft.Block.Banner.BannerPattern.Pattern">
            <summary>
            The pattern
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Banner.GetDataString">
            <summary>
            Gets the raw data for the data the block contains
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="T:SharpCraft.Block.BaseContainer`1">
            <summary>
            A base class ofr blocks with inventories
            </summary>
        </member>
        <member name="M:SharpCraft.Block.BaseContainer`1.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new inventory block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.BaseContainer`1.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.BaseContainer`1.DLootTable">
            <summary>
            The loot table with items to put into the chest when opened
            </summary>
        </member>
        <member name="P:SharpCraft.Block.BaseContainer`1.DLootTableSeed">
            <summary>
            The seed used to generate the loot
            </summary>
        </member>
        <member name="M:SharpCraft.Block.BaseContainer`1.GetDataString">
            <summary>
            Gets the raw data for the inventory data
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="T:SharpCraft.Block.BaseInventory`1">
            <summary>
            A base class ofr blocks with inventories
            </summary>
        </member>
        <member name="M:SharpCraft.Block.BaseInventory`1.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new inventory block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.BaseInventory`1.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.BaseInventory`1.DLock">
            <summary>
            The inventory's lock.
            (Players have to use an item with the given name to open the block)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.BaseInventory`1.DCustomName">
            <summary>
            The custom name displayed at the top left corner when you open the block
            </summary>
        </member>
        <member name="P:SharpCraft.Block.BaseInventory`1.DItems">
            <summary>
            The items in the inventory
            </summary>
        </member>
        <member name="M:SharpCraft.Block.BaseInventory`1.GetDataString">
            <summary>
            Gets the raw data for the inventory data
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="T:SharpCraft.Block.Beacon">
            <summary>
            An object for beacon blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Beacon.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new beacon block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Beacon.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Beacon.DLock">
            <summary>
            The inventory's lock.
            (Players have to use an item with the given name to open the block)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Beacon.DLevels">
            <summary>
            The number of layers the beacon pyramide has
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Beacon.DPrimary">
            <summary>
            The primary effect chosen in the beacon
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Beacon.DSecondary">
            <summary>
            The secondary effect chosen in the beacon
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Beacon.GetDataString">
            <summary>
            Gets the raw data for the data the block contains
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="T:SharpCraft.Block.BrewingStand">
            <summary>
            An object for brewing stand blocks.
            (Blocks like bone blocks and purpur pillars)
            </summary>
        </member>
        <member name="M:SharpCraft.Block.BrewingStand.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new brewing stand block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.BrewingStand.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.BrewingStand.SHasBottle0">
            <summary>
            If the brewing stand block should display a bottle in slot 0
            </summary>
        </member>
        <member name="P:SharpCraft.Block.BrewingStand.SHasBottle1">
            <summary>
            If the brewing stand block should display a bottle in slot 1
            </summary>
        </member>
        <member name="P:SharpCraft.Block.BrewingStand.SHasBottle2">
            <summary>
            If the brewing stand block should display a bottle in slot 2
            </summary>
        </member>
        <member name="P:SharpCraft.Block.BrewingStand.DItems">
            <summary>
            The item's inside the brewing stand.
            0-2 = potion slots (left to right). 3 = ingredient slot. 4 = fuel slot.
            </summary>
        </member>
        <member name="P:SharpCraft.Block.BrewingStand.DBrewTime">
            <summary>
            The amount of time the potion has brewed.
            Done when hitting 20 seconds.
            </summary>
        </member>
        <member name="P:SharpCraft.Block.BrewingStand.DFule">
            <summary>
            The amount of fule in the brewing stand.
            (Fuel is used up everytime the brewing stand brews)
            </summary>
        </member>
        <member name="M:SharpCraft.Block.BrewingStand.GetDataString">
            <summary>
            Gets the raw data for the data the block contains
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="T:SharpCraft.Block.Chest">
            <summary>
            An object for chest blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Chest.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new chest block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Chest.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Chest.SWaterLogged">
            <summary>
            If the chest is water logged
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Chest.SFacing">
            <summary>
            The direction the chest is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Chest.SConnectionType">
            <summary>
            How the chest is connected to another chest
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Chest.DItems">
            <summary>
            The item's inside the chest.
            (0-26)
            </summary>
        </member>
        <member name="T:SharpCraft.Block.CommandBlock">
            <summary>
            An object for chest blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.CommandBlock.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new chest block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.CommandBlock.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.CommandBlock.SFacing">
            <summary>
            The direction the command block is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Block.CommandBlock.SConditional">
            <summary>
            If the command block is conditional
            </summary>
        </member>
        <member name="P:SharpCraft.Block.CommandBlock.DCustomName">
            <summary>
            The name of the command block
            </summary>
        </member>
        <member name="P:SharpCraft.Block.CommandBlock.DCommand">
            <summary>
            The command in the command block
            </summary>
        </member>
        <member name="P:SharpCraft.Block.CommandBlock.DLastOutput">
            <summary>
            The last command's string output
            </summary>
        </member>
        <member name="P:SharpCraft.Block.CommandBlock.DSuccessCount">
            <summary>
            The last command's success output
            </summary>
        </member>
        <member name="P:SharpCraft.Block.CommandBlock.DLastExecution">
            <summary>
            The point in time the last command was ran
            </summary>
        </member>
        <member name="P:SharpCraft.Block.CommandBlock.DTrackOutput">
            <summary>
            If the command block should store <see cref="P:SharpCraft.Block.CommandBlock.DLastOutput"/>
            </summary>
        </member>
        <member name="P:SharpCraft.Block.CommandBlock.DPowered">
            <summary>
            If the command block is powered
            </summary>
        </member>
        <member name="P:SharpCraft.Block.CommandBlock.DAuto">
            <summary>
            If the command block doesnt haeve to be powered to run the command
            </summary>
        </member>
        <member name="P:SharpCraft.Block.CommandBlock.DConditionMet">
            <summary>
            If the command block ran last time
            </summary>
        </member>
        <member name="P:SharpCraft.Block.CommandBlock.DUpdateLastExecution">
            <summary>
            If the command block should be able to run multiple times in the same tick.
            </summary>
        </member>
        <member name="M:SharpCraft.Block.CommandBlock.GetDataString">
            <summary>
            Gets the raw data for the data the block contains
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="T:SharpCraft.Block.Comparator">
            <summary>
            An object for comparator blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Comparator.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new comparator block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Comparator.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Comparator.SFacing">
            <summary>
            The direction the comparator is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Comparator.SCompareMode">
            <summary>
            The comparator's compara mode
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Comparator.SPowered">
            <summary>
            If the comparator is powered
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Comparator.DOutputSignal">
            <summary>
            The strenght of the comparators output
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Comparator.GetDataString">
            <summary>
            Gets the raw data for the data the block contains
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="T:SharpCraft.Block.DropperDispenser">
            <summary>
            An object for dispensers / dropper blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.DropperDispenser.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new chest dispenser / dropper
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.DropperDispenser.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.DropperDispenser.SFacing">
            <summary>
            The direction the dispenser / dropper is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Block.DropperDispenser.SPowered">
            <summary>
            If the dispenser / dropper is powered right now
            </summary>
        </member>
        <member name="P:SharpCraft.Block.DropperDispenser.DItems">
            <summary>
            The item's inside the dispenser / dropper.
            (0-8)
            </summary>
        </member>
        <member name="T:SharpCraft.Block.EndGateWay">
            <summary>
            An object for end gateway blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.EndGateWay.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new end gateway block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.EndGateWay.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.EndGateWay.DExit">
            <summary>
            The location the entity gets teleported to when entering
            </summary>
        </member>
        <member name="P:SharpCraft.Block.EndGateWay.DExactTeleport">
            <summary>
            If the entity should be teleported to this exact location
            </summary>
        </member>
        <member name="P:SharpCraft.Block.EndGateWay.DAge">
            <summary>
            The amount of time the portal has existed.
            x&lt;200 = magenta beam.
            </summary>
        </member>
        <member name="M:SharpCraft.Block.EndGateWay.GetDataString">
            <summary>
            Gets the raw data for the data the block contains
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="T:SharpCraft.Block.Furnace">
            <summary>
            An object for furnace blocks.
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Furnace.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new furnace block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Furnace.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Furnace.DItems">
            <summary>
            The item's inside the brewing stand.
            0 = Smelting item slot. 1 = Fuel slot. 2 = Result slot.
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Furnace.SFacing">
            <summary>
            The direction the furnace is facing.
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Furnace.SLit">
            <summary>
            If the furnace is lit or not
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Furnace.DBurnTime">
            <summary>
            The amount of time till the used fuel item runs out
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Furnace.DCookTime">
            <summary>
            The amount of time the item has been smelting for
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Furnace.DCookTimeTotal">
            <summary>
            The amount of time it will take for the item to smelt.
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Furnace.DLastNewRecipeID">
            <summary>
            The ID of the last new recipe smelted in the furnace
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Furnace.DSmeltedRecipes">
            <summary>
            A list of all recipes the furnace has smelted.
            Each recipes' number shows how many of the recipe there has been smelted since the player last took out the xp.
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Furnace.SmeltedRecipe">
            <summary>
            An object used to define how many times a recipe has been smelted
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Furnace.SmeltedRecipe.#ctor(System.Int32,SharpCraft.Recipe,System.Nullable{System.Int32})">
            <summary>
            An object used to define how many times a recipe has been smelted
            </summary>
            <param name="id">The recipe's unique ID</param>
            <param name="recipe">the recipe</param>
            <param name="timesSmelted">the amount of times the recipe has been smelted</param>
        </member>
        <member name="P:SharpCraft.Block.Furnace.SmeltedRecipe.Recipe">
            <summary>
            The recipe
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Furnace.SmeltedRecipe.TimesSmelted">
            <summary>
            The amount of times the recipe has been smelted
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Furnace.SmeltedRecipe.ID">
            <summary>
            The recipe's unique ID
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Furnace.SmeltedRecipe.GetRawData">
            <summary>
            Gets the raw data used by the game
            </summary>
            <returns>Raw dat used by the game</returns>
        </member>
        <member name="M:SharpCraft.Block.Furnace.GetDataString">
            <summary>
            Gets the raw data for the data the block contains
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="T:SharpCraft.Block.Hopper">
            <summary>
            An object for hopper blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Hopper.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new hopper block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Hopper.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Hopper.SEnabled">
            <summary>
            If the hopper is allowed to transfer items
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Hopper.SFacing">
            <summary>
            The direction the hopper is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Hopper.DItems">
            <summary>
            The item's inside the hopper.
            (0-4)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Hopper.DCooldown">
            <summary>
            The time till the hopper again will transfer an item.
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Hopper.GetDataString">
            <summary>
            Gets the raw data for the data the block contains
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="T:SharpCraft.Block.Jigsaw">
            <summary>
            An object for jigsaw blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Jigsaw.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new jigsaw block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Jigsaw.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Jigsaw.SFacing">
            <summary>
            The way the jigsaw is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Jigsaw.DPool">
            <summary>
            The name of the structure pool to use
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Jigsaw.DFinishedBlock">
            <summary>
            The block the jigsaw should transform into when done
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Jigsaw.DName">
            <summary>
            The name of the jigsaw block.
            (Jigsaws only connects to other jigsaws with the same name)
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Jigsaw.GetDataString">
            <summary>
            Gets the raw data for the data the block contains
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="T:SharpCraft.Block.Jukebox">
            <summary>
            An object for jukebox blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Jukebox.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new jukebox block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Jukebox.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Jukebox.SHasRecord">
            <summary>
            If the jukebox block should display it has an item inside
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Jukebox.DRecordItem">
            <summary>
            The item in the jukebox
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Jukebox.GetDataString">
            <summary>
            Gets the raw data for the data the block contains
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="T:SharpCraft.Block.Lectern">
            <summary>
            An object for lectern blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Lectern.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new lectern block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Lectern.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Lectern.SFacing">
            <summary>
            The way the lectern is facing
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Lectern.GetDataString">
            <summary>
            Gets the raw data for the data the block contains
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="T:SharpCraft.Block.MovedByPiston">
            <summary>
            An object for blocks being moved by a piston
            </summary>
        </member>
        <member name="M:SharpCraft.Block.MovedByPiston.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new block being moved by a piston
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.MovedByPiston.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.MovedByPiston.SPushing">
            <summary>
            The way the block is being pushed
            </summary>
        </member>
        <member name="P:SharpCraft.Block.MovedByPiston.SPistonBase">
            <summary>
            The type of piston base used
            </summary>
        </member>
        <member name="P:SharpCraft.Block.MovedByPiston.SShort">
            <summary>
            If the piston arm is short
            </summary>
        </member>
        <member name="P:SharpCraft.Block.MovedByPiston.DMovingBlock">
            <summary>
            The block being moved
            Note: block data is not supported
            </summary>
        </member>
        <member name="P:SharpCraft.Block.MovedByPiston.DDirection">
            <summary>
            The way the block is being pushed / pulled from
            </summary>
        </member>
        <member name="P:SharpCraft.Block.MovedByPiston.DProgress">
            <summary>
            How far the black has been moved
            </summary>
        </member>
        <member name="P:SharpCraft.Block.MovedByPiston.Pushed">
            <summary>
            If the block is pushed or pulled
            </summary>
        </member>
        <member name="P:SharpCraft.Block.MovedByPiston.PistonHead">
            <summary>
            If the block actually is the piston's piston head
            </summary>
        </member>
        <member name="M:SharpCraft.Block.MovedByPiston.GetDataString">
            <summary>
            Gets the raw data for the data the block contains
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="T:SharpCraft.Block.ShulkerBoxBarrel">
            <summary>
            An object for shulker box and barral blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.ShulkerBoxBarrel.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new shulker box or barrel block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.ShulkerBoxBarrel.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.ShulkerBoxBarrel.SFacing">
            <summary>
            The direction the shulker box / barrel is facing (the way it opens out into )
            </summary>
        </member>
        <member name="P:SharpCraft.Block.ShulkerBoxBarrel.DItems">
            <summary>
            The item's inside the shulker box / barrel.
            (0-26)
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Sign">
            <summary>
            An object for sign blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Sign.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new sign block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Sign.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Sign.SWaterLogged">
            <summary>
            If the sign is water logged
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Sign.SRotation">
            <summary>
            The way the sign is rotated.
            (0-15. Rotation = X*22.5+South (goes south-west-north-east))
            (Used for standing signs)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Sign.SFacing">
            <summary>
            The way the sign is facing.
            (Used for signs on a wall)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Sign.DColor">
            <summary>
            The color of the text on the sign
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Sign.DText1">
            <summary>
            The text on line 1
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Sign.DText2">
            <summary>
            The text on line 2
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Sign.DText3">
            <summary>
            The text on line 3
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Sign.DText4">
            <summary>
            The text on line 4
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Sign.GetDataString">
            <summary>
            Gets the raw data for the data the block contains
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="T:SharpCraft.Block.Skull">
            <summary>
            An object for skull / head blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Skull.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new skull / head block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Skull.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Skull.SRotation">
            <summary>
            The way the skull / head is rotated.
            (0-15. Rotation = X*22.5+South (goes south-west-north-east))
            (Used for standing skulls / heads)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Skull.SFacing">
            <summary>
            The way the skull / head is facing.
            (Used for skulls / heads on a wall)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Skull.DPlayerSkin">
            <summary>
            The name of the player whose skin to display
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Skull.DDataSkin">
            <summary>
            The raw data for a skin.
            (Starting from the Owner tag)
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Skull.GetDataString">
            <summary>
            Gets the raw data for the data the block contains
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="T:SharpCraft.Block.Spawner">
            <summary>
            An object for end spawner blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Spawner.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new end spawner block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Spawner.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:SharpCraft.Block.Spawner.#ctor(SharpCraft.Entity.BaseEntity,System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a spawner with the specified entity inside. The entity wont move and the spawner wont spawn the entity
            </summary>
            <param name="display">The entity to display</param>
            <param name="type">The type of block</param>
        </member>
        <member name="P:SharpCraft.Block.Spawner.DPotentials">
            <summary>
            The entities the spawner can spawn
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Spawner.DSpawnCount">
            <summary>
            How many entities to try to spawn every time
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Spawner.DSpawnRange">
            <summary>
            The range to spawn the entities in
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Spawner.DDelay">
            <summary>
            Time till the next spawn
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Spawner.DRandomDelay">
            <summary>
            The amount of ticks to randomly add to the next spawn
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Spawner.DMaxEntities">
            <summary>
            The maximum amount of entities there can be around the spawner for it to spawn
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Spawner.DPlayerRange">
            <summary>
            The range the player has to be in for the spawner to start spawning
            (<see cref="P:SharpCraft.Block.Spawner.DMaxEntities"/> has to be set for this to work)
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Spawner.GetDataString">
            <summary>
            Gets the raw data for the data the block contains
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="T:SharpCraft.Block.StructureBlock">
            <summary>
            An object for structure blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.StructureBlock.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new structure block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.StructureBlock.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.StructureBlock.SMode">
            <summary>
            The way the block should display
            </summary>
        </member>
        <member name="P:SharpCraft.Block.StructureBlock.DName">
            <summary>
            The name of the structure
            </summary>
        </member>
        <member name="P:SharpCraft.Block.StructureBlock.DAuthor">
            <summary>
            The name of the structure's creator
            </summary>
        </member>
        <member name="P:SharpCraft.Block.StructureBlock.DMetadata">
            <summary>
            Custom data for the structure
            </summary>
        </member>
        <member name="P:SharpCraft.Block.StructureBlock.DCoords">
            <summary>
            The location relative to the structure block to load/save the structure
            </summary>
        </member>
        <member name="P:SharpCraft.Block.StructureBlock.DSize">
            <summary>
            The size of the structure to save
            </summary>
        </member>
        <member name="P:SharpCraft.Block.StructureBlock.DRotation">
            <summary>
            The way the structure is rotated when loaded
            </summary>
        </member>
        <member name="P:SharpCraft.Block.StructureBlock.DMirror">
            <summary>
            The way the structure is mirrored when loaded
            </summary>
        </member>
        <member name="P:SharpCraft.Block.StructureBlock.DMode">
            <summary>
            The mode the structure block is in
            </summary>
        </member>
        <member name="P:SharpCraft.Block.StructureBlock.DIgnoreEntities">
            <summary>
            If the structure block should ignore entities
            </summary>
        </member>
        <member name="P:SharpCraft.Block.StructureBlock.DIntegrity">
            <summary>
            The percent amount of random air blocks in the structure.
            (0 = none. 1 = all)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.StructureBlock.DSeed">
            <summary>
            The seed to use when placing the random air blocks with <see cref="P:SharpCraft.Block.StructureBlock.DIntegrity"/>
            </summary>
        </member>
        <member name="M:SharpCraft.Block.StructureBlock.GetDataString">
            <summary>
            Gets the raw data for the data the block contains
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="T:SharpCraft.Block.Anvil">
            <summary>
            An object for anvil blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Anvil.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new anvil block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Anvil.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Anvil.SFacing">
            <summary>
            The direction the block is facing
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Bamboo">
            <summary>
            An object for bamboo (sapling) blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Bamboo.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new bamboo (sapling) block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Bamboo.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Bamboo.SAge">
            <summary>
            The age of the bamboo.
            (0-1)
            1 = Bamboo looks thicker.
            (<see cref="F:SharpCraft.ID.Block.bamboo_sapling"/> does not support this)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Bamboo.SStage">
            <summary>
            The stage of the bamboo
            (0-1)
            1 = Bamboo will grow soon.
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Bamboo.SLeaves">
            <summary>
            The bamboo's leaves' size
            (<see cref="F:SharpCraft.ID.Block.bamboo_sapling"/> does not support this)
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Bed">
            <summary>
            An object for anvil blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Bed.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new bed block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Bed.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Bed.SFacing">
            <summary>
            The direction the bed is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Bed.SOccupied">
            <summary>
            If the bed is occupied
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Bed.SPart">
            <summary>
            The direction the bed is facing
            </summary>
        </member>
        <member name="T:SharpCraft.Block.BeetrootNetherWartBerryBush">
            <summary>
            An object for beetroot, berry bush and nether wart blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.BeetrootNetherWartBerryBush.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new beetroot, berry bush or nether wart block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.BeetrootNetherWartBerryBush.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.BeetrootNetherWartBerryBush.SAge">
            <summary>
            How far the beetroot / berry bush / nether wart has grown
            (0-3. 3 == fully grown)
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Bell">
            <summary>
            An object for bell blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Bell.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a bell block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Bell.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Bell.SAttachement">
            <summary>
            The way the bell is attached
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Bell.SFacing">
            <summary>
            The way the bell faces
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Button">
            <summary>
            An object for button blocks.
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Button.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new button block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Button.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Button.PlacedOn">
            <summary>
            The way the button is placed
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Button.Facing">
            <summary>
            The way the button is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Button.Clicked">
            <summary>
            If the button is clicked
            </summary>
        </member>
        <member name="T:SharpCraft.Block.CactusSugarCane">
            <summary>
            An object for cactus and sugar cane blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.CactusSugarCane.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new cactus or sugar cane block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.CactusSugarCane.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.CactusSugarCane.SAge">
            <summary>
            How much the cactus / sugar cane has grown
            (0-15. 1-4 == will not grow. 15 == will try to grow)
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Cake">
            <summary>
            An object for cake blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Cake.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new cake block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Cake.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Cake.SBites">
            <summary>
            How much cake there has been eaten
            (0-6. 0 = Full cake. 6 = One bite left)
            </summary>
        </member>
        <member name="T:SharpCraft.Block.CarrotPotatoWheat">
            <summary>
            An object for carrot, potato or wheat blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.CarrotPotatoWheat.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new carrot, potato or wheat block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.CarrotPotatoWheat.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.CarrotPotatoWheat.SAge">
            <summary>
            How much the carrot / potato / wheat block has grown
            (0-7. 7 == fully grown)
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Cauldron">
            <summary>
            An object for cauldron blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Cauldron.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new cauldron block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Cauldron.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Cauldron.SLevel">
            <summary>
            How much water there is in the cauldron
            (0-3. 0 = no water. 3 = full)
            </summary>
        </member>
        <member name="T:SharpCraft.Block.ChorusFlower">
            <summary>
            An object for chorus flower blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.ChorusFlower.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new chorus flower block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.ChorusFlower.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.ChorusFlower.SAge">
            <summary>
            The age of the flower.
            (0-5. 1-4 = still growin. 5 = fully grown)
            </summary>
        </member>
        <member name="T:SharpCraft.Block.ChorusPlant">
            <summary>
            An object for chorus plant blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.ChorusPlant.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new chorus plant block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.ChorusPlant.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.ChorusPlant.SDown">
            <summary>
            If the plant is connected downwards
            </summary>
        </member>
        <member name="P:SharpCraft.Block.ChorusPlant.SUp">
            <summary>
            If the plant is connected upwards
            </summary>
        </member>
        <member name="P:SharpCraft.Block.ChorusPlant.SEast">
            <summary>
            If the plant is connected in east
            </summary>
        </member>
        <member name="P:SharpCraft.Block.ChorusPlant.SNorth">
            <summary>
            If the plant is connected in north
            </summary>
        </member>
        <member name="P:SharpCraft.Block.ChorusPlant.SSouth">
            <summary>
            If the plant is connected in south
            </summary>
        </member>
        <member name="P:SharpCraft.Block.ChorusPlant.SWest">
            <summary>
            If the plant is connected in west
            </summary>
        </member>
        <member name="T:SharpCraft.Block.CocoaBean">
            <summary>
            An object for cocoa bean blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.CocoaBean.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new cocoa bean block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.CocoaBean.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.CocoaBean.SAge">
            <summary>
            How much the cocoa bean has grown
            (0-2. 2 == fully grown)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.CocoaBean.Facing">
            <summary>
            The direction of the log the bean is placed on.
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Conduit">
            <summary>
            An object for conduit blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Conduit.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new conduit block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Conduit.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Conduit.SWaterLogged">
            <summary>
            If the conduit is water logged
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Coral">
            <summary>
            An object for coral plants (not blocks)
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Coral.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new coral plant (not block)
            </summary>
            <param name="type">The type of plant</param>
        </member>
        <member name="M:SharpCraft.Block.Coral.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Coral.SFacing">
            <summary>
            The way the coral is facing
            Note: this is only for coral wall fans
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Coral.SWaterLogged">
            <summary>
            If the coral is water logged
            </summary>
        </member>
        <member name="T:SharpCraft.Block.DaylightDetector">
            <summary>
            An object for daylight detector blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.DaylightDetector.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new daylight detector block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.DaylightDetector.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.DaylightDetector.SPower">
            <summary>
            How much redstone power it outputs
            (0-15)
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Door">
            <summary>
            An object for door blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Door.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new door block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Door.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Door.SFacing">
            <summary>
            The direction the door is placed in.
            (The direction the door will fill less in.)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Door.SPart">
            <summary>
            The part of the door
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Door.SHingeLocation">
            <summary>
            What side the hinges are on
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Door.SOpen">
            <summary>
            If the door is open
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Door.SPowered">
            <summary>
            If the door is powered by redstone
            </summary>
        </member>
        <member name="T:SharpCraft.Block.EndPortalFrame">
            <summary>
            An object for end portal frame blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.EndPortalFrame.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new end portal frame block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.EndPortalFrame.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.EndPortalFrame.SEye">
            <summary>
            If there is an eye in the portal
            </summary>
        </member>
        <member name="P:SharpCraft.Block.EndPortalFrame.SFacing">
            <summary>
            The direction the frame is pointing.
            The last frame to get an eye has to face inward the portal.
            </summary>
        </member>
        <member name="T:SharpCraft.Block.EndRod">
            <summary>
            An object for end rod blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.EndRod.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new end rod block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.EndRod.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.EndRod.SAttached">
            <summary>
            The direction of the block its attached to.
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Farmland">
            <summary>
            An object for farm land blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Farmland.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new farm land block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Farmland.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Farmland.SHydration">
            <summary>
            How hydrated the farmland is.
            (0-7. 7 == fully hydrated)
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Fence">
            <summary>
            An object for fence blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Fence.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new fence block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Fence.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Fence.SEast">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Fence.SNorth">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Fence.SSouth">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Fence.SWest">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Fence.SWaterLogged">
            <summary>
            If the block is water logged
            </summary>
        </member>
        <member name="T:SharpCraft.Block.FenceGate">
            <summary>
            An object for fence gate blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.FenceGate.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new fence gate block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.FenceGate.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.FenceGate.SFacing">
            <summary>
            The direction the gate's door will swing into when open
            </summary>
        </member>
        <member name="P:SharpCraft.Block.FenceGate.SPartOfWall">
            <summary>
            Will lower the gate to be in the same height as a wall
            </summary>
        </member>
        <member name="P:SharpCraft.Block.FenceGate.SOpen">
            <summary>
            If the gate is open
            </summary>
        </member>
        <member name="P:SharpCraft.Block.FenceGate.SPowered">
            <summary>
            If the gate is powered by redstone
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Fire">
            <summary>
            An object for fire blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Fire.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new fire block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Fire.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Fire.SAge">
            <summary>
            The age of the fire.
            (0-15. Has a 1/3 chance of going up each tick)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Fire.SEast">
            <summary>
            If the fire texture shows that way
            (If there is a flameable block there)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Fire.SNorth">
            <summary>
            If the fire texture shows that way
            (If there is a flameable block there)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Fire.SSouth">
            <summary>
            If the fire texture shows that way
            (If there is a flameable block there)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Fire.SWest">
            <summary>
            If the fire texture shows that way
            (If there is a flameable block there)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Fire.SUp">
            <summary>
            If the fire texture shows that way
            (If there is a flameable block there)
            </summary>
        </member>
        <member name="T:SharpCraft.Block.FrostedIce">
            <summary>
            An object for frosted ice blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.FrostedIce.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new frosted ice block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.FrostedIce.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.FrostedIce.SAge">
            <summary>
            The age of the ice.
            (0-3. When 3 it has a chance to break)
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Grass">
            <summary>
            An object for grass, mycelium and podzol blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Grass.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new grass, mycelium or podzol block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Grass.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Grass.SSnowy">
            <summary>
            If there is snow ontop of the block
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Grindstone">
            <summary>
            An object for grindstone blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Grindstone.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a grindstone block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Grindstone.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Grindstone.SPlaced">
            <summary>
            The way the grindstone is placed
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Grindstone.SFacing">
            <summary>
            The way the grindstone faces
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Kelp">
            <summary>
            An object for krlp blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Kelp.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new krlp block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Kelp.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Kelp.SAge">
            <summary>
            The age of the kelp.
            (0-25. 1-24 == will try to grow. 25 = won't try to grow)
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Ladder">
            <summary>
            An object for ladder blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Ladder.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new ladder block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Ladder.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Ladder.SSupportBlockDirection">
            <summary>
            The direction of the block the ladder is on
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Ladder.SWaterLogged">
            <summary>
            If the ladder is water logged
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Lantern">
            <summary>
            An object for lantern blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Lantern.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new lantern block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Lantern.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Lantern.SHanging">
            <summary>
            If the lantern is hanging from the roof
            </summary>
        </member>
        <member name="T:SharpCraft.Block.LargeFlower">
            <summary>
            An object for large flower blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.LargeFlower.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new large flower block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.LargeFlower.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.LargeFlower.SPart">
            <summary>
            The part of the flower
            </summary>
        </member>
        <member name="T:SharpCraft.Block.LavaWater">
            <summary>
            An object for lava and water blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.LavaWater.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new lava or water block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.LavaWater.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.LavaWater.SLevel">
            <summary>
            The type of lava / water.
            (0-15. 0 == source block. 1-7 = flowing. 8-15 = falling (the number is 8+the number from the source its falling from))
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Leaves">
            <summary>
            An object for leave blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Leaves.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new leave block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Leaves.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Leaves.SDistance">
            <summary>
            The distance to the nearest wooden block.
            (1-7. 7 == Can despawn)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Leaves.SPersistant">
            <summary>
            If the leave shouldn't decay
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Lever">
            <summary>
            An object for lever blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Lever.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new lever block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Lever.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Lever.SPlacedOn">
            <summary>
            The way the lever is placed
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Lever.SFacing">
            <summary>
            The way the lever is facing (oppesite of the direction of the block its placed on)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Lever.SPowered">
            <summary>
            If the lever is turned on
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Loom">
            <summary>
            An object for loom blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Loom.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new loom block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Loom.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Loom.SFacing">
            <summary>
            The direction the block is facing
            </summary>
        </member>
        <member name="T:SharpCraft.Block.MushroomBlock">
            <summary>
            An object for mushroom blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.MushroomBlock.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new mushroom block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.MushroomBlock.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.MushroomBlock.SDown">
            <summary>
            If the texture should be shown downwards.
            False will show pores texture
            </summary>
        </member>
        <member name="P:SharpCraft.Block.MushroomBlock.SUp">
            <summary>
            If the texture should be shown upwards.
            False will show pores texture
            </summary>
        </member>
        <member name="P:SharpCraft.Block.MushroomBlock.SEast">
            <summary>
            If the texture should be in east.
            False will show pores texture
            </summary>
        </member>
        <member name="P:SharpCraft.Block.MushroomBlock.SNorth">
            <summary>
            If the texture should be in north.
            False will show pores texture
            </summary>
        </member>
        <member name="P:SharpCraft.Block.MushroomBlock.SSouth">
            <summary>
            If the texture should be in south.
            False will show pores texture
            </summary>
        </member>
        <member name="P:SharpCraft.Block.MushroomBlock.SWest">
            <summary>
            If the texture should be in west.
            False will show pores texture
            </summary>
        </member>
        <member name="T:SharpCraft.Block.NetherPortal">
            <summary>
            An object for nether portal blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.NetherPortal.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new nether portal block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.NetherPortal.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.NetherPortal.SAxis">
            <summary>
            The axis the portal is parallel to
            </summary>
        </member>
        <member name="T:SharpCraft.Block.NoteBlock">
            <summary>
            An object for note block blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.NoteBlock.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new note block block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.NoteBlock.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.NoteBlock.SInstrument">
            <summary>
            The block's instrument
            </summary>
        </member>
        <member name="P:SharpCraft.Block.NoteBlock.SNote">
            <summary>
            The note to play
            </summary>
        </member>
        <member name="P:SharpCraft.Block.NoteBlock.SPowered">
            <summary>
            If the block is powered by redstone.
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Observer">
            <summary>
            An object for observer blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Observer.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new observer block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Observer.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Observer.SFacing">
            <summary>
            The direction the observer is observing.
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Observer.SPowered">
            <summary>
            If the observer has observed a change
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Pane">
            <summary>
            An object for pane blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Pane.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new pane block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Pane.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="T:SharpCraft.Block.Pillar">
            <summary>
            An object for pillar blocks.
            (Blocks like bone blocks and purpur pillars)
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Pillar.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new pillar block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Pillar.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Pillar.SAxis">
            <summary>
            The axis the pillar is parallel to
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Piston">
            <summary>
            An object for piston blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Piston.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new piston block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Piston.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Piston.SFacing">
            <summary>
            The direction the piston will push.
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Piston.SExtended">
            <summary>
            If the piston is extendend
            </summary>
        </member>
        <member name="T:SharpCraft.Block.PressurePlate">
            <summary>
            An object for pressure plate blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.PressurePlate.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new pressure plate block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.PressurePlate.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.PressurePlate.SDown">
            <summary>
            If the plate is pushed down
            </summary>
        </member>
        <member name="P:SharpCraft.Block.PressurePlate.SPower">
            <summary>
            How much redstone power the plate outputs
            (0-15)
            Note: only works for metal plates
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Pumpkin">
            <summary>
            An object for pumpkin blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Pumpkin.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new pumpkin block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Pumpkin.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Pumpkin.SFacing">
            <summary>
            The direction the pumpkin is facing
            </summary>
        </member>
        <member name="T:SharpCraft.Block.PumpkinMelonStem">
            <summary>
            An object for stem blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.PumpkinMelonStem.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new stem block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.PumpkinMelonStem.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.PumpkinMelonStem.SAge">
            <summary>
            The age of the stem.
            (0-7. 7 == Fully grown)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.PumpkinMelonStem.SGrowInto">
            <summary>
            The direction of the block the stem is growing into
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Rail">
            <summary>
            An object for rail blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Rail.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new rail block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Rail.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Rail.SDirection">
            <summary>
            The direction the rail is going in
            </summary>
        </member>
        <member name="T:SharpCraft.Block.RedstoneDust">
            <summary>
            An object for redstone wire blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.RedstoneDust.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new redstone wire block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.RedstoneDust.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.RedstoneDust.SPower">
            <summary>
            How much power the dust has
            (0-15)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.RedstoneDust.SEast">
            <summary>
            The way the redstone is connected in the direction
            </summary>
        </member>
        <member name="P:SharpCraft.Block.RedstoneDust.SNorth">
            <summary>
            The way the redstone is connected in the direction
            </summary>
        </member>
        <member name="P:SharpCraft.Block.RedstoneDust.SSouth">
            <summary>
            The way the redstone is connected in the direction
            </summary>
        </member>
        <member name="P:SharpCraft.Block.RedstoneDust.SWest">
            <summary>
            The way the redstone is connected in the direction
            </summary>
        </member>
        <member name="T:SharpCraft.Block.RedstoneLit">
            <summary>
            An object for redstone lamp, torches and ore blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.RedstoneLit.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new redstone lamp, torches or ore block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.RedstoneLit.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.RedstoneLit.SLit">
            <summary>
            If the block is lit up
            </summary>
        </member>
        <member name="T:SharpCraft.Block.RedstoneRepeater">
            <summary>
            An object for redstone repeater blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.RedstoneRepeater.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new redstone repeater block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.RedstoneRepeater.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.RedstoneRepeater.SDelay">
            <summary>
            How many ticks delay the repeater gives.
            (1-4 ticks)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.RedstoneRepeater.SFacing">
            <summary>
            The direction the output will be send in
            </summary>
        </member>
        <member name="P:SharpCraft.Block.RedstoneRepeater.SLocked">
            <summary>
            If the repeater is locked
            </summary>
        </member>
        <member name="P:SharpCraft.Block.RedstoneRepeater.SPowered">
            <summary>
            If the repeater is powered
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Sapling">
            <summary>
            An object for sapling blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Sapling.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new sapling block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Sapling.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Sapling.SStage">
            <summary>
            The stage of the sapling
            (0-1)
            1 = sapling will grow soon.
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Scaffolding">
            <summary>
            An object for scaffolding blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Scaffolding.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new scaffolding block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Scaffolding.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Scaffolding.SDistance">
            <summary>
            How far out the scaffolding has gone
            (0-7. 7 == will start to fall)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Scaffolding.SWaterLogged">
            <summary>
            If the scaffoling is water logged
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Scaffolding.SNoBlockUnder">
            <summary>
            If there isn't a block under the scaffolding
            </summary>
        </member>
        <member name="T:SharpCraft.Block.SeaPicles">
            <summary>
            An object for sea picle blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.SeaPicles.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new sea picle block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.SeaPicles.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.SeaPicles.SPicles">
            <summary>
            The amount of picles in the block
            (1-4)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.SeaPicles.SWaterLogged">
            <summary>
            If the picles are water logged
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Slab">
            <summary>
            An object for slab blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Slab.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new slab block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Slab.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Slab.SWaterLogged">
            <summary>
            If the slab is water logged
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Slab.SPart">
            <summary>
            The type of slab
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Snow">
            <summary>
            An object for snow blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Snow.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a snow block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Snow.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Snow.SLayers">
            <summary>
            The amount of snow layers
            (1-8)
            </summary>
        </member>
        <member name="T:SharpCraft.Block.SpecialRail">
            <summary>
            An object for special rail blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.SpecialRail.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new special rail block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.SpecialRail.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.SpecialRail.SDirection">
            <summary>
            The direction the rail is going in.
            </summary>
        </member>
        <member name="P:SharpCraft.Block.SpecialRail.SPowered">
            <summary>
            If the rail is activated
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Stair">
            <summary>
            An object for stair blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Stair.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a stair block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Stair.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Stair.SWaterLogged">
            <summary>
            If the stair is water logged
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Stair.SShape">
            <summary>
            The shape of the stair
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Stair.SPlaced">
            <summary>
            The block the stair is placed on
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Stair.SFacing">
            <summary>
            The direction the full stair part is facing
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Terracotta">
            <summary>
            An object for terracotta blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Terracotta.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new terracotta block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Terracotta.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="T:SharpCraft.Block.TNT">
            <summary>
            An object for tnt blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.TNT.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a tnt block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.TNT.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.TNT.SUnstable">
            <summary>
            If the tnt gets ignited when broken
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Trapdoor">
            <summary>
            An object for trapdoor blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Trapdoor.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a trapdoor block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Trapdoor.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Trapdoor.SFacing">
            <summary>
            The direction the trapdoor will be most open in
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Trapdoor.SType">
            <summary>
            The type of trapdoor
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Trapdoor.SOpen">
            <summary>
            If the trapdoor is open
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Trapdoor.SPowered">
            <summary>
            If the trapdoor is powered by redstone
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Trapdoor.SWaterLogged">
            <summary>
            If the trapdoor is water logged
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Tripwire">
            <summary>
            An object for tripwire blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Tripwire.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a tripwire block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Tripwire.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Tripwire.SEast">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Tripwire.SNorth">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Tripwire.SSouth">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Tripwire.SWest">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Tripwire.SAttached">
            <summary>
            If the tripwire is attached to tripwire hook
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Tripwire.SDisarmed">
            <summary>
            If the tripwire has been disarmed
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Tripwire.SSteppedDown">
            <summary>
            If the tripwire is being stepped on
            </summary>
        </member>
        <member name="T:SharpCraft.Block.TripwireHook">
            <summary>
            An object for tripwire hook blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.TripwireHook.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a tripwire hook block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.TripwireHook.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.TripwireHook.SAttached">
            <summary>
            If the tripwire hook is attached to a tripwire
            </summary>
        </member>
        <member name="P:SharpCraft.Block.TripwireHook.SFacing">
            <summary>
            The direction the tripwire hook is facing into
            </summary>
        </member>
        <member name="P:SharpCraft.Block.TripwireHook.SPowerd">
            <summary>
            If the tripwire hook's tripwire is being stepped on
            </summary>
        </member>
        <member name="T:SharpCraft.Block.TurtleEggs">
            <summary>
            An object for turtle egg blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.TurtleEggs.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a turtle egg block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.TurtleEggs.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.TurtleEggs.SEggs">
            <summary>
            The amount of eggs in the block.
            (1-4)
            </summary>
        </member>
        <member name="P:SharpCraft.Block.TurtleEggs.SHatching">
            <summary>
            How far the eggs has hatched.
            (0-2. 2 == Will hatch soon)
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Vines">
            <summary>
            An object for vine blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Vines.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new vine block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Vines.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Vines.SDown">
            <summary>
            If the vine should be displayed in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Vines.SUp">
            <summary>
            If the vine should be displayed in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Vines.SEast">
            <summary>
            If the vine should be displayed in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Vines.SNorth">
            <summary>
            If the vine should be displayed in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Vines.SSouth">
            <summary>
            If the vine should be displayed in this direction
            </summary>
        </member>
        <member name="P:SharpCraft.Block.Vines.SWest">
            <summary>
            If the vine should be displayed in this direction
            </summary>
        </member>
        <member name="T:SharpCraft.Block.Wall">
            <summary>
            An object for wall blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.Wall.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new wall block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.Wall.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.Wall.SUp">
            <summary>
            If the block is connected in this direction
            </summary>
        </member>
        <member name="T:SharpCraft.Block.WallTorch">
            <summary>
            An object for wall torch blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Block.WallTorch.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new wall torch block
            </summary>
            <param name="type">The type of block</param>
        </member>
        <member name="M:SharpCraft.Block.WallTorch.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:SharpCraft.Block.WallTorch.SFacing">
            <summary>
            The way the torch is facing. (The way it points)
            </summary>
        </member>
        <member name="T:SharpCraft.BlockDataAttribute">
            <summary>
            An attribute used to mark a block's state properties and data properties
            </summary>
        </member>
        <member name="T:SharpCraft.BlockDataAttribute.DataType">
            <summary>
            The type of data the attribute can be used by
            </summary>
        </member>
        <member name="F:SharpCraft.BlockDataAttribute.DataType.Data">
            <summary>
            It's block data
            </summary>
        </member>
        <member name="F:SharpCraft.BlockDataAttribute.DataType.State">
            <summary>
            It's a block state
            </summary>
        </member>
        <member name="F:SharpCraft.BlockDataAttribute.Type">
            <summary>
            The type of data the attribute is being used by
            </summary>
        </member>
        <member name="F:SharpCraft.BlockDataAttribute.DataName">
            <summary>
            The name of the state the attribute is being used by
            </summary>
        </member>
        <member name="F:SharpCraft.BlockDataAttribute.ForceInt">
            <summary>
            If true converts it to an int instead of a string
            </summary>
        </member>
        <member name="M:SharpCraft.BlockDataAttribute.#ctor">
            <summary>
            Creates an attribute marking a block's data 
            </summary>
        </member>
        <member name="M:SharpCraft.BlockDataAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an attribute marking a block's state
            </summary>
            <param name="stateName">The Minecraft name of the state</param>
            <param name="toInt">If it should convert the state into an int</param>
        </member>
        <member name="T:SharpCraft.CloneBlock`1">
            <summary>
            The base class for a block which data/states can be copied seperatly
            </summary>
            <typeparam name="T">The type of the class inheriting this class</typeparam>
        </member>
        <member name="M:SharpCraft.CloneBlock`1.#ctor(System.Nullable{SharpCraft.ID.Block})">
            <summary>
            Creates a new block which is the given type of block
            </summary>
            <param name="type">The block's ID/Type</param>
        </member>
        <member name="M:SharpCraft.CloneBlock`1.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of blocks into a block object
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:SharpCraft.CloneBlock`1.CloneState">
            <summary>
            Creates a new block with this block's states
            </summary>
            <returns>The new block</returns>
        </member>
        <member name="M:SharpCraft.CloneBlock`1.CloneData">
            <summary>
            Creates a new block with this block's data
            </summary>
            <returns>The new block</returns>
        </member>
        <member name="T:SharpCraft.DataTagAttribute">
            <summary>
            An attribute used to mark data.
            </summary>
        </member>
        <member name="M:SharpCraft.DataTagAttribute.#ctor">
            <summary>
            Creates a new data marking attribute
            </summary>
        </member>
        <member name="M:SharpCraft.DataTagAttribute.Clone``1(``0,``0)">
            <summary>
            Clones all properties with a <see cref="T:SharpCraft.DataTagAttribute"/> from one object to another
            </summary>
            <typeparam name="T">The type of object to clone</typeparam>
            <param name="emptyCopy">An empty object to clone the properties to</param>
            <param name="copy">The object to clone</param>
            <returns></returns>
        </member>
        <member name="T:SharpCraft.Entity">
            <summary>
            List of all entities
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.BaseEntity">
            <summary>
            The base class for all entities
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseEntity.DataString">
            <summary>
            This entity's data without its type
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.BaseEntity.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.BaseEntity.DataWithID">
            <summary>
            This entity's data with the entity's type
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseEntity.EntityType">
            <summary>
            The type of the entity
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.BaseEntity.Clone">
            <summary>
            Creates a clone of this entity
            </summary>
            <returns>The cloned new entity</returns>
        </member>
        <member name="T:SharpCraft.Entity.EntityBasic">
            <summary>
            The basic entity data
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.EntityBasic.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.EntityBasic.Motion">
            <summary>
            The entity's motion
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EntityBasic.Rotation">
            <summary>
            The entity's rotation
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EntityBasic.Coords">
            <summary>
            The entity's location
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EntityBasic.FallDistance">
            <summary>
            The distance the entity has fallen
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EntityBasic.Fire">
            <summary>
            The time before the fire on the entity goes out.
            Negative value means how long it takes for the entity to turn on fire.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EntityBasic.Air">
            <summary>
            How much air the entity has left.
            (Being 0 under water will make the entity drown)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EntityBasic.OnGround">
            <summary>
            If the entity is on the ground or not
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EntityBasic.NoGravity">
            <summary>
            If the entity shouldn't be effected by gravity
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EntityBasic.Dimension">
            <summary>
            The dimension the entity is in
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EntityBasic.Invulnerable">
            <summary>
            If the entity is Invulnerable.
            (Can't be killed)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EntityBasic.PortalCooldown">
            <summary>
            The amount of time before the entity can go through a portal again.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EntityBasic.UUID">
            <summary>
            The entity's UUID
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EntityBasic.CustomName">
            <summary>
            The entity's shown name
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EntityBasic.CustomNameVisible">
            <summary>
            If the entity's name should be shown always
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EntityBasic.Silent">
            <summary>
            If the entity should be silent and not make any sounds
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EntityBasic.Passengers">
            <summary>
            The entities riding on the entity
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EntityBasic.Glowing">
            <summary>
            If the entity should glow
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EntityBasic.Tags">
            <summary>
            The entity's tags
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EntityBasic.BasicDataString">
            <summary>
            Gets the raw basic data for this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.AreaCloud">
            <summary>
            An object for area effect cloud entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.AreaCloud.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new area effect cloud
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.AreaCloud.Duration">
            <summary>
            The amount of time before the cloud disapears after the <see cref="P:SharpCraft.Entity.AreaCloud.WaitTime"/> is over
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.AreaCloud.Color">
            <summary>
            The color of the particles it displays
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.AreaCloud.Age">
            <summary>
            The amount of time the cloud has existed.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.AreaCloud.WaitTime">
            <summary>
            The time before the cloud will show up.
            (Time before the <see cref="P:SharpCraft.Entity.AreaCloud.Radius"/> will be used)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.AreaCloud.ReapplicationDealy">
            <summary>
            The time before the cloud's effect will be given out to the entities inside again.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.AreaCloud.OwnerUUID">
            <summary>
            The UUID of the entity who made the cloud
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.AreaCloud.DurationOnUse">
            <summary>
            The amount of time to remove from the duration every time the cloud gives out its effect
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.AreaCloud.Radius">
            <summary>
            The radius of the cloud
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.AreaCloud.RadiusOnUse">
            <summary>
            The amount of radius to remove every time the cloud gives out its effect
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.AreaCloud.RadiusPerTick">
            <summary>
            The amount of radius to remove each tick.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.AreaCloud.Particle">
            <summary>
            The particle type the cloud displays
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.AreaCloud.Effects">
            <summary>
            The effect the cloud gives
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.AreaCloud.Unspawnable">
            <summary>
            If the cloud shouldn't despawn
            (Sets <see cref="P:SharpCraft.Entity.AreaCloud.Duration"/> to its max value)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.AreaCloud.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Armorstand">
            <summary>
            An object for armor stand entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Armorstand.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new armor stand entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Armorstand.SlotRules">
            <summary>
            Choses which slots are locked
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Armorstand.LockedSlots">
            <summary>
            Used to define what slots on an armor stand are locked
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Armorstand.LockedSlots.LockHand">
            <summary>
            Locks the boots item 100%
            </summary>
            <returns>Itself</returns>
        </member>
        <member name="M:SharpCraft.Entity.Armorstand.LockedSlots.LockBoots">
            <summary>
            Locks the boots item 100%
            </summary>
            <returns>Itself</returns>
        </member>
        <member name="M:SharpCraft.Entity.Armorstand.LockedSlots.LockLeggings">
            <summary>
            Locks the leggings item 100%
            </summary>
            <returns>Itself</returns>
        </member>
        <member name="M:SharpCraft.Entity.Armorstand.LockedSlots.LockChestplate">
            <summary>
            Locks the chestplate item 100%
            </summary>
            <returns>Itself</returns>
        </member>
        <member name="M:SharpCraft.Entity.Armorstand.LockedSlots.LockHelmet">
            <summary>
            Locks the helmet item 100%
            </summary>
            <returns>Itself</returns>
        </member>
        <member name="M:SharpCraft.Entity.Armorstand.LockedSlots.LockAll">
            <summary>
            Locks all slots 100%
            </summary>
            <returns>Itself</returns>
        </member>
        <member name="F:SharpCraft.Entity.Armorstand.LockedSlots.LockRemovingHand">
            <summary>
            Makes it impossible to remove the hand item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entity.Armorstand.LockedSlots.LockRemovingBoots">
            <summary>
            Makes it impossible to remove the boots item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entity.Armorstand.LockedSlots.LockRemovingLeggings">
            <summary>
            Makes it impossible to remove the leggings item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entity.Armorstand.LockedSlots.LockRemovingChestplate">
            <summary>
            Makes it impossible to remove the chestplate item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entity.Armorstand.LockedSlots.LockRemovingHelmet">
            <summary>
            Makes it impossible to remove the helmet item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entity.Armorstand.LockedSlots.LockChangingHand">
            <summary>
            Makes it impossible to change the hand item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entity.Armorstand.LockedSlots.LockChangingBoots">
            <summary>
            Makes it impossible to change the boots item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entity.Armorstand.LockedSlots.LockChangingLeggings">
            <summary>
            Makes it impossible to change the leggings item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entity.Armorstand.LockedSlots.LockChangingChestplate">
            <summary>
            Makes it impossible to change the chestplate item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entity.Armorstand.LockedSlots.LockChangingHelmet">
            <summary>
            Makes it impossible to change the helmet item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entity.Armorstand.LockedSlots.LockAddingHand">
            <summary>
            Makes it impossible to add the hand item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entity.Armorstand.LockedSlots.LockAddingBoots">
            <summary>
            Makes it impossible to add the boots item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entity.Armorstand.LockedSlots.LockAddingLeggings">
            <summary>
            Makes it impossible to add the leggings item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entity.Armorstand.LockedSlots.LockAddingChestplate">
            <summary>
            Makes it impossible to add the chestplate item from the armor stand
            </summary>
        </member>
        <member name="F:SharpCraft.Entity.Armorstand.LockedSlots.LockAddingHelmet">
            <summary>
            Makes it impossible to add the helmet item from the armor stand
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Armorstand.LockedSlots.GetValue">
            <summary>
            Gets the value Minecraft uses to disables slots
            </summary>
            <returns>Raw data used by Minecarft</returns>
        </member>
        <member name="P:SharpCraft.Entity.Armorstand.Marker">
            <summary>
            Makes the armor stand a marker armor stand.
            The armor stand wont have a hitbox.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Armorstand.HandItems">
            <summary>
            The items there is in the armor stand's hands.
            0: main hand. 1: off hand.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Armorstand.ArmorItems">
            <summary>
            The items the armor stand has on
            0: boots. 1: leggings. 2: chestplate. 3: helmet
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Armorstand.Invisible">
            <summary>
            Makes the armor stand invisible
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Armorstand.NoBasePlate">
            <summary>
            Removes the armor stand's stone plate
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Armorstand.FallFlying">
            <summary>
            Makes the armor stand fly when falling if it has an elytra on.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Armorstand.ShowArms">
            <summary>
            If the armor stand should show its arms
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Armorstand.Small">
            <summary>
            If the armor stand is a small armor stand
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Armorstand.BodyRotation">
            <summary>
            Rotates the armor stand's body
            0: x. 1: y. 2: z.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Armorstand.ArmLeftRotation">
            <summary>
            Rotates the armor stand's left arm
            0: x. 1: y. 2: z.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Armorstand.ArmRightRotation">
            <summary>
            Rotates the armor stand's right arm
            0: x. 1: y. 2: z.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Armorstand.LegLeftRotation">
            <summary>
            Rotates the armor stand's left leg
            0: x. 1: y. 2: z.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Armorstand.LegRightRotation">
            <summary>
            Rotates the armor stand's right leg
            0: x. 1: y. 2: z.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Armorstand.HeadRotation">
            <summary>
            Rotates the armor stand's head
            0: x. 1: y. 2: z.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Armorstand.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.EndCrystal">
            <summary>
            An object for end crystal entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.EndCrystal.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new end crystal
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.EndCrystal.ShowBottom">
            <summary>
            If the bedrock should be shown under the crystal
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EndCrystal.BeamTarget">
            <summary>
            The coords the crystal's beam should point to
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EndCrystal.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.DroppedItem">
            <summary>
            An object for item entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.DroppedItem.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new item
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.DroppedItem.Age">
            <summary>
            The age of the item in ticks. When it hits 6000 it despawns
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.DroppedItem.Health">
            <summary>
            The health of the item. despawns when at 0
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.DroppedItem.PickupDelay">
            <summary>
            The delay before the item can be picked up in ticks
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.DroppedItem.Owner">
            <summary>
            The <see cref="T:SharpCraft.UUID"/> of the entity who can pick up the item
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.DroppedItem.Thrower">
            <summary>
            The <see cref="T:SharpCraft.UUID"/> of the entity who threw the item
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.DroppedItem.ItemData">
            <summary>
            The item itself
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.DroppedItem.Unpickable">
            <summary>
            Makes the item unpickable
            (This overwrites <see cref="P:SharpCraft.Entity.DroppedItem.PickupDelay"/>)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.DroppedItem.IgnoreAge">
            <summary>
            Makes the item not despawn
            (This overwrites <see cref="P:SharpCraft.Entity.DroppedItem.Age"/>)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.DroppedItem.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.FallingBlock">
            <summary>
            An object for falling block entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.FallingBlock.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new falling block
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.FallingBlock.Time">
            <summary>
            The time the entity has been falling.
            If this number is 0 the entity will dissapear the next tick
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.FallingBlock.TheBlock">
            <summary>
            The falling block
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.FallingBlock.DropItem">
            <summary>
            If the block should be dropped if the falling block is destroyed
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.FallingBlock.HurtEntities">
            <summary>
            If the block should damage entities it lands on
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.FallingBlock.MaxDamage">
            <summary>
            The maximum amount of damage it can cause
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.FallingBlock.DamageAmount">
            <summary>
            The amount of damage it should cause per block fallen
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.FallingBlock.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.EvokerFangs">
            <summary>
            An object for evoker fangs entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.EvokerFangs.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new evoker fangs
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.EvokerFangs.Warmup">
            <summary>
            The amount of time before the fangs appear
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EvokerFangs.OwnerUUID">
            <summary>
            The <see cref="T:SharpCraft.UUID"/> of the entity who summoned the fangs
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EvokerFangs.Marker">
            <summary>
            Makes the fang into a marker entity
            (Sets <see cref="P:SharpCraft.Entity.EvokerFangs.Warmup"/> to its max value which makes the entity invisible)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.EvokerFangs.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Firework">
            <summary>
            An object for firework entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Firework.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new firework rocket
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Firework.Angled">
            <summary>
            Makes the firework stop flying upwards automatically
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Firework.Life">
            <summary>
            The amount of time the firework has been flying
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Firework.LifeTime">
            <summary>
            The time before the firework blows up
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Firework.Fireworks">
            <summary>
            The firework displayed when the rocket blows up
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Firework.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.ItemPainting">
            <summary>
            An object for item frames and painting entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.ItemPainting.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new item frame or painting entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.ItemPainting.InTile">
            <summary>
            The block the entity is inside
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.ItemPainting.Facing">
            <summary>
            The direction the entity is facing
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.ItemPainting.Painting">
            <summary>
            The type of painting
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.ItemPainting.FrameItem">
            <summary>
            The item in the item frame
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.ItemPainting.FrameDropChance">
            <summary>
            The chance of the frame dropping its item
            (0-1)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.ItemPainting.FrameRotation">
            <summary>
            The rotation of the item in the item frame.
            Rotation = <see cref="P:SharpCraft.Entity.ItemPainting.FrameRotation"/> * 45 degrees clockwise
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.ItemPainting.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
            <returns>raw data Minecraft uses</returns>
        </member>
        <member name="T:SharpCraft.Entity.TNT">
            <summary>
            An object for primed tnt entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.TNT.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates new primed tnt
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.TNT.Fuse">
            <summary>
            The time in ticks before the tnt blows up
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.TNT.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
            <returns>raw data Minecraft uses</returns>
        </member>
        <member name="T:SharpCraft.Entity.XP">
            <summary>
            An object for xp orb entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.XP.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new xp orb
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.XP.Age">
            <summary>
            The age of the item in ticks. When it hits 6000 it despawns
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.XP.Health">
            <summary>
            The health of the item. despawns when at 0
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.XP.Value">
            <summary>
            The amount of xp in the orb
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.XP.IgnoreAge">
            <summary>
            Makes the orb not despawn
            (This overwrites <see cref="P:SharpCraft.Entity.XP.Age"/>)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.XP.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
            <returns>raw data Minecraft uses</returns>
        </member>
        <member name="T:SharpCraft.Entity.BaseBreedable">
            <summary>
            The basic entity data for breedable mobs
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.BaseBreedable.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.BaseBreedable.InLove">
            <summary>
            The amount of time the mob will be in love
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseBreedable.Age">
            <summary>
            When negative it's the time till the mob turns into an adult
            When positive it's the time till the mob can breed again
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseBreedable.ForcedAge">
            <summary>
            A age which will be given to the mob when it has grown up.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseBreedable.LoveCause">
            <summary>
            The <see cref="T:SharpCraft.UUID"/> of the entity who fed the mob
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseBreedable.BreedDataString">
            <summary>
            Gets the raw basic data for breedable mobs
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Breedable">
            <summary>
            Entity data for breedable mobs
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Breedable.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new breedable mob
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Breedable.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.BaseIllager">
            <summary>
            The basic entity data for illagers
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.BaseIllager.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.BaseIllager.HasGoal">
            <summary>
            If the illager has a raid goal
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseIllager.Patrolling">
            <summary>
            If the illager is patrolling
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseIllager.Leader">
            <summary>
            If the illager is the leader
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseIllager.PatrolTarget">
            <summary>
            The place the illager is patrolling to
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseIllager.RaidID">
            <summary>
            The id of the raid the illager is in
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseIllager.Wave">
            <summary>
            the wave number the illager is in
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseIllager.IllagerDataString">
            <summary>
            Gets the raw basic data for illagers
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Illager">
            <summary>
            Entity data for illagers
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Illager.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new illager
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Illager.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.BaseMob">
            <summary>
            The basic entity data for mobs
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.BaseMob.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.Health">
            <summary>
            The amount of health the mob has
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.AbsorptionAmount">
            <summary>
            The amount of extra health the mob has
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.HurtTime">
            <summary>
            Makes the entity turn red for the given time
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.HurtByTimestamp">
            <summary>
            The time since the mob last was hit
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.DeathTime">
            <summary>
            The time the mob has been dead for.
            (0 = alive)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.FallFlying">
            <summary>
            Makes the mob fly when falling if it has an elytra on.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.DeathLootTable">
            <summary>
            The loot table the mob drops on death
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.DeathLootTableSeed">
            <summary>
            The seed to use when dropping the <see cref="P:SharpCraft.Entity.BaseMob.DeathLootTable"/>
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.CanPickUpLoot">
            <summary>
            If the mob can pick up armor and items from the ground
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.NoAI">
            <summary>
            If the mob doesn't have an AI
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.PersistenceRequired">
            <summary>
            If the mob shouldn't despawn
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.LeftHanded">
            <summary>
            If the mob's main hand is its left hand
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.Team">
            <summary>
            The team the mob is on
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.LeashCoords">
            <summary>
            The location the mob is leashed to
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.LeashUUID">
            <summary>
            The <see cref="T:SharpCraft.UUID"/> of the leash
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.HandItems">
            <summary>
            The items there is in the mob's hands.
            0: main hand. 1: off hand.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.ArmorItems">
            <summary>
            The items the mob has on
            0: boots. 1: leggings. 2: chestplate. 3: helmet
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.HandDropChances">
            <summary>
            The chance that the mob will drop its hand items when killed (number between 0-1)
            0: main hand. 1: off hand
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.ArmorDropChances">
            <summary>
            The chance that the mob will drop its armor items when killed (number between 0-1)
            0: boots. 1: leggings. 2: chestplate. 3: helmet
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.ActiveEffects">
            <summary>
            The <see cref="T:SharpCraft.Effect"/>s the mob has
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.Attributes">
            <summary>
            The <see cref="T:SharpCraft.MCAttribute"/>s the mob has
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMob.MobDataString">
            <summary>
            Gets the raw basic data for mobs
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Mob">
            <summary>
            Entity data for mobs
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Mob.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new mob
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Mob.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.BaseTameable">
            <summary>
            The basic entity data for tameable
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.BaseTameable.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.BaseTameable.Sitting">
            <summary>
            If the mob is sitting (wont follow / tp to its owner)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseTameable.OwnerUUID">
            <summary>
            the <see cref="T:SharpCraft.UUID"/> of the owner
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseTameable.TameDataString">
            <summary>
            Gets the raw basic data for tameable mobs
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Tameable">
            <summary>
            Entity data for tameable mobs
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Tameable.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new tameable mob
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Tameable.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Bat">
            <summary>
            Entity data for bats
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Bat.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new bat
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Bat.BatFlags">
            <summary>
            True when flying. False when hanging
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Bat.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Cat">
            <summary>
            Entity data for cats
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Cat.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new cat
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Cat.CatType">
            <summary>
            The cat's skin
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Cat.CollarColor">
            <summary>
            The color of the cat's collar
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Cat.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Chicken">
            <summary>
            Entity data for chickens
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Chicken.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new chicken
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Chicken.IsChickenJockey">
            <summary>
            Makes the chicken despawnable and drop 10 xp
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Chicken.EggLayTime">
            <summary>
            The time till the chicken lays another egg
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Chicken.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Creeper">
            <summary>
            Entity data for creepers
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Creeper.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new creeper
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Creeper.Charged">
            <summary>
            If the creeper is charged (was hit by lightning)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Creeper.ExplosionRadius">
            <summary>
            The size of the explosion caused by the exploded creeper
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Creeper.Fuse">
            <summary>
            The time till the creeper will explode when trying to explode
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Creeper.Ignited">
            <summary>
            If the creeper is ignited and is forced to blow up
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Creeper.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Dolphin">
            <summary>
            Entity data for dolphins
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Dolphin.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new dolphin
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Dolphin.TreasureLocation">
            <summary>
            The location of the treasure the dolphin will lead the player to
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Dolphin.GotFish">
            <summary>
            If the dolphin has gotten any fish from the player
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Dolphin.CanFindTreasure">
            <summary>
            If the dolphin will lead the player to a treasure
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Dolphin.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Dragon">
            <summary>
            Entity data for ender dragons
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Dragon.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new ender dragon
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Dragon.Phase">
            <summary>
            The phase the ender dragon is in
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Dragon.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Enderman">
            <summary>
            Entity data for endermen
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Enderman.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new enderman
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Enderman.Holding">
            <summary>
            The block the enderman is holding.
            Note: block data is not supported
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Enderman.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Endermite">
            <summary>
            Entity data for endermites
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Endermite.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new endermite
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Endermite.LifeTime">
            <summary>
            The time the endermite has existed. When hitting 24000 it despawns
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Endermite.PlayerSpawned">
            <summary>
            If the endermite was spawned by a player. If true endermen will attack it.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Endermite.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Fish">
            <summary>
            Entity data for fishs
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Fish.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new fish
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Fish.FishVariant">
            <summary>
            Fow the tropical fish looks
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Fish.Variant">
            <summary>
            A object used to define how a fish looks
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Fish.Variant.Size">
            <summary>
            The size of the fish
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Fish.Variant.Pattern">
            <summary>
            The fish's pattern
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Fish.Variant.BodyColor">
            <summary>
            The color of the body of the fish
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Fish.Variant.PatternColor">
            <summary>
            The color of the pattern on the fish
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Fish.Variant.GetValue">
            <summary>
            Gets the value Minecraft uses
            </summary>
            <returns>Gets raw data used by Minecraft</returns>
        </member>
        <member name="P:SharpCraft.Entity.Fish.FromBucket">
            <summary>
            If the fish comes from a bucket.
            It wont despawn.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Fish.PuffState">
            <summary>
            The puff state for pufferfish.
            0 = deflated. 1 = halfway puffed-up. 2 = puffed-up.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Fish.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Ghast">
            <summary>
            Entity data for ghasts
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Ghast.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new ghast
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Ghast.ExplosionPower">
            <summary>
            The size of the explosion caused by the ghast's fireballs
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Ghast.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Horse">
            <summary>
            Entity data for horses, llamas, donkeys and mules
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Horse.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new horse, llama, donkeys or mule
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Horse.Bred">
            <summary>
            Makes the mob stay close to other mobs of the same time with this tag being true
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Horse.EatingHayStack">
            <summary>
            Makes the horse graze
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Horse.Temper">
            <summary>
            Makes the horse easier to tame.
            (Goes up when the horse is fed.)
            (A number between 0-100. the higher the easier to tame)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Horse.OwnerUUID">
            <summary>
            The <see cref="T:SharpCraft.UUID"/> of the owner of the horse
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Horse.HorseSaddle">
            <summary>
            The item the horse has as it's saddle
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Horse.HorseArmor">
            <summary>
            The armor the horse has on
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Horse.DonkeyChested">
            <summary>
            If the donkey has a chest
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Horse.DonkeyItems">
            <summary>
            The items inside the donkeys inventory
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Horse.HorseVariant">
            <summary>
            The horse variant
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Horse.Variant">
            <summary>
            A object used to defina a horse variant
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Horse.Variant.Color">
            <summary>
            The color of the horse
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Horse.Variant.Markings">
            <summary>
            The markings
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Horse.Variant.GetValue">
            <summary>
            Gets the value Minecraft uses to define horse variants
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="P:SharpCraft.Entity.Horse.LlamaStrenght">
            <summary>
            How many items the llama can hold
            (1-5. Slots = x * 3)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Horse.LlamaDecorItem">
            <summary>
            The item the llama has on. (Normally carpet)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Horse.SkeletonTrap">
            <summary>
            If the skeleton horse is a trap
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Horse.SkeletonTrapTime">
            <summary>
            The time the skeleton trap has existed. When at 18000 ticks it despawns
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Horse.Tame">
            <summary>
            If the mob is tame
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Horse.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.IllagerBeast">
            <summary>
            Entity data for bats
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.IllagerBeast.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new illager beast
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.IllagerBeast.Attack">
            <summary>
            Cooldown till it can attack again
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.IllagerBeast.Roar">
            <summary>
            Cooldown till it can roar again
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.IllagerBeast.Stun">
            <summary>
            Cooldown till it can stun again
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.IllagerBeast.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.IronGolem">
            <summary>
            Entity data for iron golems
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.IronGolem.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new iron golem
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.IronGolem.PlayerCreated">
            <summary>
            If true the golem wont attack players
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.IronGolem.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.MagicIllager">
            <summary>
            Entity data for evokers and illusioners
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.MagicIllager.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new evoker or illusioner
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.MagicIllager.SpellTicks">
            <summary>
            The time till the next spell is casted
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MagicIllager.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Ocelot">
            <summary>
            Entity data for ocelots
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Ocelot.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new ocelot
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Ocelot.Trust">
            <summary>
            If the ocelot trusts the player
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Ocelot.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Panda">
            <summary>
            Entity data for pandas
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Panda.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new panda
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Panda.MainType">
            <summary>
            The type of the panda
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Panda.HiddenType">
            <summary>
            The panda's hidden type which can be transfered to it's children
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Panda.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Parrot">
            <summary>
            Entity data for parrots
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Parrot.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new parrot
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Parrot.ParrotType">
            <summary>
            How the parrot looks
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Parrot.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Phantom">
            <summary>
            Entity data for phantoms
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Phantom.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new phantom
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Phantom.Area">
            <summary>
            The phantom will circle around this location when not attacking
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Phantom.Size">
            <summary>
            The size of the phantom.
            (0-64) Damage = 6+size
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Phantom.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Pig">
            <summary>
            Entity data for pigs
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Pig.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new pigs
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Pig.Saddle">
            <summary>
            If the pig has a saddle on
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Pig.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Player">
            <summary>
            Entity data for players
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Player.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new player
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Player.Version">
            <summary>
            The ID of the Minecraft version the player is in
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.Gamemode">
            <summary>
            The player's gamemode
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.DeathScore">
            <summary>
            The score displayed on death
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.SelectedSlot">
            <summary>
            The slot the player has selected
            (0-8)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.SelectedItem">
            <summary>
            The item the player has selected
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.Spawn">
            <summary>
            The player's spawnpoint
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.ForceSpawn">
            <summary>
            If the player should spawn at the given <see cref="P:SharpCraft.Entity.Player.Spawn"/> even if there is no bed
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.Sleeping">
            <summary>
            If the player is sleeping
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.SleepTime">
            <summary>
            The amount of time the player has been sleeping
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.Food">
            <summary>
            How much food the player has
            (0-20)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.FoodExhaustion">
            <summary>
            How close a food bar is from dissapearing
            (4=lose one bar)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.FoodSaturation">
            <summary>
            How much saturation the player has
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.FoodTimer">
            <summary>
            When this hits 80 ticks and the player has enough food, they will be healed
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.Level">
            <summary>
            The level the player has
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.XPPogress">
            <summary>
            How far the player is to hit next level
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.Totalxp">
            <summary>
            The total amount of xp the player has picked up since last death
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.EnchantSeed">
            <summary>
            The seed used to determine which enchantments should show up for the player
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.Inventory">
            <summary>
            The player's inventory.
            (Slot 0-8 = hotbar left to right)
            (Slot 9-35 = inventory left top to right bottom)
            (Slot 100 = boots, 101 = leggings, 102 = chestplate, 103 = helmet)
            (Slot -106 = off hand)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.Enderchest">
            <summary>
            The items in the player's enderchest
            (Slot 0-26 = left top to right bottom slots)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.Riding">
            <summary>
            The entity the player is riding
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.ShoulderEntityLeft">
            <summary>
            The entity on the player's left shoulder
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.ShoulderEntityRight">
            <summary>
            The entity on the player's right shoulder
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.SeenCredits">
            <summary>
            True if the player has seen the end to overworld credits
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.RecipeBookFiltered">
            <summary>
            True if the player only sees the recipes they have unlocked
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.RecipeBookOpen">
            <summary>
            True if the player has the book open
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.UnlockedRecipes">
            <summary>
            A list of recipes the player has unlocked
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.NotSeenRecipes">
            <summary>
            A list of recipes the player has unlocked, but still haven't seen in the crafting table.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Player.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Rabbit">
            <summary>
            Entity data for rabbits
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Rabbit.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new rabbit
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Rabbit.RabbitType">
            <summary>
            The type of rabbit
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Rabbit.MoreCarrotTicks">
            <summary>
            Set to 40 when the rabbit has eaten a carrot.
            Goes down by 0-2 every tick.
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Rabbit.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Sheep">
            <summary>
            Entity data for sheeps
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Sheep.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new sheep
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Sheep.Color">
            <summary>
            The sheep's color
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Sheep.Sheared">
            <summary>
            If the sheep is sheared
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Sheep.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Shulker">
            <summary>
            Entity data for shulker
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Shulker.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new shulker
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Shulker.PlacedOn">
            <summary>
            The direction of the block the shulker is placed on
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Shulker.Color">
            <summary>
            The shulker's color.
            Setting this to (ID.Color)16 makes it the normal shulker color
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Shulker.Peek">
            <summary>
            The height of the shulker peek
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Shulker.ApproxCoords">
            <summary>
            The approximate location of the shulker
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Shulker.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Slime">
            <summary>
            Entity data for slimes and magma cubes
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Slime.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new slime or magma cube
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Slime.Size">
            <summary>
            The size of the slime
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Slime.WasOnGround">
            <summary>
            True if the slime touches the ground
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Slime.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Snowman">
            <summary>
            Entity data for snowmen
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Snowman.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new snowman
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Snowman.Pumpkin">
            <summary>
            True if the snowman has a pumpkin on
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Snowman.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Turtle">
            <summary>
            Entity data for turtles
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Turtle.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new turtle
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Turtle.HomePos">
            <summary>
            The location of the turtles home
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Turtle.TravelPos">
            <summary>
            The location the turtle is traveling to
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Turtle.HasEgg">
            <summary>
            True if the turtle has eggs
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Turtle.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Vex">
            <summary>
            Entity data for vexes
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Vex.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new vex
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Vex.LifeTicks">
            <summary>
            The time till the vex dissapears
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Vex.Bound">
            <summary>
            The location the vex should fly around in
            (It flies to random location in a 15x11x15 around this spot)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Vex.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Villager">
            <summary>
            Entity data for villagers
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Villager.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new villager
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Villager.Riches">
            <summary>
            The amount of emeralds given to the villager
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Villager.VillagerType">
            <summary>
            The type of villager
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Villager.CareerLevel">
            <summary>
            The current level of trading.
            (This number is used to chose what trades are open / are going to open next)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Villager.Willing">
            <summary>
            If the villager is willing to mate
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Villager.Inventory">
            <summary>
            The villager's inventory
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Villager.Trades">
            <summary>
            The trades the villager has
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Villager.Trade">
            <summary>
            An object used to define trades
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Villager.Trade.RewardExp">
            <summary>
            True if the villager gives xp when traded with
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Villager.Trade.MaxUses">
            <summary>
            The maximum number of times the trade can be traded before closing
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Villager.Trade.Uses">
            <summary>
            The amount of times the trade has been used
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Villager.Trade.BuyItem1">
            <summary>
            The first item the villager is buying in this trade
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Villager.Trade.BuyItem2">
            <summary>
            The second item the villager is buying in this trade
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Villager.Trade.SellItem">
            <summary>
            The item the villager is selling in this trade
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Villager.Trade.ToString">
            <summary>
            Gets the raw data from this trade
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="P:SharpCraft.Entity.Villager.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Vindicator">
            <summary>
            Entity data for vindicators
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Vindicator.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new vindicator
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Vindicator.Johnny">
            <summary>
            If the vindicator is a Johnny vindicator (attacks everything)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Vindicator.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Wither">
            <summary>
            Entity data for withers
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Wither.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new wither
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Wither.Invul">
            <summary>
            The time before the wither actually spawns / can be fought
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Wither.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Wolf">
            <summary>
            Entity data for wolves
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Wolf.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new wolf
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Wolf.Color">
            <summary>
            The color of the wolf's collar
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Wolf.Angry">
            <summary>
            If the wolf is angry
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Wolf.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Zombie">
            <summary>
            Entity data for zombie (-pigmen and -villagers) and drowneds
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Zombie.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new zombie -pigman or -villager or drowned
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Zombie.IsBaby">
            <summary>
            If its a baby
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Zombie.CanBreakDoors">
            <summary>
            If it can break doors
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Zombie.PigmanHurtUUID">
            <summary>
            The <see cref="T:SharpCraft.UUID"/> of the entity the pigman is angry on
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Zombie.PigmanAnger">
            <summary>
            The time till the pigman stops being angry
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Zombie.VillagerConvertUUID">
            <summary>
            The <see cref="T:SharpCraft.UUID"/> of the entity converting the villager
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Zombie.VillagerConvertionTime">
            <summary>
            Time till it will be converted into a villager
            (-1 = not converting)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Zombie.VillagerProfession">
            <summary>
            The type of villager
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Zombie.ConvertionTime">
            <summary>
            The time it will take for the zombie to convert
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Zombie.WaterTime">
            <summary>
            The time the zombie has been in water
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Zombie.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Arrow">
            <summary>
            Entity data for arrows
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Arrow.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new arrow
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Arrow.Shake">
            <summary>
            The arrow shaking when hitting a block
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Arrow.Pickupable">
            <summary>
            Rules for picking up the arrow
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Arrow.PlayerShot">
            <summary>
            If the arrow is shot by a player
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Arrow.Life">
            <summary>
            When it hits 1200 ticks while not moving the arrow despawns
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Arrow.Damage">
            <summary>
            The amount of damage dealt by the arrow
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Arrow.InGround">
            <summary>
            If the arrow is in the ground
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Arrow.Crit">
            <summary>
            If the deals critical damage
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Arrow.Color">
            <summary>
            The color of the arrow
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Arrow.CustomPotionEffects">
            <summary>
            The effects given by the arrow
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Arrow.CustomPotionColor">
            <summary>
            The color of the arrow's particles
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Arrow.SpectralDuration">
            <summary>
            The amount of duration of the glowing effect given by the spectral arrow
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Arrow.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.BaseProjectile">
            <summary>
            The base of all projectile entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.BaseProjectile.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.BaseProjectile.TileCoords">
            <summary>
            The coords of the block
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseProjectile.InBlock">
            <summary>
            The block this projectile is in
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseProjectile.ProjectileDataString">
            <summary>
            Gets the raw data from this entity
            </summary>
            <returns>raw data Minecraft uses</returns>
        </member>
        <member name="T:SharpCraft.Entity.MobProjectile">
            <summary>
            Entity data for <see cref="F:SharpCraft.ID.Entity.dragon_fireball"/>s, <see cref="F:SharpCraft.ID.Entity.fireball"/>s, <see cref="F:SharpCraft.ID.Entity.small_fireball"/> and <see cref="F:SharpCraft.ID.Entity.wither_skull"/>s
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.MobProjectile.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new <see cref="F:SharpCraft.ID.Entity.dragon_fireball"/>, <see cref="F:SharpCraft.ID.Entity.fireball"/>, <see cref="F:SharpCraft.ID.Entity.small_fireball"/> or <see cref="F:SharpCraft.ID.Entity.wither_skull"/>
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.MobProjectile.Direction">
            <summary>
            The direction the projectile flies in
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MobProjectile.Life">
            <summary>
            The amount of time the projectile hasnt been moving
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MobProjectile.Power">
            <summary>
            The direction the projectile flies in nonestop
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MobProjectile.GhastExplosionPower">
            <summary>
            The power of the explosion caused by the ghast ball
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MobProjectile.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.ShulkerBullet">
            <summary>
            An object for shulker bullets
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.ShulkerBullet.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new shulker bullet
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.ShulkerBullet.Owner">
            <summary>
            The owner of the bullet
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.ShulkerBullet.OwnerCoords">
            <summary>
            The owner's location
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.ShulkerBullet.Target">
            <summary>
            The bullet's target
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.ShulkerBullet.TargetCoords">
            <summary>
            The target's location
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.ShulkerBullet.Steps">
            <summary>
            The amount of steps it takes to get to the target
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.ShulkerBullet.OffsetTarget">
            <summary>
            The offset distance from the bullet to the target
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.ShulkerBullet.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.LlamaSpit">
            <summary>
            An object for llama spit entities
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.LlamaSpit.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates new llama spit
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.LlamaSpit.OwnerUUID">
            <summary>
            The owner of the spit
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.LlamaSpit.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Throwable">
            <summary>
            Entity data for <see cref="F:SharpCraft.ID.Entity.egg"/>s, <see cref="F:SharpCraft.ID.Entity.ender_pearl"/>s, <see cref="F:SharpCraft.ID.Entity.experience_bottle"/>s, <see cref="F:SharpCraft.ID.Entity.potion"/>s and <see cref="F:SharpCraft.ID.Entity.snowball"/>s
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Throwable.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new <see cref="F:SharpCraft.ID.Entity.egg"/>, <see cref="F:SharpCraft.ID.Entity.ender_pearl"/>, <see cref="F:SharpCraft.ID.Entity.experience_bottle"/>, <see cref="F:SharpCraft.ID.Entity.potion"/> or <see cref="F:SharpCraft.ID.Entity.snowball"/>
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Throwable.Shake">
            <summary>
            The entity shaking when hitting a block
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Throwable.Owner">
            <summary>
            The owner of the projectile
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Throwable.Potion">
            <summary>
            The type of thrown potion
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Throwable.DisplayItem">
            <summary>
            The item the entity is displayed as
            (Potions do not support use this)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Throwable.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.BaseMinecart">
            <summary>
            The basic entity data for minecarts
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.BaseMinecart.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new entity
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.BaseMinecart.CustomDisplayTile">
            <summary>
            If <see cref="P:SharpCraft.Entity.BaseMinecart.DisplayBlock"/> should be displayed
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMinecart.DisplayBlock">
            <summary>
            The block to display
            Note: block data is not supported
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMinecart.DisplayOffset">
            <summary>
            The y-offset the block is displayed with
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.BaseMinecart.MinecartDataString">
            <summary>
            Gets the raw basic data for minecarts
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Minecart">
            <summary>
            Entity data for minecarts
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Minecart.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new minecart
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Minecart.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.Boat">
            <summary>
            Entity data for boats
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.Boat.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new boat
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.Boat.Type">
            <summary>
            The type of boat
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.Boat.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.MinecartChest">
            <summary>
            Entity data for chest minecarts
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.MinecartChest.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new chest minecart
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.MinecartChest.LootTable">
            <summary>
            The chest's loottable
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartChest.LootTableSeed">
            <summary>
            The seed used to generate the loot
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartChest.Items">
            <summary>
            The items in the chest
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartChest.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.MinecartCommand">
            <summary>
            Entity data for command block minecarts
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.MinecartCommand.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new command block minecart
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.MinecartCommand.Command">
            <summary>
            The command to run
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartCommand.LastOutput">
            <summary>
            The command's text output
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartCommand.SuccessCount">
            <summary>
            The command's output
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartCommand.TrackOutput">
            <summary>
            Makes it so last output will be stored in <see cref="P:SharpCraft.Entity.MinecartCommand.LastOutput"/>
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartCommand.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.MinecartFurnace">
            <summary>
            Entity data for furnace minecarts
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.MinecartFurnace.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new furnace minecart
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.MinecartFurnace.PushX">
            <summary>
            Force along the x axis
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartFurnace.PushZ">
            <summary>
            Force along the y axis
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartFurnace.Fuel">
            <summary>
            The time till the furnace's fuel runs out
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartFurnace.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.MinecartHopper">
            <summary>
            Entity data for hopper minecarts
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.MinecartHopper.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new hopper minecart
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.MinecartHopper.LootTable">
            <summary>
            The hopper's loottable
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartHopper.LootTableSeed">
            <summary>
            The seed used to generate the loot
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartHopper.Items">
            <summary>
            The items in the hopper
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartHopper.Enabled">
            <summary>
            If the hopper is enabled
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartHopper.TransferCooldown">
            <summary>
            Time until it transfer another item
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartHopper.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.MinecartSpawner">
            <summary>
            Entity data for spawner minecarts
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.MinecartSpawner.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new spawner minecart
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.MinecartSpawner.Potentials">
            <summary>
            The entities the spawner can spawn
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartSpawner.SpawnCount">
            <summary>
            How many entities to try to spawn every time
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartSpawner.SpawnRange">
            <summary>
            The range to spawn the entities in
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartSpawner.Delay">
            <summary>
            Time till the next spawn
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartSpawner.RandomDelay">
            <summary>
            The amount of ticks to randomly add to the next spawn
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartSpawner.MaxEntities">
            <summary>
            The maximum amount of entities there can be around the spawner for it to spawn
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartSpawner.PlayerRange">
            <summary>
            The range the player has to be in for the spawner to start spawning
            (<see cref="P:SharpCraft.Entity.MinecartSpawner.MaxEntities"/> has to be set for this to work)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartSpawner.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Entity.MinecartTNT">
            <summary>
            Entity data for tnt minecarts
            </summary>
        </member>
        <member name="M:SharpCraft.Entity.MinecartTNT.#ctor(System.Nullable{SharpCraft.ID.Entity})">
            <summary>
            Creates a new tnt minecart
            </summary>
            <param name="type">the type of entity</param>
        </member>
        <member name="P:SharpCraft.Entity.MinecartTNT.TNTFuse">
            <summary>
            Time till it explodes
            (-1 ticks = not exploding)
            </summary>
        </member>
        <member name="P:SharpCraft.Entity.MinecartTNT.DataString">
            <summary>
            Gets the raw data from this entity
            </summary>
        </member>
        <member name="T:SharpCraft.Item">
            <summary>
            A object defining a Minecraft item
            </summary>
        </member>
        <member name="T:SharpCraft.Item.Book">
            <summary>
            An object for book items
            </summary>
        </member>
        <member name="M:SharpCraft.Item.Book.#ctor">
            <summary>
            Creates an item without an id or anything but which can have data
            This is used to test for item with data
            </summary>
        </member>
        <member name="M:SharpCraft.Item.Book.#ctor(System.Nullable{SharpCraft.ID.Item},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new item
            </summary>
            <param name="ItemID">The type of the item. If null the item has no type</param>
            <param name="Count">The amount of the item. If null the item has no amount</param>
            <param name="Slot">The slot the item is in. If null the item isn't in a slot</param>
        </member>
        <member name="M:SharpCraft.Item.Book.#ctor(SharpCraft.Group)">
            <summary>
            Creates an item object which refereces to an item group
            </summary>
            <param name="ItemGroup">The item group to refere to</param>
        </member>
        <member name="P:SharpCraft.Item.Book.Generation">
            <summary>
            The generation of the book.
            (How much it has been copied)
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Book.Author">
            <summary>
            The auther of the book
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Book.Title">
            <summary>
            The book's title
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Book.Pages">
            <summary>
            The book's pages.
            Each index in the first array means a new page.
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Book.UnlockRecipes">
            <summary>
            The recipes unlocked when right clicking a recipe book
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Book.StoredEnchants">
            <summary>
            The stored enchantments the item has. These enchants does not effect anything. but can be extracted from the book with an anvil.
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Book.TagDataString">
            <summary>
            The items raw data
            (The data inside the item tag)
            </summary>
        </member>
        <member name="T:SharpCraft.Item.Firework">
            <summary>
            An object for firework items
            </summary>
        </member>
        <member name="M:SharpCraft.Item.Firework.#ctor">
            <summary>
            Creates an item without an id or anything but which can have data
            This is used to test for item with data
            </summary>
        </member>
        <member name="M:SharpCraft.Item.Firework.#ctor(System.Nullable{SharpCraft.ID.Item},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new item
            </summary>
            <param name="ItemID">The type of the item. If null the item has no type</param>
            <param name="Count">The amount of the item. If null the item has no amount</param>
            <param name="Slot">The slot the item is in. If null the item isn't in a slot</param>
        </member>
        <member name="M:SharpCraft.Item.Firework.#ctor(SharpCraft.Group)">
            <summary>
            Creates an item object which refereces to an item group
            </summary>
            <param name="ItemGroup">The item group to refere to</param>
        </member>
        <member name="P:SharpCraft.Item.Firework.FireworkStar">
            <summary>
            The data for a single firework star item
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Firework.FireworkRocket">
            <summary>
            The data for a firework rocket
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Firework.RocketFlight">
            <summary>
            How many seconds the rocket will fly for
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Firework.TagDataString">
            <summary>
            The items raw data
            (The data inside the item tag)
            </summary>
        </member>
        <member name="T:SharpCraft.Item.Map">
            <summary>
            An object for map items
            </summary>
        </member>
        <member name="M:SharpCraft.Item.Map.#ctor">
            <summary>
            Creates an item without an id or anything but which can have data
            This is used to test for item with data
            </summary>
        </member>
        <member name="M:SharpCraft.Item.Map.#ctor(System.Nullable{SharpCraft.ID.Item},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new item
            </summary>
            <param name="ItemID">The type of the item. If null the item has no type</param>
            <param name="Count">The amount of the item. If null the item has no amount</param>
            <param name="Slot">The slot the item is in. If null the item isn't in a slot</param>
        </member>
        <member name="M:SharpCraft.Item.Map.#ctor(SharpCraft.Group)">
            <summary>
            Creates an item object which refereces to an item group
            </summary>
            <param name="ItemGroup">The item group to refere to</param>
        </member>
        <member name="T:SharpCraft.Item.Map.Icon">
            <summary>
            A class used to define map icons
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Map.Icon.ID">
            <summary>
            A random name for the marker
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Map.Icon.MarkerType">
            <summary>
            The type of marker symbol
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Map.Icon.X">
            <summary>
            The location to show it at.
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Map.Icon.Y">
            <summary>
            Tge location to show it at.
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Map.Icon.Rotation">
            <summary>
            The icon's rotation
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Map.Icon.IconString">
            <summary>
            The raw data used by the game to make icons on maps
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Map.MapID">
            <summary>
            The map's ID
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Map.Icons">
            <summary>
            The icons displayed on the map.
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Map.TagDataString">
            <summary>
            The items raw data
            (The data inside the item tag)
            </summary>
        </member>
        <member name="T:SharpCraft.Item.Potion">
            <summary>
            The data for potions
            </summary>
        </member>
        <member name="M:SharpCraft.Item.Potion.#ctor">
            <summary>
            Creates an item without an id or anything but which can have data
            This is used to test for item with data
            </summary>
        </member>
        <member name="M:SharpCraft.Item.Potion.#ctor(System.Nullable{SharpCraft.ID.Item},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new item
            </summary>
            <param name="ItemID">The type of the item. If null the item has no type</param>
            <param name="Count">The amount of the item. If null the item has no amount</param>
            <param name="Slot">The slot the item is in. If null the item isn't in a slot</param>
        </member>
        <member name="M:SharpCraft.Item.Potion.#ctor(SharpCraft.Group)">
            <summary>
            Creates an item object which refereces to an item group
            </summary>
            <param name="ItemGroup">The item group to refere to</param>
        </member>
        <member name="P:SharpCraft.Item.Potion.PotionEffects">
            <summary>
            The effects given by the potion
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Potion.PotionColor">
            <summary>
            The color of the potion
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Potion.PotionType">
            <summary>
            The effect given by the potion using minecraft values.
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Potion.TagDataString">
            <summary>
            The items raw data
            (The data inside the item tag)
            </summary>
        </member>
        <member name="M:SharpCraft.Item.#ctor">
            <summary>
            Creates an item without an id or anything but which can have data
            This is used to test for item with data
            </summary>
        </member>
        <member name="M:SharpCraft.Item.#ctor(System.Nullable{SharpCraft.ID.Item},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new item
            </summary>
            <param name="itemID">The type of the item. If null the item has no type</param>
            <param name="count">The amount of the item. If null the item has no amount</param>
            <param name="slot">The slot the item is in. If null the item isn't in a slot</param>
        </member>
        <member name="M:SharpCraft.Item.#ctor(SharpCraft.Group)">
            <summary>
            Creates an item object which refereces to an item group
            </summary>
            <param name="ItemGroup">The item group to refere to</param>
        </member>
        <member name="F:SharpCraft.Item.Group">
            <summary>
            The name of the item group
            </summary>
        </member>
        <member name="F:SharpCraft.Item.Count">
            <summary>
            The count of this item.
            If null the item doesnt have a count
            </summary>
        </member>
        <member name="F:SharpCraft.Item.Slot">
            <summary>
            The slot this item is in
            If null the item isnt in a slot
            </summary>
        </member>
        <member name="F:SharpCraft.Item.ID">
            <summary>
            The item type
            If null the item isnt any item type
            </summary>
        </member>
        <member name="T:SharpCraft.Item.Enchantment">
            <summary>
            An object used to define item enchantments
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Enchantment.ID">
            <summary>
            The type of the enchantment
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Enchantment.LVL">
            <summary>
            The level of the enchantment
            </summary>
        </member>
        <member name="M:SharpCraft.Item.Enchantment.#ctor(System.Nullable{SharpCraft.ID.Enchant},System.Nullable{System.Int32})">
            <summary>
            Creates a new enchantment
            </summary>
            <param name="ID">The enchantment type</param>
            <param name="Level">The enchantment level</param>
        </member>
        <member name="P:SharpCraft.Item.Enchantment.EnchantDataString">
            <summary>
            Outputs the raw data used by the game
            </summary>
        </member>
        <member name="T:SharpCraft.Item.HideFlags">
            <summary>
            An object used to define what flags on an item are hidden
            </summary>
        </member>
        <member name="P:SharpCraft.Item.HideFlags.Enchants">
            <summary>
            If enchantments should be hidden
            </summary>
        </member>
        <member name="P:SharpCraft.Item.HideFlags.Attributes">
            <summary>
            If attributes should be hidden
            </summary>
        </member>
        <member name="P:SharpCraft.Item.HideFlags.Unbreakable">
            <summary>
            If it should be hidden its unbreakabel
            </summary>
        </member>
        <member name="P:SharpCraft.Item.HideFlags.CanDestroy">
            <summary>
            If the blocks it can destroy should be hidden
            </summary>
        </member>
        <member name="P:SharpCraft.Item.HideFlags.CanPlaceOn">
            <summary>
            If the blocks it can place on should be hidden
            </summary>
        </member>
        <member name="P:SharpCraft.Item.HideFlags.NormalLore">
            <summary>
            If the lore should be hidden
            </summary>
        </member>
        <member name="P:SharpCraft.Item.HideFlags.HideFlagsNumber">
            <summary>
            Gets the raw data used by the game to hide flags
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Unbreakable">
            <summary>
            Makes the item unbreakable
            </summary>
        </member>
        <member name="P:SharpCraft.Item.CanDestroy">
            <summary>
            A list of blocks the item can destroy in adventure mode
            </summary>
        </member>
        <member name="P:SharpCraft.Item.CanPlaceOn">
            <summary>
            A list of blocks the item can be placed on in adventure mode
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Damage">
            <summary>
            How much damage the item has taken
            </summary>
        </member>
        <member name="P:SharpCraft.Item.BlockEntityTag">
            <summary>
            The data the block will have when the item is placed
            </summary>
        </member>
        <member name="P:SharpCraft.Item.EntityTag">
            <summary>
            The data the entity will have when the item is placed
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Enchants">
            <summary>
            The enchants the item has on
            </summary>
        </member>
        <member name="P:SharpCraft.Item.RepairCost">
            <summary>
            Number of levels to add to the base levels when using an anvil
            </summary>
        </member>
        <member name="P:SharpCraft.Item.LeatherColor">
            <summary>
            The color of the leather armor
            </summary>
        </member>
        <member name="P:SharpCraft.Item.MapColor">
            <summary>
            The color the map item has.
            (The small black text like things on the paper)
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Name">
            <summary>
            The item's shown name
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Lore">
            <summary>
            The item's lore.
            Each index in the first array means a new line.
            </summary>
        </member>
        <member name="P:SharpCraft.Item.HiddenFlags">
            <summary>
            The things to hide on the item.
            </summary>
        </member>
        <member name="P:SharpCraft.Item.Attributes">
            <summary>
            The attributes the item has
            </summary>
        </member>
        <member name="P:SharpCraft.Item.FakeTag">
            <summary>
            A fake tag. A place to write directly in the item's data.
            </summary>
        </member>
        <member name="P:SharpCraft.Item.CustomModelData">
            <summary>
            The item's model ID
            </summary>
        </member>
        <member name="P:SharpCraft.Item.DataString">
            <summary>
            The item's raw data containing its slot, count and id
            Used for item objects in other objects
            </summary>
        </member>
        <member name="P:SharpCraft.Item.TagDataString">
            <summary>
            The items raw data
            (The data inside the item tag)
            </summary>
        </member>
        <member name="P:SharpCraft.Item.IDDataString">
            <summary>
            The items raw data with id at the start
            Used for give item commands
            </summary>
        </member>
        <member name="M:SharpCraft.Item.Clone">
            <summary>
            Creates a clone of this item
            </summary>
            <returns>The cloned new item</returns>
        </member>
        <member name="M:SharpCraft.Item.op_Implicit(SharpCraft.ID.Item)~SharpCraft.Item">
            <summary>
            Converts an item id into a simple item
            </summary>
            <param name="item">The item id to convert</param>
        </member>
        <member name="T:SharpCraft.JSONObjects">
            <summary>
            <see cref="T:System.Object"/>s used in <see cref="T:SharpCraft.Loottable"/>s and <see cref="T:SharpCraft.Advancement"/>s
            </summary>
        </member>
        <member name="T:SharpCraft.JSONObjects.Block">
            <summary>
            a <see cref="T:System.Object"/> defining a <see cref="T:SharpCraft.Block"/>
            </summary>
        </member>
        <member name="M:SharpCraft.JSONObjects.Block.#ctor(SharpCraft.Block)">
            <summary>
            The block to test for
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Block.TheBlock">
            <summary>
            The block to test for
            </summary>
        </member>
        <member name="M:SharpCraft.JSONObjects.Block.ToString">
            <summary>
            Outputs this <see cref="T:SharpCraft.JSONObjects.Block"/> data in string format
            </summary>
            <returns>this <see cref="T:SharpCraft.JSONObjects.Block"/>'s data</returns>
        </member>
        <member name="M:SharpCraft.JSONObjects.Block.op_Implicit(SharpCraft.Block)~SharpCraft.JSONObjects.Block">
            <summary>
            Converts a normal block into a json block.
            </summary>
            <param name="block">The block to convert</param>
        </member>
        <member name="M:SharpCraft.JSONObjects.Block.op_Implicit(SharpCraft.JSONObjects.Block)~SharpCraft.Block">
            <summary>
            Converts a json block into a normal block
            </summary>
            <param name="block">The json blockto convert</param>
        </member>
        <member name="T:SharpCraft.JSONObjects.Damage">
            <summary>
            a <see cref="T:System.Object"/> defining damage
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Damage.Dealt">
            <summary>
            The amount of damage actually dealt
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Damage.Taken">
            <summary>
            The amount of damage taken
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Damage.Blocked">
            <summary>
            if the damage was blocked or not
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Damage.Type">
            <summary>
            the type of damage
            </summary>
        </member>
        <member name="M:SharpCraft.JSONObjects.Damage.ToString">
            <summary>
            Outputs this <see cref="T:SharpCraft.JSONObjects.Damage"/> data in string format
            </summary>
            <returns>this <see cref="T:SharpCraft.JSONObjects.Damage"/>'s data</returns>
        </member>
        <member name="T:SharpCraft.JSONObjects.DamageFlags">
            <summary>
            a <see cref="T:System.Object"/> defining damage flags
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.DamageFlags.ByPassArmor">
            <summary>
            if the damage by-passes armor or not
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.DamageFlags.Unblockable">
            <summary>
            if the damage can be blocked or not
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.DamageFlags.Starvation">
            <summary>
            if the damage is starvation damage or not
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.DamageFlags.Explosion">
            <summary>
            if the damage is explosion damage or not
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.DamageFlags.Fire">
            <summary>
            if the damage if fire damage or not
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.DamageFlags.Magic">
            <summary>
            if the damage is magic damage or not
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.DamageFlags.Projectile">
            <summary>
            if its a projectile or not
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.DamageFlags.Lightning">
            <summary>
            if its lightning or not
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.DamageFlags.DamagingEntity">
            <summary>
            the <see cref="T:SharpCraft.JSONObjects.Entity"/> doing damage
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.DamageFlags.SourceEntity">
            <summary>
            the <see cref="T:SharpCraft.JSONObjects.Entity"/> which made the damage happen
            </summary>
        </member>
        <member name="M:SharpCraft.JSONObjects.DamageFlags.ToString">
            <summary>
            Outputs this <see cref="T:SharpCraft.JSONObjects.DamageFlags"/> data in string format
            </summary>
            <returns>this <see cref="T:SharpCraft.JSONObjects.DamageFlags"/>'s data</returns>
        </member>
        <member name="T:SharpCraft.JSONObjects.Distance">
            <summary>
            A <see cref="T:System.Object"/> defining a distance
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Distance.Absolute">
            <summary>
            The total distance between two things
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Distance.Horizontal">
            <summary>
            the total horizontal distance between two things
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Distance.X">
            <summary>
            the x amount of distance between two things
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Distance.Y">
            <summary>
            the y amount of distance between two things
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Distance.Z">
            <summary>
            the z amount of distance between two things
            </summary>
        </member>
        <member name="M:SharpCraft.JSONObjects.Distance.ToString">
            <summary>
            Outputs this <see cref="T:SharpCraft.JSONObjects.Distance"/> data in string format
            </summary>
            <returns>this <see cref="T:SharpCraft.JSONObjects.Distance"/>'s data</returns>
        </member>
        <member name="T:SharpCraft.JSONObjects.Effect">
            <summary>
            a <see cref="T:System.Object"/> defining an effect
            </summary>
        </member>
        <member name="M:SharpCraft.JSONObjects.Effect.#ctor(SharpCraft.ID.Effect)">
            <summary>
            creates a new <see cref="T:SharpCraft.JSONObjects.Effect"/>
            </summary>
            <param name="Effect">the effect to look for</param>
        </member>
        <member name="F:SharpCraft.JSONObjects.Effect.Amplifier">
            <summary>
            the <see cref="T:SharpCraft.JSONObjects.Effect"/>'s amplifer
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Effect.Duration">
            <summary>
            the <see cref="T:SharpCraft.JSONObjects.Effect"/>'s duration
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Effect.Ambient">
            <summary>
            if <see cref="T:SharpCraft.JSONObjects.Effect"/> is ambient or not
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Effect.Visible">
            <summary>
            if <see cref="T:SharpCraft.JSONObjects.Effect"/>'s particles are visible or not
            </summary>
        </member>
        <member name="M:SharpCraft.JSONObjects.Effect.ToString">
            <summary>
            Outputs this <see cref="T:SharpCraft.JSONObjects.Effect"/> data in string format
            </summary>
            <returns>this <see cref="T:SharpCraft.JSONObjects.Effect"/>'s data</returns>
        </member>
        <member name="T:SharpCraft.JSONObjects.Entity">
            <summary>
            a <see cref="T:System.Object"/> defining an <see cref="T:SharpCraft.Entity"/>
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Entity.Type">
            <summary>
            The <see cref="T:SharpCraft.Entity"/> type
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Entity.Distance">
            <summary>
            the <see cref="F:SharpCraft.JSONObjects.Entity.Distance"/> to the <see cref="T:SharpCraft.Entity"/>
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Entity.Location">
            <summary>
            the <see cref="F:SharpCraft.JSONObjects.Entity.Location"/> of the <see cref="T:SharpCraft.Entity"/>
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Entity.Effects">
            <summary>
            the <see cref="T:SharpCraft.JSONObjects.Effect"/>s the <see cref="T:SharpCraft.Entity"/> has
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Entity.NBT">
            <summary>
            the nbt the <see cref="T:SharpCraft.Entity"/> has
            </summary>
        </member>
        <member name="M:SharpCraft.JSONObjects.Entity.ToString">
            <summary>
            Outputs this <see cref="T:SharpCraft.JSONObjects.Entity"/> data in string format
            </summary>
            <returns>this <see cref="T:SharpCraft.JSONObjects.Entity"/>'s data</returns>
        </member>
        <member name="T:SharpCraft.JSONObjects.Item">
            <summary>
            a <see cref="T:System.Object"/> defining an <see cref="T:SharpCraft.Item"/>
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Item.Id">
            <summary>
            the <see cref="T:SharpCraft.Item"/>'s id
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Item.Durability">
            <summary>
            the <see cref="T:SharpCraft.Item"/>'s durability
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Item.Count">
            <summary>
            the <see cref="T:SharpCraft.Item"/>'s count
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Item.Potion">
            <summary>
            the <see cref="T:SharpCraft.Item"/>'s potion
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Item.Enchantments">
            <summary>
            the <see cref="T:SharpCraft.Item"/>'s <see cref="T:SharpCraft.JSONObjects.Item.Enchantment"/>s
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Item.NBT">
            <summary>
            the <see cref="T:SharpCraft.Item"/>'s nbt data
            </summary>
        </member>
        <member name="T:SharpCraft.JSONObjects.Item.Enchantment">
            <summary>
            a <see cref="T:System.Object"/> defining an enchantment
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Item.Enchantment.Enchant">
            <summary>
            the enchantment id
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Item.Enchantment.Level">
            <summary>
            the level of the enchantment
            </summary>
        </member>
        <member name="M:SharpCraft.JSONObjects.Item.Enchantment.ToString">
            <summary>
            Outputs this <see cref="T:SharpCraft.JSONObjects.Item.Enchantment"/> data in string format
            </summary>
            <returns>this <see cref="T:SharpCraft.JSONObjects.Item.Enchantment"/>'s data</returns>
        </member>
        <member name="M:SharpCraft.JSONObjects.Item.ToString">
            <summary>
            Outputs this <see cref="T:SharpCraft.JSONObjects.Item"/> data in string format
            </summary>
            <returns>this <see cref="T:SharpCraft.JSONObjects.Item"/>'s data</returns>
        </member>
        <member name="M:SharpCraft.JSONObjects.Item.op_Implicit(SharpCraft.Item)~SharpCraft.JSONObjects.Item">
            <summary>
            Converts an <see cref="T:SharpCraft.Item"/> object into a <see cref="T:SharpCraft.JSONObjects.Item"/> object
            </summary>
            <param name="item">The <see cref="T:SharpCraft.Item"/> to convert</param>
        </member>
        <member name="M:SharpCraft.JSONObjects.Item.op_Implicit(SharpCraft.ID.Item)~SharpCraft.JSONObjects.Item">
            <summary>
            Converts an item id ento a <see cref="T:SharpCraft.JSONObjects.Item"/> object
            </summary>
            <param name="item">the item id to convert</param>
        </member>
        <member name="T:SharpCraft.JSONObjects.Location">
            <summary>
            A <see cref="T:System.Object"/> defining a location
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Location.Biome">
            <summary>
            The biome to detect
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Location.Dimension">
            <summary>
            the dimension to detect
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Location.Structure">
            <summary>
            the structure to detect
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Location.X">
            <summary>
            the x coordinate to detect
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Location.Y">
            <summary>
            the y coordinate to detect
            </summary>
        </member>
        <member name="F:SharpCraft.JSONObjects.Location.Z">
            <summary>
            the z coordinate to detect
            </summary>
        </member>
        <member name="M:SharpCraft.JSONObjects.Location.ToString">
            <summary>
            Outputs this <see cref="T:SharpCraft.JSONObjects.Location"/> data in string format
            </summary>
            <returns>this <see cref="T:SharpCraft.JSONObjects.Location"/>'s data</returns>
        </member>
        <member name="T:SharpCraft.BossBar">
            <summary>
            An object used for boss bars
            </summary>
        </member>
        <member name="M:SharpCraft.BossBar.#ctor(System.String)">
            <summary>
            Creates a new boss bar object.
            Note that this doesnt add the boss bar to the world
            </summary>
            <param name="BossBarName">The name of the bossbar</param>
        </member>
        <member name="M:SharpCraft.BossBar.ToString">
            <summary>
            Outputs the name of this boss bar
            </summary>
            <returns>the name of this boss bar</returns>
        </member>
        <member name="T:SharpCraft.Coords">
            <summary>
            An object for coordinates
            </summary>
        </member>
        <member name="F:SharpCraft.Coords.X">
            <summary>
            The coordinate
            </summary>
        </member>
        <member name="F:SharpCraft.Coords.Y">
            <summary>
            The coordinate
            </summary>
        </member>
        <member name="F:SharpCraft.Coords.Z">
            <summary>
            The coordinate
            </summary>
        </member>
        <member name="F:SharpCraft.Coords.RX">
            <summary>
            If the coordinate is relative or not
            </summary>
        </member>
        <member name="F:SharpCraft.Coords.RY">
            <summary>
            If the coordinate is relative or not
            </summary>
        </member>
        <member name="F:SharpCraft.Coords.RZ">
            <summary>
            If the coordinate is relative or not
            </summary>
        </member>
        <member name="F:SharpCraft.Coords.LocalCoords">
            <summary>
            If all the coordinates are local
            </summary>
        </member>
        <member name="M:SharpCraft.Coords.#ctor(System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a coordinate with the given parameters
            Note that the coordinates are relative if nothing else is specified
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="z">The z coordinate</param>
            <param name="RelativeX">If the x coordinate is relative or not</param>
            <param name="RelativeY">If the y coordinate is relative or not</param>
            <param name="RelativeZ">If the z coordinate is relative or not</param>
        </member>
        <member name="M:SharpCraft.Coords.#ctor(SharpCraft.ID.CoordType,System.Double,System.Double,System.Double)">
            <summary>
            Creates a coordinate of the specified type
            </summary>
            <param name="type">The type of coordinates</param>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="z">The z coordinate</param>
        </member>
        <member name="M:SharpCraft.Coords.#ctor">
            <summary>
            Creates a relative coordinate with the coords 0,0,0
            </summary>
        </member>
        <member name="M:SharpCraft.Coords.ToString">
            <summary>
            Gets the raw coordinate
            </summary>
            <returns>the raw coordinate used by the game</returns>
        </member>
        <member name="P:SharpCraft.Coords.StringX">
            <summary>
            Returns the raw x coordinate used by the game
            </summary>
        </member>
        <member name="P:SharpCraft.Coords.StringY">
            <summary>
            Returns the raw y coordinate used by the game
            </summary>
        </member>
        <member name="P:SharpCraft.Coords.StringZ">
            <summary>
            Returns the raw z coordinate used by the game
            </summary>
        </member>
        <member name="T:SharpCraft.Effect">
            <summary>
            An object for effects
            </summary>
        </member>
        <member name="F:SharpCraft.Effect.Duration">
            <summary>
            The duration of the effect (in ticks)
            </summary>
        </member>
        <member name="F:SharpCraft.Effect.Amplifier">
            <summary>
            The amplifier of the effect
            (0 = level 1)
            </summary>
        </member>
        <member name="F:SharpCraft.Effect.Type">
            <summary>
            The type of effect
            </summary>
        </member>
        <member name="F:SharpCraft.Effect.ShowParticles">
            <summary>
            If the effect should show particles or not
            </summary>
        </member>
        <member name="F:SharpCraft.Effect.Ambiant">
            <summary>
            If the effect is an ambiant effect
            (comes from a beacon / conduit)
            </summary>
        </member>
        <member name="M:SharpCraft.Effect.#ctor">
            <summary>
            Creates an empty effect
            </summary>
        </member>
        <member name="M:SharpCraft.Effect.#ctor(SharpCraft.ID.Effect,System.Int32,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Creates an effect with the specified parameters
            </summary>
            <param name="EffectType">the type of effect</param>
            <param name="EffectDuration">the duration of the effect (in ticks)</param>
            <param name="EffectAmplifier">the amplifier of the effect (0 = level 1)</param>
            <param name="ShowParticles">if the effect should show particles or not</param>
        </member>
        <member name="M:SharpCraft.Effect.ToString">
            <summary>
            Gets the raw effect data
            </summary>
            <returns>the raw effect data used by the game</returns>
        </member>
        <member name="T:SharpCraft.Firework">
            <summary>
            An object for firework parts
            </summary>
        </member>
        <member name="F:SharpCraft.Firework.Flicker">
            <summary>
            If the firework should flicker
            </summary>
        </member>
        <member name="F:SharpCraft.Firework.Trail">
            <summary>
            if the firework explosion should have trails
            </summary>
        </member>
        <member name="F:SharpCraft.Firework.Type">
            <summary>
            the type of the firework explosion
            </summary>
        </member>
        <member name="F:SharpCraft.Firework.Colors">
            <summary>
            the colors of the explosion
            </summary>
        </member>
        <member name="F:SharpCraft.Firework.FadeColors">
            <summary>
            the colors the explosion fades into
            </summary>
        </member>
        <member name="M:SharpCraft.Firework.ToString">
            <summary>
            Gets the raw effect data
            </summary>
            <returns>the raw effect data used by the game</returns>
        </member>
        <member name="T:SharpCraft.Helper">
            <summary>
            A class containing helpful method extensions
            </summary>
        </member>
        <member name="M:SharpCraft.Helper.Escape(System.String)">
            <summary>
            Adds escape characters to the given text
            </summary>
            <param name="text">The text to escape</param>
            <returns>The escaped text</returns>
        </member>
        <member name="M:SharpCraft.Helper.ToMinecraftDouble(System.Double)">
            <summary>
            Converts the given double into a double Minecraft can use
            </summary>
            <param name="Double">The double to convert</param>
            <returns>The converted double</returns>
        </member>
        <member name="M:SharpCraft.Helper.ToMinecraftDouble(System.Nullable{System.Double})">
            <summary>
            Converts the given double into a double Minecraft can use
            </summary>
            <param name="Double">The double to convert</param>
            <returns>The converted double</returns>
        </member>
        <member name="M:SharpCraft.Helper.MinecraftValue(SharpCraft.ID.Item)">
            <summary>
            Takes the item and converts it into an value Minecraft can use
            </summary>
            <param name="item">The item to convert</param>
            <returns>The converted item</returns>
        </member>
        <member name="M:SharpCraft.Helper.MinecraftValue(System.Nullable{SharpCraft.ID.Item})">
            <summary>
            Takes the item and converts it into an value Minecraft can use
            </summary>
            <param name="item">The item to convert</param>
            <returns>The converted item</returns>
        </member>
        <member name="M:SharpCraft.Helper.ToMinecraftBool(System.Boolean)">
            <summary>
            Takes a bool and converts it into a value Minecraft can use
            </summary>
            <param name="Bool">The bool to convert</param>
            <returns>The converted bool</returns>
        </member>
        <member name="M:SharpCraft.Helper.ToMinecraftBool(System.Nullable{System.Boolean})">
            <summary>
            Takes a bool and converts it into a value Minecraft can use
            </summary>
            <param name="Bool">The bool to convert</param>
            <returns>The converted bool</returns>
        </member>
        <member name="M:SharpCraft.Helper.GetString(SharpCraft.JSON[],System.Boolean)">
            <summary>
            Converts an array of JSON strings into raw data string
            </summary>
            <param name="JSONArray">The array to convert</param>
            <param name="forceArray">If the array should only should use extra</param>
            <returns>Raw data string made out of the JSON array</returns>
        </member>
        <member name="T:SharpCraft.HexColor">
            <summary>
            An object for rgb colors
            </summary>
        </member>
        <member name="P:SharpCraft.HexColor.Red">
            <summary>
            The amount of red this color is (goes from 0-255)
            </summary>
        </member>
        <member name="P:SharpCraft.HexColor.Green">
            <summary>
            The amount of green this color is (goes from 0-255)
            </summary>
        </member>
        <member name="P:SharpCraft.HexColor.Blue">
            <summary>
            The amount of blue this color is (goes from 0-255)
            </summary>
        </member>
        <member name="M:SharpCraft.HexColor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Makes a rgb color with the specified colors
            </summary>
            <param name="RedColor">the amount of red</param>
            <param name="GreenColor">the amount of green</param>
            <param name="BlueColor">the amount of blue</param>
        </member>
        <member name="M:SharpCraft.HexColor.#ctor(System.String)">
            <summary>
            Makes an rgb color out of a string with a hex color value.
            (Like #56a5fd)
            </summary>
            <param name="hexColor">the string to convert</param>
        </member>
        <member name="P:SharpCraft.HexColor.ColorInt">
            <summary>
            Outputs the color as an int
            </summary>
        </member>
        <member name="M:SharpCraft.HexColor.ToString">
            <summary>
            Outputs the color as a string containing the <see cref="P:SharpCraft.HexColor.ColorInt"/>
            </summary>
            <returns>The raw data used by Minecraft</returns>
        </member>
        <member name="M:SharpCraft.HexColor.op_Implicit(System.String)~SharpCraft.HexColor">
            <summary>
            Converts a string with a hex color value into an <see cref="T:SharpCraft.HexColor"/> object
            </summary>
            <param name="hexColor">the string to convert</param>
        </member>
        <member name="T:SharpCraft.JSON">
            <summary>
            An object used for JSON text
            (fx used in tellraw)
            </summary>
        </member>
        <member name="M:SharpCraft.JSON.#ctor">
            <summary>
            Creates the base of a new JSON string
            </summary>
        </member>
        <member name="M:SharpCraft.JSON.#ctor(System.String)">
            <summary>
            Creates a JSON string only containing text
            Not that this does not support anything else than the text inputted
            </summary>
            <param name="BasicText">the text the json should show</param>
        </member>
        <member name="M:SharpCraft.JSON.#ctor(System.String,SharpCraft.ID.MinecraftColor)">
            <summary>
            Creates a JSON string with the specified color
            </summary>
            <param name="Text">the text to display</param>
            <param name="Color">the color of the text</param>
        </member>
        <member name="F:SharpCraft.JSON.Text">
            <summary>
            The text to show
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.Translate">
            <summary>
            The "to be translated" text to show
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.With">
            <summary>
            The JSON strings to insert into the translated text
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.Selector">
            <summary>
            The selector to show
            Note if <see cref="F:SharpCraft.JSON.Objective"/> is set it will show a score instead. And if <see cref="F:SharpCraft.JSON.DataPath"/> is set it will show data for the entity instead.
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.Key">
            <summary>
            The minecraft keyboard key to show
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.Color">
            <summary>
            The color of the text
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.Obfuscated">
            <summary>
            If the text is obfuscated or not
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.Bold">
            <summary>
            If the text is bold or not
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.Italic">
            <summary>
            If the text is italic or not
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.Strikethrough">
            <summary>
            If the text is strikethroughed or not
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.Underline">
            <summary>
            If the text is underlined or not
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.Reset">
            <summary>
            If the text should reset the text look defined by its parent
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.ClickShiftInsertion">
            <summary>
            the text to input into a player's chat field if a player shift clicks the text
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.ClickURL">
            <summary>
            the link to open if a player clicks the text
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.ClickCommand">
            <summary>
            the command to run if a player clicks the text
            Note that you have to use /trigger if its a text displayed in chat
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.ClickInsertion">
            <summary>
            the text to input into a player's chat field if a player clicks the text
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.ClickBookPageChange">
            <summary>
            the page to change to if a player clicks the text
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.HoverText">
            <summary>
            the text to show when a player hovers over the text
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.HoverItem">
            <summary>
            the item data the player sees when hovering over the text
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.Objective">
            <summary>
            the objective to show a score in.
            Note that you also have to chose a selector to show a score
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.BlockCoords">
            <summary>
            The coords of a block to show data for
            note that <see cref="F:SharpCraft.JSON.DataPath"/> also has to be set
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.DataPath">
            <summary>
            The datapath to the data to show
            note that <see cref="F:SharpCraft.JSON.DataPath"/> or <see cref="F:SharpCraft.JSON.Selector"/> also has to be set
            </summary>
        </member>
        <member name="F:SharpCraft.JSON.interpret">
            <summary>
            if the output from data should be made nice
            </summary>
        </member>
        <member name="M:SharpCraft.JSON.ToString">
            <summary>
            Gets the raw JSON data
            </summary>
            <returns>the raw JSON data used by the game</returns>
        </member>
        <member name="P:SharpCraft.JSON.NewLine">
            <summary>
            Returns the thing used to mark a new line in a JSON text
            </summary>
        </member>
        <member name="M:SharpCraft.JSON.op_Implicit(System.String)~SharpCraft.JSON">
            <summary>
            Converts a string into a simple JSON string
            </summary>
            <param name="text">the string to convert</param>
        </member>
        <member name="M:SharpCraft.JSON.op_Implicit(SharpCraft.JSON)~SharpCraft.JSON[]">
            <summary>
            Converts a single JSON string into an array of JSON strings only containing the JSON string
            </summary>
            <param name="json">the JSON string to convert</param>
        </member>
        <member name="T:SharpCraft.MCAttribute">
            <summary>
            An object used for minecraft attributes
            </summary>
        </member>
        <member name="M:SharpCraft.MCAttribute.#ctor(SharpCraft.ID.AttributeType,System.Double,SharpCraft.ID.AttributeOperation,SharpCraft.UUID)">
            <summary>
            Creates a new attribute for an item
            </summary>
            <param name="ID">The attribute type</param>
            <param name="ChangeAmount">The amount to change the attribute with</param>
            <param name="Operation">The operation used to change</param>
            <param name="UUID">The UUID of the attribute</param>
        </member>
        <member name="M:SharpCraft.MCAttribute.#ctor(SharpCraft.ID.AttributeType,System.Double)">
            <summary>
            Creates a new attribute for an entity
            </summary>
            <param name="ID">the attribute type</param>
            <param name="Base">the base value of the attribute</param>
        </member>
        <member name="F:SharpCraft.MCAttribute.ID">
            <summary>
            The type of attribute
            </summary>
        </member>
        <member name="F:SharpCraft.MCAttribute.Base">
            <summary>
            The base amount of the attribute
            </summary>
        </member>
        <member name="F:SharpCraft.MCAttribute.Slot">
            <summary>
            The slot the attribute affects
            </summary>
        </member>
        <member name="F:SharpCraft.MCAttribute.Operation">
            <summary>
            The operation used to add the <see cref="F:SharpCraft.MCAttribute.ChangeAmount"/> with
            </summary>
        </member>
        <member name="F:SharpCraft.MCAttribute.ChangeAmount">
            <summary>
            The amount to change the atttribute with
            </summary>
        </member>
        <member name="F:SharpCraft.MCAttribute.UUID">
            <summary>
            The UUID of the attribute
            </summary>
        </member>
        <member name="M:SharpCraft.MCAttribute.ItemString">
            <summary>
            Gets the raw data used for items
            </summary>
            <returns>Raw data used by the game in items</returns>
        </member>
        <member name="M:SharpCraft.MCAttribute.EntityString">
            <summary>
            Gets the raw data used for entities
            </summary>
            <returns>Raw data used by the game in entities</returns>
        </member>
        <member name="T:SharpCraft.Range">
            <summary>
            An object for ranges
            </summary>
        </member>
        <member name="F:SharpCraft.Range.Min">
            <summary>
            The smallest number in the range
            </summary>
        </member>
        <member name="F:SharpCraft.Range.Max">
            <summary>
            The highest number in the range
            </summary>
        </member>
        <member name="M:SharpCraft.Range.#ctor(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Creates a range.
            </summary>
            <param name="Minimum">The smallest number in the range</param>
            <param name="Maximum">The highest number in the range</param>
        </member>
        <member name="M:SharpCraft.Range.#ctor(System.Double)">
            <summary>
            Creates a range which only contains one number
            </summary>
            <param name="Equals">The only number the range contains</param>
        </member>
        <member name="M:SharpCraft.Range.JSONString(System.String)">
            <summary>
            Gets the raw data used in JSON files
            "name":{"min":x,"max":y}
            </summary>
            <param name="Name">the name the object should have in the file</param>
            <returns>Raw data used in JSON files</returns>
        </member>
        <member name="M:SharpCraft.Range.SelectorString(System.String)">
            <summary>
            Gets the raw data used in commands
            x..y or name=x..y
            </summary>
            <param name="Name">The thing which has to be equal the range. If null the output will be x..y</param>
            <returns>Raw data used in commands</returns>
        </member>
        <member name="M:SharpCraft.Range.op_Implicit(System.Double)~SharpCraft.Range">
            <summary>
            Converts a single number into a range only containing that number
            </summary>
            <param name="exactNumber">The number the range contains</param>
        </member>
        <member name="T:SharpCraft.Rotation">
            <summary>
            An object for rotations
            </summary>
        </member>
        <member name="F:SharpCraft.Rotation.XRot">
            <summary>
            The rotation
            </summary>
        </member>
        <member name="F:SharpCraft.Rotation.YRot">
            <summary>
            The rotation
            </summary>
        </member>
        <member name="F:SharpCraft.Rotation.RXRot">
            <summary>
            If the rotation is relative or not
            </summary>
        </member>
        <member name="F:SharpCraft.Rotation.RYRot">
            <summary>
            If the rotation is relative or not
            </summary>
        </member>
        <member name="M:SharpCraft.Rotation.#ctor(System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Creates a new rotation object with the specified rotation
            </summary>
            <param name="xrot">the x rotation</param>
            <param name="yrot">the y rotation (goes from -90 (up) to 90 (down))</param>
            <param name="RelativeXRot">if the x rotation is relative or not</param>
            <param name="RelativeYRot">if the y rotation is relative or not</param>
        </member>
        <member name="M:SharpCraft.Rotation.#ctor(System.Boolean,System.Double,System.Double)">
            <summary>
            Creates a new rotation of the specified type
            </summary>
            <param name="Relative">If the whole rotation is relative or not</param>
            <param name="xrot">the x rotation</param>
            <param name="yrot">the y rotation (goes from -90 (up) to 90 (down))</param>
        </member>
        <member name="M:SharpCraft.Rotation.ToString">
            <summary>
            Gets the raw rotation
            </summary>
            <returns>the raw rotation used by the game</returns>
        </member>
        <member name="T:SharpCraft.ScoreObject">
            <summary>
            An object used for scoreboard objectives
            </summary>
        </member>
        <member name="M:SharpCraft.ScoreObject.#ctor(System.String)">
            <summary>
            Creates a new scoreboard objective object.
            Note that this doesnt add the objective to the world
            </summary>
            <param name="ScoreName">The name of the score</param>
        </member>
        <member name="M:SharpCraft.ScoreObject.ToString">
            <summary>
            Outputs the name of this score objective
            </summary>
            <returns>the name of this score objective</returns>
        </member>
        <member name="M:SharpCraft.ScoreObject.ScoreSayDebug(System.String,SharpCraft.Selector,SharpCraft.Function)">
            <summary>
            Displays a text and a score in this <see cref="T:SharpCraft.ScoreObject"/> in the chat
            </summary>
            <param name="text">The text to display</param>
            <param name="selector">The selector's score to show</param>
            <param name="writeOn">The function to write the command on</param>
        </member>
        <member name="T:SharpCraft.Selector">
            <summary>
            An object for selectors
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.#ctor">
            <summary>
            Creates a new @s selector
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.#ctor(SharpCraft.ID.Selector,SharpCraft.Tag)">
            <summary>
            Creates a new selecter of the given type
            </summary>
            <param name="SelectWay">the type of selector</param>
            <param name="HasTag">a tag the selected entity must have. Note that this can be overwritten by <see cref="F:SharpCraft.Selector.Tag"/></param>
        </member>
        <member name="M:SharpCraft.Selector.#ctor(System.String)">
            <summary>
            Creates a selector which selects a none existing entity
            </summary>
            <param name="FakeName"></param>
        </member>
        <member name="F:SharpCraft.Selector.SelectorType">
            <summary>
            The type of this selector
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.Level">
            <summary>
            The amount of levels the selected entity must have to be selected
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.Radius">
            <summary>
            The distance there has to be to the selected entity
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.XRotation">
            <summary>
            The x-rotation the selected entity must have
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.YRotation">
            <summary>
            The y-rotation the selected entity must have
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.Limit">
            <summary>
            The maximum amount of entities this selector can select
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.X">
            <summary>
            The coords the selector should search from
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.Y">
            <summary>
            The coords the selector should search from
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.Z">
            <summary>
            The coords the selector should search from
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.BoxX">
            <summary>
            The square the selector should search in
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.BoxY">
            <summary>
            The square the selector should search in
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.BoxZ">
            <summary>
            The square the selector should search in
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.Name">
            <summary>
            The names the selected entity must have / must not have to be selected
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.Type">
            <summary>
            The types the selected entity must be / must not be to be selected
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.Tag">
            <summary>
            The tags the selected entity must have / must not have to be selected
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.Score">
            <summary>
            The scores the selected entity must have
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.Team">
            <summary>
            The teams the selected entity must be on / must not be on to be selected
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.Mode">
            <summary>
            The gamemode the selected entity must be in / must not be in to be selected
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.Sort">
            <summary>
            The way the selected entities should be sorted in
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.NBT">
            <summary>
            The NBT the selected entity have to have to be selected
            </summary>
        </member>
        <member name="F:SharpCraft.Selector.NotNBT">
            <summary>
            If the entity shouldnt have the NBT in <see cref="F:SharpCraft.Selector.NBT"/>
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.SingleType">
            <summary>
            The type the entity has to be. Note that <see cref="F:SharpCraft.Selector.Type"/> overwrites this value
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.SingleName">
            <summary>
            The name the entity has to have. Note that <see cref="F:SharpCraft.Selector.Name"/> overwrites this value
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.SingleTeam">
            <summary>
            The team the entity has to be. Not that <see cref="F:SharpCraft.Selector.Team"/> overwrites this value
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.SingleScore">
            <summary>
            The score the entity has to have. Not that <see cref="F:SharpCraft.Selector.Score"/> overwrites this value
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.SingleTag">
            <summary>
            The tag the entity has to be. Not that <see cref="F:SharpCraft.Selector.Tag"/> overwrites this value
            </summary>
        </member>
        <member name="P:SharpCraft.Selector.SingleMode">
            <summary>
            The gamemode the entity has to be. Not that <see cref="F:SharpCraft.Selector.Mode"/> overwrites this value
            </summary>
        </member>
        <member name="T:SharpCraft.Selector.EntityType">
            <summary>
            An object used to define a type an entity has to be / not to be
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityType.#ctor(SharpCraft.ID.Entity,System.Boolean)">
            <summary>
            Creates the object with the given parameters
            </summary>
            <param name="ID">The type of entity the entity has / has not to be</param>
            <param name="Wanted">If the entity should be the type or not</param>
        </member>
        <member name="M:SharpCraft.Selector.EntityType.#ctor(SharpCraft.Group)">
            <summary>
            Creates an <see cref="T:SharpCraft.Selector.EntityType"/> which referes to an entity group
            The entity must be a type which is in the given group
            </summary>
            <param name="entityGroup">the entity group to refere to</param>
        </member>
        <member name="M:SharpCraft.Selector.EntityType.ToString">
            <summary>
            The <see cref="F:SharpCraft.Selector.SelectorType"/>'s raw data
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityType.op_Implicit(SharpCraft.Selector.EntityType)~SharpCraft.Selector.EntityType[]">
            <summary>
            Converts a single <see cref="T:SharpCraft.Selector.EntityType"/> into an array containing only that one <see cref="T:SharpCraft.Selector.EntityType"/>
            </summary>
            <param name="entity">the <see cref="T:SharpCraft.Selector.EntityType"/> to convert into an array</param>
        </member>
        <member name="T:SharpCraft.Selector.EntityName">
            <summary>
            An object used to define a name an entity has to have / not to have
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityName.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an object defining a name an entity has to have / not to have
            </summary>
            <param name="EntityName">The name the entity has to have / not to have</param>
            <param name="Wanted">If the entity has to have the name</param>
        </member>
        <member name="M:SharpCraft.Selector.EntityName.ToString">
            <summary>
            The <see cref="T:SharpCraft.Selector.EntityName"/>'s raw data
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityName.op_Implicit(SharpCraft.Selector.EntityName)~SharpCraft.Selector.EntityName[]">
            <summary>
            Converts a single <see cref="T:SharpCraft.Selector.EntityName"/> into an array containing only that one <see cref="T:SharpCraft.Selector.EntityName"/>
            </summary>
            <param name="name">the <see cref="T:SharpCraft.Selector.EntityName"/> to convert into an array</param>
        </member>
        <member name="T:SharpCraft.Selector.EntityTag">
            <summary>
            An object used to define a name an entity has to have / not to have
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityTag.#ctor(SharpCraft.Tag,System.Boolean)">
            <summary>
            Creates an object defining a tag an entity has to have / not to have
            </summary>
            <param name="TagName">The tag the entity has to have / not to have</param>
            <param name="Wanted">If the entity has to have the tag or not</param>
        </member>
        <member name="M:SharpCraft.Selector.EntityTag.ToString">
            <summary>
            The <see cref="T:SharpCraft.Selector.EntityTag"/>'s raw data
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityTag.op_Implicit(SharpCraft.Selector.EntityTag)~SharpCraft.Selector.EntityTag[]">
            <summary>
            Converts a single <see cref="T:SharpCraft.Selector.EntityTag"/> into an array containing only that one <see cref="T:SharpCraft.Selector.EntityTag"/>
            </summary>
            <param name="tag">the <see cref="T:SharpCraft.Selector.EntityTag"/> to convert into an array</param>
        </member>
        <member name="T:SharpCraft.Selector.EntityScore">
            <summary>
            An object used to define a score an entity has to have
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityScore.#ctor(SharpCraft.ScoreObject,SharpCraft.Range)">
            <summary>
            Creates an object defining a score an entity has to have
            </summary>
            <param name="ObjectiveName">The score objective to look in</param>
            <param name="Score">The range the score has to be inside</param>
        </member>
        <member name="M:SharpCraft.Selector.EntityScore.ToString">
            <summary>
            The <see cref="T:SharpCraft.Selector.EntityScore"/>'s raw data
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityScore.op_Implicit(SharpCraft.Selector.EntityScore)~SharpCraft.Selector.EntityScore[]">
            <summary>
            Converts a single <see cref="T:SharpCraft.Selector.EntityScore"/> into an array containing only that one <see cref="T:SharpCraft.Selector.EntityScore"/>
            </summary>
            <param name="score">the <see cref="T:SharpCraft.Selector.EntityScore"/> to convert into an array</param>
        </member>
        <member name="T:SharpCraft.Selector.EntityTeam">
            <summary>
            An object used to define a team an entity has to be on / not to be on
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityTeam.#ctor(SharpCraft.Team,System.Boolean)">
            <summary>
            Creates an object defining a team an entity has to be / not to be on
            </summary>
            <param name="TeamName">The team the entity has to be on / not to be on</param>
            <param name="Wanted">If the entity has to be on the team or not</param>
        </member>
        <member name="M:SharpCraft.Selector.EntityTeam.ToString">
            <summary>
            The <see cref="T:SharpCraft.Selector.EntityTeam"/>'s raw data
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityTeam.op_Implicit(SharpCraft.Selector.EntityTeam)~SharpCraft.Selector.EntityTeam[]">
            <summary>
            Converts a single <see cref="T:SharpCraft.Selector.EntityTeam"/> into an array containing only that one <see cref="T:SharpCraft.Selector.EntityTeam"/>
            </summary>
            <param name="team">the <see cref="T:SharpCraft.Selector.EntityTeam"/> to convert into an array</param>
        </member>
        <member name="T:SharpCraft.Selector.EntityMode">
            <summary>
            An object used to define a gamemode an entity has to be in / not to be in
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityMode.#ctor(SharpCraft.ID.Gamemode,System.Boolean)">
            <summary>
            Creates an object defining a gamemode an entity has to be in / not to be in
            </summary>
            <param name="Mode">The gamemode the entity has to be in / not to be in</param>
            <param name="Wanted">If the entity has to be in the gamemode or not</param>
        </member>
        <member name="M:SharpCraft.Selector.EntityMode.ToString">
            <summary>
            The <see cref="T:SharpCraft.Selector.EntityMode"/>'s raw data
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.EntityMode.op_Implicit(SharpCraft.Selector.EntityMode)~SharpCraft.Selector.EntityMode[]">
            <summary>
            Converts a single <see cref="T:SharpCraft.Selector.EntityMode"/> into an array containing only that one <see cref="T:SharpCraft.Selector.EntityMode"/>
            </summary>
            <param name="mode">the <see cref="T:SharpCraft.Selector.EntityMode"/> to convert into an array</param>
        </member>
        <member name="M:SharpCraft.Selector.ToString">
            <summary>
            The <see cref="T:SharpCraft.Selector"/>'s raw data
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.Limited">
            <summary>
            Sets <see cref="F:SharpCraft.Selector.Limit"/> to 1 if this isnt a @s selector
            </summary>
        </member>
        <member name="M:SharpCraft.Selector.op_Implicit(System.String)~SharpCraft.Selector">
            <summary>
            Converts a string into a selector containing a fakename
            </summary>
            <param name="fakeName">The fake name to make a selector out of</param>
        </member>
        <member name="M:SharpCraft.Selector.op_Implicit(SharpCraft.ID.Selector)~SharpCraft.Selector">
            <summary>
            Converts a selector type into a selector
            </summary>
            <param name="selector">the selector type to convert into a selector</param>
        </member>
        <member name="T:SharpCraft.SpawnerPotential">
            <summary>
            An object used to define an entity's spawner potential
            </summary>
        </member>
        <member name="M:SharpCraft.SpawnerPotential.#ctor(SharpCraft.Entity.BaseEntity,System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpCraft.SpawnerPotential"/> for the entity with the given weight
            </summary>
            <param name="Entity">The entity to spawn</param>
            <param name="Weight">The weight of the entity</param>
        </member>
        <member name="M:SharpCraft.SpawnerPotential.ToString">
            <summary>
            Returns the raw data for this object as a string
            </summary>
            <returns>Raw data used by the game</returns>
        </member>
        <member name="T:SharpCraft.Tag">
            <summary>
            An object used for tags
            </summary>
        </member>
        <member name="M:SharpCraft.Tag.#ctor(System.String)">
            <summary>
            Creates a new tag with the given name
            </summary>
            <param name="TagName">The name of the tag</param>
        </member>
        <member name="M:SharpCraft.Tag.ToString">
            <summary>
            Returns the name of the tag
            </summary>
            <returns>The name of the tag</returns>
        </member>
        <member name="M:SharpCraft.Tag.op_Implicit(System.String)~SharpCraft.Tag">
            <summary>
            Converts a string into a <see cref="T:SharpCraft.Tag"/>
            </summary>
            <param name="tag">the string to convert</param>
        </member>
        <member name="M:SharpCraft.Tag.op_Implicit(SharpCraft.Tag)~SharpCraft.Tag[]">
            <summary>
            Converts a <see cref="T:SharpCraft.Tag"/> into an <see cref="T:SharpCraft.Tag"/> array containing only that one <see cref="T:SharpCraft.Tag"/>
            </summary>
            <param name="tag">the <see cref="T:SharpCraft.Tag"/> to convert</param>
        </member>
        <member name="T:SharpCraft.Team">
            <summary>
            An object used for teams
            </summary>
        </member>
        <member name="M:SharpCraft.Team.#ctor(System.String)">
            <summary>
            Creates a new team object.
            Note that this doesnt add the team to the world
            </summary>
            <param name="TeamName">The team's name</param>
        </member>
        <member name="M:SharpCraft.Team.ToString">
            <summary>
            Outputs the name of this team
            </summary>
            <returns>the name of this team</returns>
        </member>
        <member name="T:SharpCraft.Time">
            <summary>
            An object used to define time
            </summary>
        </member>
        <member name="T:SharpCraft.Time.TimerType">
            <summary>
            The type of time to output
            </summary>
        </member>
        <member name="F:SharpCraft.Time.TimerType.Int">
            <summary>
            Will output a time which can be in an int
            </summary>
        </member>
        <member name="F:SharpCraft.Time.TimerType.Short">
            <summary>
            Will output a time which can be in an short
            </summary>
        </member>
        <member name="M:SharpCraft.Time.#ctor(System.Int32,SharpCraft.ID.TimeType)">
            <summary>
            Creates a new time object with the specified time
            </summary>
            <param name="time">the amount of time</param>
            <param name="timeType">the time measuring type</param>
        </member>
        <member name="M:SharpCraft.Time.ToString">
            <summary>
            Converts the time into raw data used by the game
            </summary>
            <returns>Raw data used by the game</returns>
        </member>
        <member name="M:SharpCraft.Time.op_Implicit(System.Int32)~SharpCraft.Time">
            <summary>
            Converts a number into a new time object in ticks
            </summary>
            <param name="ticks">The amount of ticks the time should be</param>
        </member>
        <member name="M:SharpCraft.Time.AsTicks(SharpCraft.Time.TimerType)">
            <summary>
            Outputs this time amount in ticks
            </summary>
            <param name="type">The type of output</param>
            <returns>This time amount in ticks</returns>
        </member>
        <member name="T:SharpCraft.UUID">
            <summary>
            An object used for UUID's
            </summary>
        </member>
        <member name="F:SharpCraft.UUID.Least">
            <summary>
            the UUIDLeast
            </summary>
        </member>
        <member name="F:SharpCraft.UUID.Most">
            <summary>
            the UUIDMost
            </summary>
        </member>
        <member name="M:SharpCraft.UUID.#ctor(System.Int64,System.Int64)">
            <summary>
            Creates a UUID Out of a UUIDLeast and a UUIDMost
            </summary>
            <param name="Least">the UUIDLeast</param>
            <param name="Most">the UUIDMost</param>
        </member>
        <member name="M:SharpCraft.UUID.#ctor(System.String)">
            <summary>
            Creates a uuid object out of a UUID in a string format
            </summary>
            <param name="UUID">the string to convert</param>
        </member>
        <member name="M:SharpCraft.UUID.ToString">
            <summary>
            Returns the uuid in string format
            </summary>
            <returns>The uuid as a string</returns>
        </member>
        <member name="T:SharpCraft.ID">
            <summary>
            All the different ID's/Types/States things in the game can have
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files">
            <summary>
            File names used by Minecraft
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.LootTables">
            <summary>
            Loot table file names used by Minecraft which then can be used in / as a <see cref="T:SharpCraft.Loottable"/>
            </summary>
        </member>
        <member name="M:SharpCraft.ID.Files.LootTables.Block(SharpCraft.ID.Block)">
            <summary>
            Outputs the file name for the given block's loot table
            </summary>
            <param name="block">The block to get the file name of</param>
            <returns>A loot table file name</returns>
        </member>
        <member name="M:SharpCraft.ID.Files.LootTables.Entity(SharpCraft.ID.Entity)">
            <summary>
            Outputs the file name for the given entity's loot table
            </summary>
            <param name="entity">The entity to get the file name of</param>
            <returns>A loot table file name</returns>
        </member>
        <member name="M:SharpCraft.ID.Files.LootTables.EntitySheep(SharpCraft.ID.Color)">
            <summary>
            Outputs the file name for the given sheep color's loot table
            </summary>
            <param name="color">The sheep color to get the file name of</param>
            <returns>A loot table file name</returns>
        </member>
        <member name="T:SharpCraft.ID.Files.LootTables.Fishing">
            <summary>
            Loot tables Minecraft uses for fishing
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Files.LootTables.Fishing.BaseFishing">
            <summary>
            The loot table called when the player cathes a fish
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Files.LootTables.Fishing.Fish">
            <summary>
            A loot table containing fishs
            (this loot table is normally called by the <see cref="P:SharpCraft.ID.Files.LootTables.Fishing.BaseFishing"/> loot table and the normal guardian loot table)
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Files.LootTables.Fishing.Junk">
            <summary>
            A loot table containing junk
            (this loot table is normally called by the <see cref="P:SharpCraft.ID.Files.LootTables.Fishing.BaseFishing"/> loot table)
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Files.LootTables.Fishing.Treasure">
            <summary>
            A loot table containing treasure
            (this loot table is normally called by the <see cref="P:SharpCraft.ID.Files.LootTables.Fishing.BaseFishing"/> loot table)
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.LootTables.Chest">
            <summary>
            Loot tables Minecraft uses for chest loot
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups">
            <summary>
            Group file names used by Minecraft which then can be used in / as a <see cref="T:SharpCraft.Group"/>
            These groups are called tags in Minecraft. But let's face it. It's a bad name!
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Function">
            <summary>
            Function groups
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Function.load">
            <summary>
            Functions inside this group gets evoked everytime the world loads or someone uses /reload
            (They are run when the datapack containing the group loads)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Function.tick">
            <summary>
            Functions inside this groups runs 20 times a second
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Blocks">
            <summary>
            Block groups
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Blocks.Normal">
            <summary>
            Normal block groups made by the game. These groups has no real uses other than grouping blocks
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Blocks.Special">
            <summary>
            Special block groups which has special properties
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.enderman_holdable">
            <summary>
            Endermen can only pick up blocks in this group
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.anvil">
            <summary>
            This group makes anvils in it show their gui when clicked (Only works for anvil blocks)
            Changes the death message caused by the block as a falling block landing on and killing a player
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.banners">
            <summary>
            Right clicking these blocks with a map marks it on the map
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.impermeable">
            <summary>
            Blocks in this groups does not allow water to drip through them
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.logs">
            <summary>
            Leaves wont decay around these blocks
            Trees can grow into blocks with this tag
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.underwater_bonemeals">
            <summary>
            When one of these blocks are bonemealed under water in a warm water biome the block duplicates
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.valid_spawn">
            <summary>
            Blocks in this group allows players to spawn on them
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.wool">
            <summary>
            Blocks in this group can be broken using shears
            If a block in this group is under a note block it will sound like a guitar
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Blocks.Special.bamboo_plantable">
            <summary>
            Blocks in this group allows bamboo to be planted ontop
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Fluid">
            <summary>
            fluid groups used by Minecraft
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Fluid.lava">
            <summary>
            Cactus breaks beside these.
            Used to make a fluid look like lava.
            Used to make smoke particles when rain hits these.
            Items and experience orbs burns inside these.
            used when creating cobblestone/stone/obsidian.
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Fluid.water">
            <summary>
            Corals must be beside one of these.
            Farmland stays hydrated around these.
            Sugar canes can stay around these.
            Sponges absorb these.
            some particles can only survive in these.
            Entities in these moves like in water.
            concrete gets solid in these.
            items float in these.
            glass bottles can be filled with these.
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Items">
            <summary>
            item groups
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Items.Normal">
            <summary>
            Normal item groups made by the game. These groups has no real uses other than grouping items
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Items.Special">
            <summary>
            special item groups which has special properties
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.planks">
            <summary>
            Items in this group can be used to repeair wooden tools and shields
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Files.Groups.Items.Special.fishes">
            <summary>
            Dolphins swims to players with this item
            Can be feet to dolphins
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Files.Groups.Entities">
            <summary>
            entity groups
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Selector.a">
            <summary>
            Selects all players
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Selector.p">
            <summary>
            Selects the closest player
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Selector.r">
            <summary>
            Selects a random player
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Selector.e">
            <summary>
            Selects all entities
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Selector.s">
            <summary>
            Selects the executing player
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Selector.All">
            <summary>
            Selects everything, even things which aren't online. Not all commands support this selector
            </summary>
        </member>
        <member name="F:SharpCraft.ID.AttributeOperation.addition">
            <summary>
            Adds the number to the base
            </summary>
        </member>
        <member name="F:SharpCraft.ID.AttributeOperation.multiply_base">
            <summary>
            Multiplies the base number with all the given multiply_base modifiers at once
            </summary>
        </member>
        <member name="F:SharpCraft.ID.AttributeOperation.multiply_total">
            <summary>
            Multiplies the total attribute value with the given number
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.Circling">
            <summary>
            The ender dragon will circle around the island
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.Strafing">
            <summary>
            Flies to a player and fires a fireball
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.FlyingToPortal">
            <summary>
            Flies to the portal
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.LandingOnPortal">
            <summary>
            Lands on the portal
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.TakingOffFromPortal">
            <summary>
            Taking of from the portal
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.LandedBreathAttack">
            <summary>
            Performs a breath attack while standing still
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.LandedReadyBreathAttack">
            <summary>
            Gets ready to perform a breath attack on a player
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.LandedRoar">
            <summary>
            Roars before going to <see cref="F:SharpCraft.ID.DragonPhase.LandedReadyBreathAttack"/>
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.ChargingPlayer">
            <summary>
            Charges a player
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.FlyingToPortalToDie">
            <summary>
            Flies to the portal to die there
            </summary>
        </member>
        <member name="F:SharpCraft.ID.DragonPhase.NoAI">
            <summary>
            Enderdragon will not have any AI
            </summary>
        </member>
        <member name="F:SharpCraft.ID.ArrowPickup.CantPickUp">
            <summary>
            Players can't pick up the arrow
            </summary>
        </member>
        <member name="F:SharpCraft.ID.ArrowPickup.CanPickUp">
            <summary>
            Players can pick up the arrow
            </summary>
        </member>
        <member name="F:SharpCraft.ID.ArrowPickup.CreativePickUp">
            <summary>
            Players in creative mode can pick the arrow
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.bs">
            <summary>
            Bottom Stripe
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.ts">
            <summary>
            Top Stripe
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.ls">
            <summary>
            Left Stripe
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.rs">
            <summary>
            Right Stripe
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.cs">
            <summary>
            Center Stripe
            (bottom to top)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.ms">
            <summary>
            Middle Stripe
            (left to right)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.drs">
            <summary>
            Down Right Stripe
            (Starts at top left ends at bottom right)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.dls">
            <summary>
            Down Left Stripe
            (Starts at top right ends at bottom left)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.ss">
            <summary>
            Small Stripes
            (multiple lines going from bottom to top)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.cr">
            <summary>
            Cross
            (X)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.sc">
            <summary>
            Cross
            (+)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.ld">
            <summary>
            Left Top Diagonal
            (Goes from bottom left to top right with the left side being colored)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.rud">
            <summary>
            Right Top Diagonal
            (Goes from top left to bottom right with the right side being colored)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.lud">
            <summary>
            Left Bottom Diagonal
            (Goes from top left to bottom right with the left side being colored)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.rd">
            <summary>
            Right Bottom Diagonal
            (Goes from bottom left to top right with the right side being colored)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.vh">
            <summary>
            Vertical Half Left
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.vhr">
            <summary>
            Vertical Half Right
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.hh">
            <summary>
            Horizontal Half Top
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.hhb">
            <summary>
            Horizontal Half Bottom
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.bl">
            <summary>
            Bottom Left Square
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.br">
            <summary>
            Bottom Right Square
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.tl">
            <summary>
            top Left Square
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.tr">
            <summary>
            Top Right Square
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.bt">
            <summary>
            Bottom Triangle
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.tt">
            <summary>
            Top Triangle
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.bts">
            <summary>
            Multiple Bottom Triangles
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.tts">
            <summary>
            Multiple Top Triangles
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.mc">
            <summary>
            Middle Circle
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.mr">
            <summary>
            Middle Rhombus
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.bo">
            <summary>
            Border
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.cbo">
            <summary>
            Weird waving border
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.bri">
            <summary>
            Bricks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.gra">
            <summary>
            Top Gradiant
            (Solid at top and gone at bottom)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.gru">
            <summary>
            Bottom Gradiant
            (Solid at bottom and gone at top)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.cre">
            <summary>
            Creeper
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.sku">
            <summary>
            Skull
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.flo">
            <summary>
            Flower
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BannerPattern.moj">
            <summary>
            Mojang
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateCompareMode.compare">
            <summary>
            Outputs the signal if it's the greatest signal
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateCompareMode.subtract">
            <summary>
            Subtracts the side signal from the input signal
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateChestType.single">
            <summary>
            Its a single chest
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateChestType.left">
            <summary>
            Connected with the chest to the left
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateChestType.right">
            <summary>
            Connected with the chest to the right
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.FSharp1">
            <summary>
            F♯/G♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.GSharp1">
            <summary>
            G♯/A♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.ASharp1">
            <summary>
            A♯/B♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.CSharp1">
            <summary>
            C♯/D♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.DSharp1">
            <summary>
            D♯/E♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.FSharp2">
            <summary>
            F♯/G♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.GSharp2">
            <summary>
            G♯/A♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.ASharp2">
            <summary>
            A♯/B♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.CSharp2">
            <summary>
            C♯/D♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.DSharp2">
            <summary>
            D♯/E♭
            </summary>
        </member>
        <member name="F:SharpCraft.ID.StateNote.FSharp3">
            <summary>
            F♯/G♭
            </summary>
        </member>
        <member name="T:SharpCraft.ID.StateStairShape">
            <summary>
            Outer == 5/8 of a block.
            Inner == 7/8 of a block.
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BlockFill.destroy">
            <summary>
            Destroys all blocks and makes their items drop
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BlockFill.keep">
            <summary>
            Only replaces air blocks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BlockFill.hollow">
            <summary>
            The inside of the fill is filled with air with a square of the chosen block around
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BlockFill.outline">
            <summary>
            The inside of the fill isn't effected. Only the frame is.
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BlockFill.replace">
            <summary>
            Replaces blocks with the specified block
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Operation.Add">
            <summary>
            Add (+) the 2 numbers and saves the result in the first <see cref="T:SharpCraft.ID.Selector"/>
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Operation.Subtract">
            <summary>
            subtract (-) the 2 numbers and saves the result in the first <see cref="T:SharpCraft.ID.Selector"/>
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Operation.Multiply">
            <summary>
            multiply (*) the 2 numbers and saves the result in the first <see cref="T:SharpCraft.ID.Selector"/>
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Operation.Divide">
            <summary>
            divide (/) the 2 numbers and saves the result in the first <see cref="T:SharpCraft.ID.Selector"/>
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Operation.Remainder">
            <summary>
            finds the remainder (%) when dividing the 2 numbers and saves the result in the first <see cref="T:SharpCraft.ID.Selector"/>
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Operation.Switch">
            <summary>
            Switches the 2 numbers. First <see cref="T:SharpCraft.ID.Selector"/> gets <see cref="T:SharpCraft.ID.Selector"/> 2's number and 2 gets 1's number
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Operation.GetHigher">
            <summary>
            Finds the highest number of the given numbers and saves it in the first <see cref="T:SharpCraft.ID.Selector"/>
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Operation.GetLowest">
            <summary>
            Finds the lowest number of the given numbers and saves it in the first <see cref="T:SharpCraft.ID.Selector"/>
            </summary>
        </member>
        <member name="F:SharpCraft.ID.Operation.Equel">
            <summary>
            Sets the first <see cref="T:SharpCraft.ID.Selector"/>'s score to the 2nd <see cref="T:SharpCraft.ID.Selector"/>'s score
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TeamCollision.always">
            <summary>
            Makes the team collide with everyone
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TeamCollision.never">
            <summary>
            Makes the team never collide
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TeamCollision.pushOtherTeams">
            <summary>
            Makes the team only collide with players not on their team
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TeamCollision.PushOwnTeam">
            <summary>
            Makes the team only collide with players on their team
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TeamVisibility.always">
            <summary>
            Makes the team visible to everyone
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TeamVisibility.never">
            <summary>
            Makes the team hidden for everyone
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TeamVisibility.hideForOtherTeams">
            <summary>
            Makes the team hidden for players not on their team
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TeamVisibility.hideForOwnTeam">
            <summary>
            Makes the team hidden for players on their own team
            </summary>
        </member>
        <member name="F:SharpCraft.ID.IfScoreOperation.Smaller">
            <summary>
            &lt;
            </summary>
        </member>
        <member name="F:SharpCraft.ID.IfScoreOperation.SmallerOrEquel">
            <summary>
            &lt;=
            </summary>
        </member>
        <member name="F:SharpCraft.ID.IfScoreOperation.Equel">
            <summary>
            ==
            </summary>
        </member>
        <member name="F:SharpCraft.ID.IfScoreOperation.Higher">
            <summary>
            &gt;
            </summary>
        </member>
        <member name="F:SharpCraft.ID.IfScoreOperation.HigherOrEquel">
            <summary>
            &gt;=
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BossBarStyle.progress">
            <summary>
            The bar is one big bar
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BossBarStyle.notched_6">
            <summary>
            The bar is split into 6 parts
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BossBarStyle.notched_10">
            <summary>
            The bar is split into 10 parts
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BossBarStyle.notched_12">
            <summary>
            The bar is split into 12 parts
            </summary>
        </member>
        <member name="F:SharpCraft.ID.BossBarStyle.notched_20">
            <summary>
            The bar is split into 20 parts
            </summary>
        </member>
        <member name="F:SharpCraft.ID.ObjectiveRender.hearts">
            <summary>
            If each number should be displayed as a half heart
            </summary>
        </member>
        <member name="F:SharpCraft.ID.ObjectiveRender.integer">
            <summary>
            If the number should be displayed as a number
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TimeType.ticks">
            <summary>
            Makes the time be in ticks
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TimeType.seconds">
            <summary>
            Makes the time be in seconds
            (20 ticks)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.TimeType.days">
            <summary>
            Makes the time be in Minecraft days
            (24000 ticks)
            </summary>
        </member>
        <member name="F:SharpCraft.ID.LootCheckEntity.This">
            <summary>
            Checks as the killed entity
            </summary>
        </member>
        <member name="F:SharpCraft.ID.LootCheckEntity.Killer">
            <summary>
            Checks as the killer
            </summary>
        </member>
        <member name="F:SharpCraft.ID.LootCheckEntity.Killer_player">
            <summary>
            Checks as the killer if the killer is a player
            </summary>
        </member>
        <member name="F:SharpCraft.ID.AdvancementFrame.task">
            <summary>
            Normal basic advancement
            </summary>
        </member>
        <member name="F:SharpCraft.ID.AdvancementFrame.challenge">
            <summary>
            A star advancement which is supposed to be hard to get
            It makes a sounds and makes the name purple
            </summary>
        </member>
        <member name="F:SharpCraft.ID.AdvancementFrame.goal">
            <summary>
            A advancement which is round instead of being square
            </summary>
        </member>
        <member name="T:SharpCraft.ID.ScoreDisplay">
            <summary>
            Places to show scores
            </summary>
        </member>
        <member name="F:SharpCraft.ID.ScoreDisplay.belowName">
            <summary>
            To display the player's score under the player's nametag ingame
            </summary>
        </member>
        <member name="F:SharpCraft.ID.ScoreDisplay.list">
            <summary>
            To display the player's score besides the player's name in the tab list
            </summary>
        </member>
        <member name="F:SharpCraft.ID.ScoreDisplay.sidebar">
            <summary>
            To display the whole scoreboard in the sidebar list
            (Highest numbers are displayed first. This list only supports up to 15 scores) 
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Objective">
            <summary>
            A list of all scoreboard objectives
            </summary>
        </member>
        <member name="M:SharpCraft.ID.Objective.KilledByTeam(SharpCraft.ID.MinecraftColor)">
            <summary>
            Goes up by one when the player was killed by another player with the specified team color
            </summary>
            <param name="TeamColor">The team color to check for</param>
        </member>
        <member name="M:SharpCraft.ID.Objective.KillTeam(SharpCraft.ID.MinecraftColor)">
            <summary>
            Goes up by one when the player kills another with the specified team color
            </summary>
            <param name="TeamColor">The team color to check for</param>
        </member>
        <member name="M:SharpCraft.ID.Objective.Broken(SharpCraft.ID.Item)">
            <summary>
            Goes up by one when the player breaks the specified item
            (As in uses the last durability)
            </summary>
            <param name="Item">the item to check for</param>
        </member>
        <member name="M:SharpCraft.ID.Objective.Crafted(SharpCraft.ID.Item)">
            <summary>
            Goes up by one when the player crafts the specified item
            </summary>
            <param name="Item">the item to check for</param>
        </member>
        <member name="M:SharpCraft.ID.Objective.Dropped(SharpCraft.ID.Item)">
            <summary>
            Goes up by one when the player crafts the specified item
            </summary>
            <param name="Item">the item to check for</param>
        </member>
        <member name="M:SharpCraft.ID.Objective.Killed(SharpCraft.ID.Entity)">
            <summary>
            Goes up by one when the player kills an entity of the specified type
            </summary>
            <param name="Entity">the entity to check for</param>
        </member>
        <member name="M:SharpCraft.ID.Objective.KilledBy(SharpCraft.ID.Entity)">
            <summary>
            Goes up by one when the player gets killed by an entity of the specified type
            </summary>
            <param name="Entity">the entity to check for</param>
        </member>
        <member name="M:SharpCraft.ID.Objective.Mined(SharpCraft.ID.Block)">
            <summary>
            Goes up by one when the player breaks the specified block
            </summary>
            <param name="Block">the block to check for</param>
        </member>
        <member name="M:SharpCraft.ID.Objective.PickedUp(SharpCraft.ID.Item)">
            <summary>
            Goes up by one when the player picks up the specified item
            </summary>
            <param name="Item">the item to check for</param>
        </member>
        <member name="M:SharpCraft.ID.Objective.Used(SharpCraft.ID.Item)">
            <summary>
            Goes up by one when the player uses the specified item
            </summary>
            <param name="Item">the item to check for</param>
        </member>
        <member name="P:SharpCraft.ID.Objective.LastSlept">
            <summary>
            The number of ticks since the player last slept
            (This is a readonly objective type)
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Objective.Open">
            <summary>
            Goes up by one when the player opens the specified block's gui
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Objective.Movement">
            <summary>
            Goes up one per cm the player moves in the specified way
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.Aviate">
            <summary>
            Distance flown with Elytra
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.RideBoat">
            <summary>
            Distance ridden in boats
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.Climb">
            <summary>
            Distance climbed on ladders/leaves
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.Crouch">
            <summary>
            Distance crouched / shifted / sneaking
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.Dive">
            <summary>
            Distance walked under water (not swum)
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.Fall">
            <summary>
            Distance falled
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.Fly">
            <summary>
            Distance flown in creative/spectator mode
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.RideHorse">
            <summary>
            Distance ridden on horses
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.RideMinecart">
            <summary>
            Distance ridden minecarts
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.RidePig">
            <summary>
            Distance ridden on pigs
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.Sprint">
            <summary>
            Distance sprinted/ran
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.Swim">
            <summary>
            Distance swum
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Movement.Walk">
            <summary>
            Distance walked
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.DeathCount">
            <summary>
            Goes up by one everytime the player dies
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.AnimalsBred">
            <summary>
            Goes up by one everytime the player breds two animals
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.CleanArmor">
            <summary>
            Goes up by one everytime the player cleans leather armor in a cauldron
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.CleanBanner">
            <summary>
            Goes up by one everytime the player cleans a banner in a cauldron
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.DamageDealt">
            <summary>
            Goes up by however much damage the player deals
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.DamageTaken">
            <summary>
            Goes up by however much damage the player takes
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Deaths">
            <summary>
            Goes up by one everytime the player dies
            ...Yep... there are 2 objectives for this
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Drop">
            <summary>
            Goes up by one everytime the player drops something
            Note: dragging an item out of inventory doesnt count
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.EatCake">
            <summary>
            Goes up by one everytime the player eats a cake slice
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Enchant">
            <summary>
            Goes up by one everytime the player enchants an item
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.FillCauldron">
            <summary>
            Goes up by one everytime the player fills a cauldron with water
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.FishCaught">
            <summary>
            Goes up by one for every fish the player caughts
            Note: "fish" is determined by the fish item group
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Jump">
            <summary>
            Goes up by one everytime the player jumps
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Leave">
            <summary>
            Goes up by one when the player leaves the world
            Note: You can ofcourse first check for the score once the player has logged back into the world
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.MobKills">
            <summary>
            Goes up by one when the player kills an entity
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.PlayNote">
            <summary>
            Goes up by one everytime the player plays a note on a noteblock
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.PlayMinute">
            <summary>
            Goes up by one every minute
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.PlayRecord">
            <summary>
            Goes up by one when the player inserts a record into a jukebox
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.PlayerKills">
            <summary>
            Goes up by one everytime the player kills another player
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.PotFlower">
            <summary>
            Goes up by one everytime the player pots a flower in a flower pot
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Sleep">
            <summary>
            Goes up by one per tick the player has been in a bed
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.SneakTime">
            <summary>
            Goes up by one per tick while the player is sneaking / shifting / crouching
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.TuneNote">
            <summary>
            Goes up by one everytime the player tunes a noteblock
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.UseCauldron">
            <summary>
            Goes up by one everytime the player uses a cauldron
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.TotalKills">
            <summary>
            Goes up by one everyime the player kills an entity
            ...Yep... there are 2 scoreboard objectives for this
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.XP">
            <summary>
            The number of xp the player has
            (This is a readonly objective type)
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Air">
            <summary>
            The number of air bubbles the player has
            (This is a readonly objective type)
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Armor">
            <summary>
            The number of armor bars the player has
            (This is a readonly objective type)
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Health">
            <summary>
            The number of hearts the player has
            (Measured in half hearts)
            (This is a readonly objective type)
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Trigger">
            <summary>
            An objective the player self can change with /trigger
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Dummy">
            <summary>
            An objective which doesnt go up/down on its own.
            Its value can only be altered with commands
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Food">
            <summary>
            The number of food bars the player has
            (Measured in half food bars)
            (This is a readonly objective type)
            </summary>
        </member>
        <member name="P:SharpCraft.ID.Objective.Level">
            <summary>
            The number of levels the player has
            (This is a readonly objective type)
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds">
            <summary>
            A list of all sounds in the game
            This list can be used in /playsound and /stopsound commands
            <see cref="M:SharpCraft.Function.PlayerCommands.ClassSound.Play(SharpCraft.Selector,System.String,SharpCraft.ID.SoundSource,SharpCraft.Coords,System.Double,System.Double,System.Double)"/> and <see cref="M:SharpCraft.Function.PlayerCommands.ClassSound.Stop(SharpCraft.Selector,System.Nullable{SharpCraft.ID.SoundSource},System.String)"/>
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds.Ambient">
            <summary>
            Ambient sounds
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds.Ambient.Underwater">
            <summary>
            sounds from underwater
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds.Block">
            <summary>
            block sounds
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds.Entity">
            <summary>
            entity sounds
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds.Item">
            <summary>
            item sounds
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds.Music">
            <summary>
            music
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds.MusicDisc">
            <summary>
            music discs music
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds.Toast">
            <summary>
            advancement/new recipe toast sounds
            </summary>
        </member>
        <member name="T:SharpCraft.ID.Sounds.Weather">
            <summary>
            weather sounds
            </summary>
        </member>
        <member name="T:SharpCraft.Advancement">
            <summary>
            A object used to create <see cref="T:SharpCraft.Advancement"/>s
            </summary>
        </member>
        <member name="M:SharpCraft.Advancement.#ctor(System.String)">
            <summary>
            Creates an <see cref="T:SharpCraft.Advancement"/> object with the given string
            Used to run <see cref="T:SharpCraft.Advancement"/> which doesnt have an object
            use <see cref="M:SharpCraft.Packspace.NewAdvancement(System.String,SharpCraft.JSON[],SharpCraft.JSON[],SharpCraft.JSONObjects.Item,System.String,SharpCraft.Advancement.Requirement,SharpCraft.Advancement.Reward,SharpCraft.ID.AdvancementFrame,System.Boolean,System.Boolean,System.Boolean)"/> to create a new <see cref="T:SharpCraft.Advancement"/>
            </summary>
            <param name="advancement">An string path to and <see cref="T:SharpCraft.Advancement"/></param>
        </member>
        <member name="T:SharpCraft.Advancement.Trigger">
            <summary>
            An <see cref="T:System.Object"/> which triggers if the given thing is true
            </summary>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:SharpCraft.Advancement.Trigger"/>
            </summary>
            <param name="setName">The <see cref="T:SharpCraft.Advancement.Trigger"/>'s name. If empty its auto generated</param>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.BredAnimals(SharpCraft.JSONObjects.Entity,SharpCraft.JSONObjects.Entity,SharpCraft.JSONObjects.Entity)">
            <summary>
            Triggered when a player has bred 2 <see cref="F:SharpCraft.Advancement.Trigger.Entity"/>s
            </summary>
            <param name="parent">The parent <see cref="F:SharpCraft.Advancement.Trigger.Entity"/></param>
            <param name="partner">The partner <see cref="F:SharpCraft.Advancement.Trigger.Entity"/></param>
            <param name="child">The child <see cref="F:SharpCraft.Advancement.Trigger.Entity"/></param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.BrewedPotion(System.Nullable{SharpCraft.ID.Potion})">
            <summary>
            Triggered when a player takes an item out of a brewing stand
            </summary>
            <param name="potion">The potion effect of the taken potion</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.ChangedDimension(System.Nullable{SharpCraft.ID.Dimension},System.Nullable{SharpCraft.ID.Dimension})">
            <summary>
            Triggered when a player travels from one dimension into another
            </summary>
            <param name="tpTo">The start dimension</param>
            <param name="tpFrom">The go to dimension</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.ConstructBeacon(SharpCraft.Range)">
            <summary>
            Triggerd when a beacon close to the player activates
            </summary>
            <param name="layers">The layers the beacon has</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.ConsumeItem(SharpCraft.JSONObjects.Item)">
            <summary>
            Triggered when the player consumes an <see cref="F:SharpCraft.Advancement.Trigger.Item"/>
            </summary>
            <param name="consumedItem">the <see cref="F:SharpCraft.Advancement.Trigger.Item"/> the player consumed</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.CuredZombieVillager(SharpCraft.JSONObjects.Entity,SharpCraft.JSONObjects.Entity)">
            <summary>
            Triggered when the player cures a zombie villager
            </summary>
            <param name="zombie">the zombie before the convertion</param>
            <param name="villager">the villager after the convertion</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.EffectsChanged(SharpCraft.JSONObjects.Effect[])">
            <summary>
            Triggered when the player gets an effect
            </summary>
            <param name="effects">the effect(s) the player has</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.EnchantedItem(SharpCraft.JSONObjects.Item,SharpCraft.Range)">
            <summary>
            Triggered when the player enchants an <see cref="F:SharpCraft.Advancement.Trigger.Item"/>
            </summary>
            <param name="enchantedItem">the new enchanted <see cref="F:SharpCraft.Advancement.Trigger.Item"/></param>
            <param name="level">the amount of levels the player used to enchant</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.EnterBlock(SharpCraft.JSONObjects.Block)">
            <summary>
            Triggered every tick and for each block the player is in
            </summary>
            <param name="enterBlock">The <see cref="F:SharpCraft.Advancement.Trigger.Block"/> the player is in</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.EntityHurtPlayer(SharpCraft.JSONObjects.Damage)">
            <summary>
            Triggered when an <see cref="F:SharpCraft.Advancement.Trigger.Entity"/> hurts the player
            </summary>
            <param name="damage">the type of damage</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.EntityKilledPlayer(SharpCraft.JSONObjects.DamageFlags)">
            <summary>
            Triggered when an entity kills the player
            </summary>
            <param name="damageFlags">the type of damage</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.Impossible">
            <summary>
            Never triggers
            </summary>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.InventoryChanged(SharpCraft.Range,SharpCraft.Range,SharpCraft.Range,SharpCraft.JSONObjects.Item[])">
            <summary>
            Triggers when the player's inventory changes
            </summary>
            <param name="occupiedSlots">The amount of slots which are in use</param>
            <param name="fullSlots">The amount of slots which are full</param>
            <param name="emptySlots">The amount of slots which are empty</param>
            <param name="items">Checks if the player's inventory has the <see cref="F:SharpCraft.Advancement.Trigger.Item"/>s</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.ItemDurabilityChanged(SharpCraft.JSONObjects.Item,SharpCraft.Range,SharpCraft.Range)">
            <summary>
            Triggered when an item in the player's inventory has been damaged
            </summary>
            <param name="item">The damaged <see cref="F:SharpCraft.Advancement.Trigger.Item"/></param>
            <param name="durability">The durability of the item</param>
            <param name="durabilityChange">the amount of durability change</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.Levitation(SharpCraft.JSONObjects.Distance,SharpCraft.Range)">
            <summary>
            Triggered every tick while the player has levitation
            </summary>
            <param name="distance">the distance from the start position</param>
            <param name="duration">the duration of the effect</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.AtLocation(SharpCraft.JSONObjects.Location)">
            <summary>
            Triggered every second for each player to check their location
            </summary>
            <param name="location">The location the player is in</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.NetherTravel(SharpCraft.JSONObjects.Location,SharpCraft.JSONObjects.Location,SharpCraft.JSONObjects.Distance)">
            <summary>
            Triggered if a player goes into the nether and back
            </summary>
            <param name="enterLocation">the start location in the overworld</param>
            <param name="exitLocation">the end location in the overworld</param>
            <param name="distance">the distance between the 2 locations</param>
            <returns></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.PlacedBlock(SharpCraft.JSONObjects.Block,SharpCraft.JSONObjects.Item,SharpCraft.JSONObjects.Location)">
            <summary>
            Triggered when the player places a <see cref="F:SharpCraft.Advancement.Trigger.Block"/>
            </summary>
            <param name="block">the newly placed <see cref="F:SharpCraft.Advancement.Trigger.Block"/></param>
            <param name="item">the used <see cref="F:SharpCraft.Advancement.Trigger.Item"/></param>
            <param name="location">the location of the block</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.PlayerHurtEntity(SharpCraft.JSONObjects.Damage,SharpCraft.JSONObjects.Entity)">
            <summary>
            triggered when the player hurts an <see cref="F:SharpCraft.Advancement.Trigger.Entity"/>
            </summary>
            <param name="damage">the damage type</param>
            <param name="entity">the damaged <see cref="F:SharpCraft.Advancement.Trigger.Entity"/></param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.PlayerKilledEntity(SharpCraft.JSONObjects.DamageFlags,SharpCraft.JSONObjects.Entity)">
            <summary>
            triggered when the player hurts an <see cref="F:SharpCraft.Advancement.Trigger.Entity"/>
            </summary>
            <param name="damage">the damage type</param>
            <param name="entity">the killed <see cref="F:SharpCraft.Advancement.Trigger.Entity"/></param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.RecipeUnlocked(SharpCraft.Recipe)">
            <summary>
            Triggered when the player unlocks a new <see cref="F:SharpCraft.Advancement.Trigger.Recipe"/>
            </summary>
            <param name="unlockedRecipe">the unlocked <see cref="F:SharpCraft.Advancement.Trigger.Recipe"/></param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.EnterBed(SharpCraft.JSONObjects.Location)">
            <summary>
            triggered when the player starts to sleep
            </summary>
            <param name="location">the location it happens at</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.SummonedEntity(SharpCraft.JSONObjects.Entity)">
            <summary>
            triggered when the player summons an <see cref="F:SharpCraft.Advancement.Trigger.Entity"/>
            </summary>
            <param name="entity">the newly summoned <see cref="F:SharpCraft.Advancement.Trigger.Entity"/></param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.TameAnimal(SharpCraft.JSONObjects.Entity)">
            <summary>
            triggered when the player tames an <see cref="F:SharpCraft.Advancement.Trigger.Entity"/>
            </summary>
            <param name="entity">the tamed <see cref="F:SharpCraft.Advancement.Trigger.Entity"/></param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.Tick">
            <summary>
            Triggers a player every tick
            </summary>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.UsedEnderEye(SharpCraft.Range)">
            <summary>
            triggered when a player uses an eye of ender
            </summary>
            <param name="distance">the distance to the stronghold</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.UsedTotem(SharpCraft.JSONObjects.Item)">
            <summary>
            triggered when a player activates a totem
            </summary>
            <param name="item">the activated totem</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.VillagerTrade(SharpCraft.JSONObjects.Entity,SharpCraft.JSONObjects.Item)">
            <summary>
            Triggered when the player trades with a villager
            </summary>
            <param name="villager">the villager traded with</param>
            <param name="item">the purchased <see cref="F:SharpCraft.Advancement.Trigger.Item"/></param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.FilledBucket(SharpCraft.JSONObjects.Item)">
            <summary>
            Triggered when the player fills a bucket
            </summary>
            <param name="item">the new bucket</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.CaughtWithRod(SharpCraft.JSONObjects.Item,SharpCraft.JSONObjects.Item,SharpCraft.JSONObjects.Entity)">
            <summary>
            Triggered when the player hits/catches something with a fishing rod
            </summary>
            <param name="item">The catched <see cref="F:SharpCraft.Advancement.Trigger.Item"/></param>
            <param name="fishingRod">the used fishing rod</param>
            <param name="entity">the hit <see cref="F:SharpCraft.Advancement.Trigger.Entity"/></param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.TridentChanneling(SharpCraft.JSONObjects.Entity[])">
            <summary>
            triggered when a player makes thunder with a trident
            </summary>
            <param name="hitEntities">the <see cref="F:SharpCraft.Advancement.Trigger.Entity"/>s hit by the lightning</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.CrossbowKill(SharpCraft.JSONObjects.Entity[])">
            <summary>
            triggered when a player kills an entity with a crossbow
            </summary>
            <param name="killEntities">the <see cref="F:SharpCraft.Advancement.Trigger.Entity"/>s killed by the crossbow</param>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/></returns>
        </member>
        <member name="M:SharpCraft.Advancement.Trigger.ToString">
            <summary>
            Returns this <see cref="T:SharpCraft.Advancement.Trigger"/> name
            </summary>
            <returns>this <see cref="T:SharpCraft.Advancement.Trigger"/>'s name</returns>
        </member>
        <member name="T:SharpCraft.Advancement.Requirement">
            <summary>
            An <see cref="T:System.Object"/> defining the needed triggers to get the <see cref="T:SharpCraft.Advancement"/>
            </summary>
        </member>
        <member name="M:SharpCraft.Advancement.Requirement.#ctor(SharpCraft.Advancement.Trigger)">
            <summary>
            Creates a <see cref="T:SharpCraft.Advancement.Requirement"/> needing one <see cref="T:SharpCraft.Advancement.Trigger"/>
            </summary>
            <param name="requiredTrigger">the <see cref="T:SharpCraft.Advancement.Trigger"/></param>
        </member>
        <member name="M:SharpCraft.Advancement.Requirement.#ctor(SharpCraft.Advancement.Trigger[],System.Boolean)">
            <summary>
            Creates a new <see cref="T:SharpCraft.Advancement.Requirement"/> with the given <see cref="T:SharpCraft.Advancement.Trigger"/>s
            </summary>
            <param name="requiredTriggers">the <see cref="T:SharpCraft.Advancement.Trigger"/>s</param>
            <param name="and">true if the player should trigger all <see cref="T:SharpCraft.Advancement.Trigger"/>s for this <see cref="T:SharpCraft.Advancement.Requirement"/>. False if only one <see cref="T:SharpCraft.Advancement.Trigger"/> is needed</param>
        </member>
        <member name="M:SharpCraft.Advancement.Requirement.#ctor(SharpCraft.Advancement.Requirement[],System.Boolean)">
            <summary>
            Creates a new <see cref="T:SharpCraft.Advancement.Requirement"/> with the given <see cref="T:SharpCraft.Advancement.Requirement"/>s
            </summary>
            <param name="requiredRequirements">the <see cref="T:SharpCraft.Advancement.Requirement"/>s</param>
            <param name="and">true if the player should trigger all <see cref="T:SharpCraft.Advancement.Requirement"/>s for this <see cref="T:SharpCraft.Advancement.Requirement"/>. False if only one <see cref="T:SharpCraft.Advancement.Requirement"/> is needed</param>
        </member>
        <member name="M:SharpCraft.Advancement.Requirement.ToString">
            <summary>
            Outputs this <see cref="T:SharpCraft.Advancement.Requirement"/> data in string format
            </summary>
            <returns>this <see cref="T:SharpCraft.Advancement.Requirement"/>'s data</returns>
        </member>
        <member name="T:SharpCraft.Advancement.Reward">
            <summary>
            an <see cref="T:System.Object"/> defining what rewards an <see cref="T:SharpCraft.Advancement"/> gives
            </summary>
        </member>
        <member name="M:SharpCraft.Advancement.Reward.#ctor(SharpCraft.Function)">
            <summary>
            Creates a new <see cref="T:SharpCraft.Advancement.Reward"/> which runs a <see cref="T:SharpCraft.Function"/>
            </summary>
            <param name="RunFunction">the <see cref="T:SharpCraft.Function"/> to run</param>
        </member>
        <member name="M:SharpCraft.Advancement.Reward.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpCraft.Advancement.Reward"/> which gives the player xp
            </summary>
            <param name="xp">the amount of xp to give</param>
        </member>
        <member name="M:SharpCraft.Advancement.Reward.#ctor(SharpCraft.Loottable)">
            <summary>
            Creates a new <see cref="T:SharpCraft.Advancement.Reward"/> which gives a <see cref="T:SharpCraft.Loottable"/>
            </summary>
            <param name="GiveLoottable">the <see cref="T:SharpCraft.Loottable"/> to give</param>
        </member>
        <member name="M:SharpCraft.Advancement.Reward.#ctor(SharpCraft.Recipe)">
            <summary>
            Creates a new <see cref="T:SharpCraft.Advancement.Reward"/> which gives the player a <see cref="T:SharpCraft.Recipe"/>
            </summary>
            <param name="GiveRecipe">the <see cref="T:SharpCraft.Recipe"/> to give</param>
        </member>
        <member name="M:SharpCraft.Advancement.Reward.ToString">
            <summary>
            Outputs this <see cref="T:SharpCraft.Advancement.Reward"/> data in string format
            </summary>
            <returns>this <see cref="T:SharpCraft.Advancement.Reward"/>'s data</returns>
        </member>
        <member name="M:SharpCraft.Advancement.Reward.op_Implicit(SharpCraft.Function)~SharpCraft.Advancement.Reward">
            <summary>
            Converts a <see cref="T:SharpCraft.Function"/> into a reward
            </summary>
            <param name="function">the <see cref="T:SharpCraft.Function"/> to convert</param>
        </member>
        <member name="M:SharpCraft.Advancement.Reward.op_Implicit(SharpCraft.Loottable)~SharpCraft.Advancement.Reward">
            <summary>
            Converts a <see cref="T:SharpCraft.Loottable"/> into a reward
            </summary>
            <param name="loottable">the <see cref="T:SharpCraft.Loottable"/> to convert</param>
        </member>
        <member name="M:SharpCraft.Advancement.Reward.op_Implicit(SharpCraft.Recipe)~SharpCraft.Advancement.Reward">
            <summary>
            Converts a <see cref="T:SharpCraft.Recipe"/> into a reward
            </summary>
            <param name="recipe">the <see cref="T:SharpCraft.Recipe"/> to convert</param>
        </member>
        <member name="M:SharpCraft.Advancement.ToString">
            <summary>
            Returns the namespace path of this <see cref="T:SharpCraft.Advancement"/>
            </summary>
            <returns>this <see cref="T:SharpCraft.Advancement"/>'s name</returns>
        </member>
        <member name="T:SharpCraft.Function">
            <summary>
            A object used to create <see cref="T:SharpCraft.Function"/>s
            </summary>
        </member>
        <member name="T:SharpCraft.Function.BlockCommands">
            <summary>
            All the block commands
            </summary>
        </member>
        <member name="M:SharpCraft.Function.BlockCommands.Add(SharpCraft.Block,SharpCraft.Coords,SharpCraft.ID.BlockAdd)">
            <summary>
            Adds a <see cref="T:SharpCraft.Block"/> at the given <see cref="T:SharpCraft.Coords"/>
            </summary>
            <param name="addBlock">the <see cref="T:SharpCraft.Block"/> to add</param>
            <param name="blockCoords">the <see cref="T:SharpCraft.Coords"/> to add it at</param>
            <param name="type">how to place the block</param>
        </member>
        <member name="M:SharpCraft.Function.BlockCommands.Fill(SharpCraft.Block,SharpCraft.Coords,SharpCraft.Coords,SharpCraft.ID.BlockFill,SharpCraft.Block)">
            <summary>
            Fills in the <see cref="T:SharpCraft.Block"/> between the two corner <see cref="T:SharpCraft.Coords"/>
            </summary>
            <param name="fillBlock">the <see cref="T:SharpCraft.Block"/> to fill with</param>
            <param name="corner1">the first corner <see cref="T:SharpCraft.Coords"/></param>
            <param name="corner2">the second corner <see cref="T:SharpCraft.Coords"/></param>
            <param name="type">how to fill the <see cref="T:SharpCraft.Block"/>s</param>
            <param name="replaceBlock">the <see cref="T:SharpCraft.Block"/>s to replace</param>
        </member>
        <member name="M:SharpCraft.Function.BlockCommands.Clone(SharpCraft.Coords,SharpCraft.Coords,SharpCraft.Coords,SharpCraft.ID.BlockClone,SharpCraft.ID.BlockCloneWay,SharpCraft.Block)">
            <summary>
            Copies the <see cref="T:SharpCraft.Block"/>s between the two corner <see cref="T:SharpCraft.Coords"/> to another <see cref="T:SharpCraft.Coords"/>
            </summary>
            <param name="corner1">the first corner <see cref="T:SharpCraft.Coords"/></param>
            <param name="corner2">the second corner <see cref="T:SharpCraft.Coords"/></param>
            <param name="copyTo">the place to copy to</param>
            <param name="type">how to copy the <see cref="T:SharpCraft.Block"/>s</param>
            <param name="way">copy rules</param>
            <param name="filteredBlock">the <see cref="T:SharpCraft.Block"/> to copy</param>
        </member>
        <member name="M:SharpCraft.Function.BlockCommands.AddItem(SharpCraft.Coords,SharpCraft.Item)">
            <summary>
            Inserts the given <see cref="T:SharpCraft.Item"/> into the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="BlockCoords">The <see cref="T:SharpCraft.Block"/> to insert into</param>
            <param name="AddItem">The <see cref="T:SharpCraft.Item"/> to insert (<see cref="F:SharpCraft.Item.Slot"/> choses the slot)</param>
        </member>
        <member name="M:SharpCraft.Function.BlockCommands.Loot(SharpCraft.Coords,SharpCraft.Loottable,System.Nullable{System.Int32})">
            <summary>
            Inserts the given <see cref="T:SharpCraft.Loottable"/> into the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="block">the <see cref="T:SharpCraft.Block"/> to input into</param>
            <param name="loot">the <see cref="T:SharpCraft.Loottable"/> to input</param>
            <param name="slot">the slot to insert the <see cref="T:SharpCraft.Loottable"/> at</param>
        </member>
        <member name="M:SharpCraft.Function.BlockCommands.Loot(SharpCraft.Coords,SharpCraft.Selector,System.Nullable{System.Int32})">
            <summary>
            Inserts the given <see cref="F:SharpCraft.Function.Entity"/>'s <see cref="T:SharpCraft.Loottable"/> into the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="block">the <see cref="T:SharpCraft.Block"/> to input into</param>
            <param name="kill">the <see cref="F:SharpCraft.Function.Entity"/>'s <see cref="T:SharpCraft.Loottable"/> to input</param>
            <param name="slot">the slot to insert the <see cref="T:SharpCraft.Loottable"/> at</param>
        </member>
        <member name="M:SharpCraft.Function.BlockCommands.Loot(SharpCraft.Coords,SharpCraft.Coords,SharpCraft.Item,System.Int32)">
            <summary>
            Inserts the given <see cref="T:SharpCraft.Block"/>'s <see cref="T:SharpCraft.Loottable"/> into the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="block">the <see cref="T:SharpCraft.Block"/> to input into</param>
            <param name="breakBlock">the <see cref="T:SharpCraft.Block"/>'s <see cref="T:SharpCraft.Loottable"/> to input</param>
            <param name="breakWith">the tool used to break the <see cref="T:SharpCraft.Block"/></param>
            <param name="slot">the slot to insert the <see cref="T:SharpCraft.Loottable"/> at</param>
        </member>
        <member name="F:SharpCraft.Function.BlockCommands.Data">
            <summary>
            The data commands
            </summary>
        </member>
        <member name="T:SharpCraft.Function.BlockCommands.ClassData">
            <summary>
            The data commands
            </summary>
        </member>
        <member name="M:SharpCraft.Function.BlockCommands.ClassData.Change(SharpCraft.Coords,SharpCraft.Block)">
            <summary>
            Adds the given data to the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="data">The data to give to the <see cref="T:SharpCraft.Block"/></param>
            <param name="place">the <see cref="T:SharpCraft.Coords"/> of the <see cref="T:SharpCraft.Block"/> to give the data to</param>
        </member>
        <member name="M:SharpCraft.Function.BlockCommands.ClassData.Change(SharpCraft.Coords,System.String,SharpCraft.ID.EntityDataModifierType,System.String)">
            <summary>
            Copies data into the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="toBlock">the <see cref="T:SharpCraft.Coords"/> of the <see cref="T:SharpCraft.Block"/> to copy the data to</param>
            <param name="toDataPath">the datapath to copy to</param>
            <param name="modifierType">The way to data should be copied in</param>
            <param name="copyData">The data to insert</param>
        </member>
        <member name="M:SharpCraft.Function.BlockCommands.ClassData.Change(SharpCraft.Coords,System.String,System.Int32,System.String)">
            <summary>
            Copies data into the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="toBlock">the <see cref="T:SharpCraft.Coords"/> of the <see cref="T:SharpCraft.Block"/> to copy the data to</param>
            <param name="toDataPath">the datapath to copy to</param>
            <param name="index">The index to copy the data to</param>
            <param name="copyData">The data to insert</param>
        </member>
        <member name="M:SharpCraft.Function.BlockCommands.ClassData.Remove(SharpCraft.Coords,System.String)">
            <summary>
            Removes the data from the <see cref="T:SharpCraft.Block"/> at the given datapath
            </summary>
            <param name="dataPath">The datapath</param>
            <param name="place">the <see cref="T:SharpCraft.Coords"/> of the <see cref="T:SharpCraft.Block"/> to remove the data from</param>
        </member>
        <member name="M:SharpCraft.Function.BlockCommands.ClassData.Get(SharpCraft.Coords,System.String,System.Double)">
            <summary>
            Gets the numeric data from the datapath from the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="place">the <see cref="T:SharpCraft.Coords"/> of the <see cref="T:SharpCraft.Block"/> to get the data from</param>
            <param name="dataPath">the datapath to the data</param>
            <param name="scale">the number to multiply the numeric value with</param>
        </member>
        <member name="M:SharpCraft.Function.BlockCommands.ClassData.Copy(SharpCraft.Coords,System.String,SharpCraft.ID.EntityDataModifierType,SharpCraft.Selector,System.String)">
            <summary>
            Copies data into the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="toBlock">the <see cref="T:SharpCraft.Coords"/> of the <see cref="T:SharpCraft.Block"/> to copy the data to</param>
            <param name="toDataPath">the datapath to copy to</param>
            <param name="modifierType">The way to data should be copied in</param>
            <param name="fromSelector">the <see cref="F:SharpCraft.Function.Entity"/> to copy the data from</param>
            <param name="fromDataPath">The datapath to copy from</param>
        </member>
        <member name="M:SharpCraft.Function.BlockCommands.ClassData.Copy(SharpCraft.Coords,System.String,SharpCraft.ID.EntityDataModifierType,SharpCraft.Coords,System.String)">
            <summary>
            Copies data into the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="toBlock">the <see cref="T:SharpCraft.Coords"/> of the <see cref="T:SharpCraft.Block"/> to copy the data to</param>
            <param name="toDataPath">the datapath to copy to</param>
            <param name="modifierType">The way to data should be copied in</param>
            <param name="fromBlock">the <see cref="T:SharpCraft.Coords"/> of the <see cref="T:SharpCraft.Block"/> to copy the data from</param>
            <param name="fromDataPath">The datapath to copy from</param>
        </member>
        <member name="M:SharpCraft.Function.BlockCommands.ClassData.Copy(SharpCraft.Coords,System.String,System.Int32,SharpCraft.Coords,System.String)">
            <summary>
            Copies data into the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="toBlock">the <see cref="T:SharpCraft.Coords"/> of the <see cref="T:SharpCraft.Block"/> to copy the data to</param>
            <param name="toDataPath">the datapath to copy to</param>
            <param name="index">The index to copy the data to</param>
            <param name="fromBlock">the <see cref="T:SharpCraft.Coords"/> of the <see cref="T:SharpCraft.Block"/> to copy the data from</param>
            <param name="fromDataPath">The datapath to copy from</param>
        </member>
        <member name="M:SharpCraft.Function.BlockCommands.ClassData.Copy(SharpCraft.Coords,System.String,System.Int32,SharpCraft.Selector,System.String)">
            <summary>
            Copies data into the <see cref="T:SharpCraft.Block"/>
            </summary>
            <param name="toBlock">the <see cref="T:SharpCraft.Coords"/> of the <see cref="T:SharpCraft.Block"/> to copy the data to</param>
            <param name="toDataPath">the datapath to copy to</param>
            <param name="index">The index to copy the data to</param>
            <param name="fromSelector">the <see cref="F:SharpCraft.Function.Entity"/> to copy the data from</param>
            <param name="fromDataPath">The datapath to copy from</param>
        </member>
        <member name="T:SharpCraft.Function.EntityCommands">
            <summary>
            All the entity commands
            </summary>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.Add(SharpCraft.Entity.BaseEntity)">
            <summary>
            Adds the specified entity to the world
            </summary>
            <param name="addEntity">The entity to add to the world</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.Add(SharpCraft.Entity.BaseEntity,SharpCraft.Coords)">
            <summary>
            Adds the specified entity to the world at the specified location
            </summary>
            <param name="addEntity">The entity to add to the world</param>
            <param name="coords">The coords to add the entity at</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.Kill(SharpCraft.Selector)">
            <summary>
            Kills all entities selected by the selector
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.Selector"/> to use</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.Spread(SharpCraft.Selector,SharpCraft.Coords,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Spreads all entities selected by the selector around the specified location
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="center">The center to spread around</param>
            <param name="spreadDistanceMin">the minimum distance the player can be spreaded from the <paramref name="center"/></param>
            <param name="spreadDistanceMax">the maximum distance the player can be spreaded from the <paramref name="center"/></param>
            <param name="spreadTeams">If teams should be placed close to each other</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.JoinTeam(SharpCraft.Selector,SharpCraft.Team)">
            <summary>
            Makes the selected entities join the specified <see cref="T:SharpCraft.Team"/>
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="team">The team they should join</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.Enchant(SharpCraft.Selector,SharpCraft.ID.Enchant,System.Int32)">
            <summary>
            Enchants the selected entities hand item
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="enchant">the enchantment to enchant with</param>
            <param name="level">the level of the enchantment</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.Teleport(SharpCraft.Selector)">
            <summary>
            Teleports the selected entities to location executed from
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.Selector"/> to use</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.Teleport(SharpCraft.Selector,SharpCraft.Coords)">
            <summary>
            Teleports the selected entities to the specified location
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="tpTo">The location to teleport the entities to</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.Teleport(SharpCraft.Selector,SharpCraft.Coords,SharpCraft.Rotation)">
            <summary>
            Teleports the selected entities to the specified location
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="tpTo">The location to teleport the entities to</param>
            <param name="rotation">The rotation to teleport the selected entities to</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.Teleport(SharpCraft.Selector,SharpCraft.Coords,SharpCraft.Selector,System.Nullable{SharpCraft.ID.FacingAnchor})">
            <summary>
            Teleports the selected entities to the specified location facing another entity
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="tpTo">The location to teleport the entities to</param>
            <param name="facing">The selector the entities should look at</param>
            <param name="facingPart">The part of the entity to look at</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.Teleport(SharpCraft.Selector,SharpCraft.Coords,SharpCraft.Coords)">
            <summary>
            Teleports the selected entities to the specified location facing a location
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="tpTo">The location to teleport the entities to</param>
            <param name="facing">The block to look at</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.Teleport(SharpCraft.Selector,SharpCraft.Selector)">
            <summary>
            Teleports the selected entities to another entity
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="toSelector">The entity to teleport to</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.Teleport(SharpCraft.Selector,SharpCraft.Selector,SharpCraft.Selector,System.Nullable{SharpCraft.ID.FacingAnchor})">
            <summary>
            Teleports the selected entities to another entity facing another entity
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="toSelector">The entity to teleport to</param>
            <param name="facing">The entity to look at</param>
            <param name="facingPart">The part to look at</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.Teleport(SharpCraft.Selector,SharpCraft.Selector,SharpCraft.Coords)">
            <summary>
            Teleports the selected entities to another entity facing a block
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="toSelector">The entity to teleport to</param>
            <param name="facing">The block to look at</param>
        </member>
        <member name="F:SharpCraft.Function.EntityCommands.Data">
            <summary>
            All commands using entity data
            </summary>
        </member>
        <member name="T:SharpCraft.Function.EntityCommands.ClassData">
            <summary>
            All commands using entity data
            </summary>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassData.Change(SharpCraft.Selector,SharpCraft.Entity.BaseEntity)">
            <summary>
            Adds the data from <paramref name="newEntity"/> to the selected entity
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="newEntity">the new data to add to the entity</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassData.Change(SharpCraft.Selector,System.String,System.String,SharpCraft.ID.EntityDataModifierType)">
            <summary>
            Adds the <paramref name="copyData"/> to the entity's data at the specified data path
            </summary>
            <param name="toSelector">The entity to copy to</param>
            <param name="toDataPath">The data path to copy to</param>
            <param name="copyData">The data to insert</param>
            <param name="modifierType">The way to add the data</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassData.Change(SharpCraft.Selector,System.String,System.String,System.Int32)">
            <summary>
            Adds the <paramref name="copyData"/> to the entity's data at the specified data path at the specified index of the array
            </summary>
            <param name="toSelector">The entity to copy to</param>
            <param name="toDataPath">The data path to copy to</param>
            <param name="copyData">The data to insert</param>
            <param name="index">the index to insert the data at</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassData.Get(SharpCraft.Selector,System.String,System.Double)">
            <summary>
            Gets a numeric value from the selected entity's data at the given path
            </summary>
            <param name="selector">The <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="dataPath">The path to the data to get the number from</param>
            <param name="scale">The number to multiply the output number by</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassData.Copy(SharpCraft.Selector,System.String,SharpCraft.Selector,System.String,SharpCraft.ID.EntityDataModifierType)">
            <summary>
            Copies data from one entity to another entity
            </summary>
            <param name="toSelector">The entity to copy the data to</param>
            <param name="toDataPath">The data path to copy to</param>
            <param name="fromSelector">The entity to copy from</param>
            <param name="fromDataPath">The data path to copy from</param>
            <param name="modifierType">The way to add the data</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassData.Copy(SharpCraft.Selector,System.String,SharpCraft.Coords,System.String,SharpCraft.ID.EntityDataModifierType)">
            <summary>
            Copies data from a block to an entity
            </summary>
            <param name="toSelector">The entity to copy the data to</param>
            <param name="toDataPath">The data path to copy to</param>
            <param name="fromBlock">The block to copy from</param>
            <param name="fromDataPath">The data path to copy from</param>
            <param name="modifierType">The way to add the data</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassData.Copy(SharpCraft.Selector,System.String,SharpCraft.Coords,System.String,System.Int32)">
            <summary>
            Copies data from a block to an entity at the data path's specified index
            </summary>
            <param name="toSelector">The entity to copy the data to</param>
            <param name="toDataPath">The data path to copy to</param>
            <param name="fromBlock">The block to copy from</param>
            <param name="fromDataPath">The data path to copy from</param>
            <param name="index">the index to copy to</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassData.Copy(SharpCraft.Selector,System.String,SharpCraft.Selector,System.String,System.Int32)">
            <summary>
            Copies data from one entity to another entity at the data path's specified index
            </summary>
            <param name="toSelector">The entity to copy the data to</param>
            <param name="toDataPath">The data path to copy to</param>
            <param name="fromSelector">The entity to copy from</param>
            <param name="fromDataPath">The data path to copy from</param>
            <param name="index">the index to copy to</param>
        </member>
        <member name="F:SharpCraft.Function.EntityCommands.Tag">
            <summary>
            All commands for entity tags
            </summary>
        </member>
        <member name="T:SharpCraft.Function.EntityCommands.ClassTag">
            <summary>
            All commands for entity tags
            </summary>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassTag.Add(SharpCraft.Selector,SharpCraft.Tag)">
            <summary>
            Adds the specified tag the selected entities
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="tagName">The <see cref="F:SharpCraft.Function.EntityCommands.Tag"/> to add</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassTag.Remove(SharpCraft.Selector,SharpCraft.Tag)">
            <summary>
            removes the specified tag the selected entities
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="tagName">The <see cref="F:SharpCraft.Function.EntityCommands.Tag"/> to remove</param>
        </member>
        <member name="F:SharpCraft.Function.EntityCommands.Score">
            <summary>
            All commands for entity scores
            </summary>
        </member>
        <member name="T:SharpCraft.Function.EntityCommands.ClassScore">
            <summary>
            All commands for entity scores
            </summary>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassScore.Add(SharpCraft.Selector,SharpCraft.ScoreObject,System.Int32)">
            <summary>
            adds the <paramref name="amount"/> to the selected entities' score in <paramref name="objective"/>
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="objective">the <see cref="T:SharpCraft.ScoreObject"/> to change the score in</param>
            <param name="amount">the amount to add to the score. If the number is negative its removed instead</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassScore.Set(SharpCraft.Selector,SharpCraft.ScoreObject,System.Int32)">
            <summary>
            sets the selected entities' score in <paramref name="objective"/> to the specified <paramref name="amount"/>
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="objective">the <see cref="T:SharpCraft.ScoreObject"/> to change the score in</param>
            <param name="amount">the amount to set the score to</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassScore.Operation(SharpCraft.Selector,SharpCraft.ScoreObject,SharpCraft.ID.Operation,SharpCraft.Selector,SharpCraft.ScoreObject)">
            <summary>
            Does math with two scores and saves the result in one of the entities' score
            </summary>
            <param name="mainSelector">The first entity (The result will be stored in this entity's score)</param>
            <param name="mainObjective">The first entity's <see cref="T:SharpCraft.ScoreObject"/> (The result will be stored in here)</param>
            <param name="operationType">The operation to do between the numbers</param>
            <param name="otherSelector">The other entity</param>
            <param name="otherObjective">The other entity's <see cref="T:SharpCraft.ScoreObject"/></param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassScore.Reset(SharpCraft.Selector,SharpCraft.ScoreObject)">
            <summary>
            Resets the selected entities scores
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="objective">if a <see cref="T:SharpCraft.ScoreObject"/> is specified only the score in the specified <see cref="T:SharpCraft.ScoreObject"/> will be reseted</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassScore.Get(SharpCraft.Selector,SharpCraft.ScoreObject)">
            <summary>
            Gets the selected entity's score and outputs it
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="objective">the <see cref="T:SharpCraft.ScoreObject"/> to take the score from</param>
        </member>
        <member name="F:SharpCraft.Function.EntityCommands.Effect">
            <summary>
            All commands for effects
            </summary>
        </member>
        <member name="T:SharpCraft.Function.EntityCommands.ClassEffect">
            <summary>
            All commands for effects
            </summary>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassEffect.Clear(SharpCraft.Selector,System.Nullable{SharpCraft.ID.Effect})">
            <summary>
            Clears the specified effect from the selected entities
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="effect">the effect to remove</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassEffect.Give(SharpCraft.Selector,SharpCraft.ID.Effect,System.Int32,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Gives the specified effect to the selected entities
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="effect">the effect to give</param>
            <param name="time">the duration of the effect</param>
            <param name="amplifier">the amplifier of the effect (0 = level 1)</param>
            <param name="hideParticles">if the particles from the effect should be hidden or not</param>
        </member>
        <member name="F:SharpCraft.Function.EntityCommands.Item">
            <summary>
            All commands for items
            </summary>
        </member>
        <member name="T:SharpCraft.Function.EntityCommands.ClassItem">
            <summary>
            All commands for items
            </summary>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassItem.Armor(SharpCraft.Selector,SharpCraft.Item,SharpCraft.ID.ArmorSlot)">
            <summary>
            Changes the selected entities' armor to the specified item
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="giveItem">the <see cref="F:SharpCraft.Function.EntityCommands.Item"/> to give</param>
            <param name="armorSlot">the armor slot to put the item in</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassItem.Weapon(SharpCraft.Selector,SharpCraft.Item,System.Boolean)">
            <summary>
            Changes the selected entities' weapon to the specified item
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="giveItem">the <see cref="F:SharpCraft.Function.EntityCommands.Item"/> to give</param>
            <param name="offHand">If its the offhand weapon which should change</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassItem.Container(SharpCraft.Selector,SharpCraft.Item)">
            <summary>
            Adds the specified item to the selected entities' inventory
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="addItem">the item to add to the entities. <see cref="F:SharpCraft.Item.Slot"/> is used to specify the slot</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassItem.VillagerInventory(SharpCraft.Selector,SharpCraft.Item)">
            <summary>
            Adds the specified item to the selected villagers' inventory
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="addItem">the item to add to the villager. <see cref="F:SharpCraft.Item.Slot"/> is used to specify the slot</param>
        </member>
        <member name="F:SharpCraft.Function.EntityCommands.ClassItem.Horse">
            <summary>
            all commands for items in horses
            </summary>
        </member>
        <member name="T:SharpCraft.Function.EntityCommands.ClassItem.ClassHorse">
            <summary>
            all commands for items in horses
            </summary>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassItem.ClassHorse.Inventory(SharpCraft.Selector,SharpCraft.Item)">
            <summary>
            Adds the specified item to the selected horses' inventory
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="giveItem">the item to add to the horses. <see cref="F:SharpCraft.Item.Slot"/> is used to specify the slot</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassItem.ClassHorse.Saddle(SharpCraft.Selector,SharpCraft.Item)">
            <summary>
            Makes the specified item the selected horses' saddles
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="giveItem">the item to add to the horses.</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassItem.ClassHorse.Armor(SharpCraft.Selector,SharpCraft.Item)">
            <summary>
            Makes the specified item the selected horses' armor
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="giveItem">the item to add to the horses.</param>
        </member>
        <member name="M:SharpCraft.Function.EntityCommands.ClassItem.ClassHorse.Chest(SharpCraft.Selector,SharpCraft.Item)">
            <summary>
            Makes the specified item the selected horses' chest
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="giveItem">the item to add to the horses.</param>
        </member>
        <member name="T:SharpCraft.Function.ExecuteCommands">
            <summary>
            All the execute commands
            </summary>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.Stop">
            <summary>
            Marks that the execute command shouldnt have any run command
            </summary>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.Align(System.String)">
            <summary>
            Aligns the execute coordinates on the given axis
            </summary>
            <param name="axis">The axis to align to insert x and/or z and/or y</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.Align(System.Boolean)">
            <summary>
            Auto aligns the execute coordinates to all the axis
            </summary>
            <param name="center">True if it should center to the block</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.At(SharpCraft.Selector)">
            <summary>
            Executes at the given <see cref="T:SharpCraft.Selector"/>
            </summary>
            <param name="atEntity">The <see cref="T:SharpCraft.Selector"/> to execute at</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.At">
            <summary>
            Executes at using the @s <see cref="T:SharpCraft.Selector"/>
            </summary>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.As(SharpCraft.Selector)">
            <summary>
            Executes as the given <see cref="T:SharpCraft.Selector"/>
            </summary>
            <param name="asEntity">The <see cref="T:SharpCraft.Selector"/> to execute as</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.IfBlock(SharpCraft.Coords,SharpCraft.Block,System.Boolean)">
            <summary>
            Executes if the given <see cref="F:SharpCraft.Function.Block"/> is at the <see cref="T:SharpCraft.Coords"/>
            </summary>
            <param name="blockCoords">the <see cref="T:SharpCraft.Coords"/> of the block</param>
            <param name="findBlock">the <see cref="F:SharpCraft.Function.Block"/> to find</param>
            <param name="want">false if it should execute when it's false</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.IfBlocks(SharpCraft.Coords,SharpCraft.Coords,SharpCraft.Coords,System.Boolean,System.Boolean)">
            <summary>
            Executes if the <see cref="F:SharpCraft.Function.Block"/>s between the 2 corners are the same as the <see cref="F:SharpCraft.Function.Block"/>s at the <paramref name="testCoords"/>
            </summary>
            <param name="corner1">The first corner</param>
            <param name="corner2">The second corner</param>
            <param name="testCoords">The coordinate to check at</param>
            <param name="masked">true if it should ignore air blocks</param>
            <param name="want">false if it should execute when it's false</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.IfEntity(SharpCraft.Selector,System.Boolean)">
            <summary>
            Executes if the <paramref name="entitySelector"/> finds an <see cref="F:SharpCraft.Function.Entity"/>
            </summary>
            <param name="entitySelector">The <see cref="T:SharpCraft.Selector"/> used to search for entities</param>
            <param name="want">false if it should execute when it's false</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.IfData(SharpCraft.Selector,System.String,System.Boolean)">
            <summary>
            Executes if the <see cref="F:SharpCraft.Function.Entity"/> selected with <paramref name="dataPath"/> has the given datapath
            </summary>
            <param name="entitySelector">The <see cref="T:SharpCraft.Selector"/> which selects the entity</param>
            <param name="dataPath">The datapath the entity should contain</param>
            <param name="want">false if it should execute when it's false</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.IfData(SharpCraft.Coords,System.String,System.Boolean)">
            <summary>
            Executes if the <see cref="F:SharpCraft.Function.Block"/> at the <see cref="T:SharpCraft.Coords"/> has the given datapath
            </summary>
            <param name="block">the <see cref="T:SharpCraft.Coords"/> of the <see cref="F:SharpCraft.Function.Block"/></param>
            <param name="dataPath">The datapath the entity should contain</param>
            <param name="want">false if it should execute when it's false</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.IfScore(SharpCraft.Selector,SharpCraft.ScoreObject,SharpCraft.ID.IfScoreOperation,SharpCraft.Selector,SharpCraft.ScoreObject,System.Boolean)">
            <summary>
            Executes if the <paramref name="mainSelector"/>'s score value is <paramref name="operation"/> than <paramref name="otherSelector"/>'s score value
            </summary>
            <param name="mainSelector">The first <see cref="T:SharpCraft.Selector"/></param>
            <param name="mainObject">The first <see cref="T:SharpCraft.Selector"/>'s <see cref="T:SharpCraft.ScoreObject"/></param>
            <param name="operation">The operation used to check the scores</param>
            <param name="otherSelector">The second <see cref="T:SharpCraft.Selector"/></param>
            <param name="otherObject">The second <see cref="T:SharpCraft.Selector"/>'s <see cref="T:SharpCraft.ScoreObject"/></param>
            <param name="want">false if it should execute when it's false</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.IfScore(SharpCraft.Selector,SharpCraft.ScoreObject,SharpCraft.Range,System.Boolean)">
            <summary>
            Executes if the given <see cref="T:SharpCraft.Selector"/>'s score is in the given <see cref="T:SharpCraft.Range"/>
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.Selector"/>'s score to check</param>
            <param name="scoreObject">the <see cref="T:SharpCraft.ScoreObject"/> to containing the score</param>
            <param name="range">the <see cref="T:SharpCraft.Range"/> the score should be in</param>
            <param name="want">false if it should execute when it's false</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.Positioned(SharpCraft.Coords)">
            <summary>
            Executes at the given position
            </summary>
            <param name="position">the <see cref="T:SharpCraft.Coords"/> to execute at</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.Positioned(SharpCraft.Selector)">
            <summary>
            Executes at the given <see cref="T:SharpCraft.Selector"/>'s <see cref="T:SharpCraft.Coords"/>
            </summary>
            <param name="entity">The <see cref="T:SharpCraft.Selector"/> to execute at</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.Store(SharpCraft.Selector,System.String,SharpCraft.ID.StoreTypes,System.Double,System.Boolean)">
            <summary>
            Stores the command's success output inside the <see cref="F:SharpCraft.Function.Entity"/>
            </summary>
            <param name="entity">the <see cref="T:SharpCraft.Selector"/> which choses the <see cref="F:SharpCraft.Function.Entity"/></param>
            <param name="dataPath">the datapath to store the output in</param>
            <param name="dataType">the path to the place to store the score</param>
            <param name="scale">the number the output should be multiplied with before being inserted</param>
            <param name="storeSucces">true if it only should store if the command was successfull</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.Store(SharpCraft.Coords,System.String,SharpCraft.ID.StoreTypes,System.Double,System.Boolean)">
            <summary>
            Stores the command's success output inside the <see cref="F:SharpCraft.Function.Block"/>
            </summary>
            <param name="blockCoords">the <see cref="T:SharpCraft.Coords"/> of the <see cref="F:SharpCraft.Function.Block"/> to store the output in</param>
            <param name="dataPath">the datapath to store the output in</param>
            <param name="dataType">the path to the place to store the score</param>
            <param name="scale">the number the output should be multiplied with before being inserted</param>
            <param name="storeSucces">true if it only should store if the command was successfull</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.Store(SharpCraft.Selector,SharpCraft.ScoreObject,System.Boolean)">
            <summary>
            Stores the command's success output inside the given <see cref="F:SharpCraft.Function.Entity"/>'s <see cref="T:SharpCraft.ScoreObject"/>
            </summary>
            <param name="entity">The <see cref="F:SharpCraft.Function.Entity"/> to store in</param>
            <param name="scoreObject">The <see cref="T:SharpCraft.ScoreObject"/> to store in</param>
            <param name="storeSucces">true if it only should store if the command was successfull</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.Store(SharpCraft.BossBar,System.Boolean,System.Boolean)">
            <summary>
            Stores the command's success output inside the given <see cref="T:SharpCraft.BossBar"/>
            </summary>
            <param name="bossBar">The <see cref="T:SharpCraft.BossBar"/> to store the output in</param>
            <param name="value">true if it should store the output in the value, false if it should store it as maxvalue</param>
            <param name="storeSucces">true if it only should store if the command was successfull</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.Facing(SharpCraft.Selector,SharpCraft.ID.FacingAnchor)">
            <summary>
            Executes rotated in the direction of the given <see cref="F:SharpCraft.Function.Entity"/>
            </summary>
            <param name="entity">the <see cref="F:SharpCraft.Function.Entity"/> it should be rotated at</param>
            <param name="facing">the part of the <see cref="F:SharpCraft.Function.Entity"/> to be faced at</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.Facing(SharpCraft.Coords)">
            <summary>
            Executes rotated in the direction of the given <see cref="T:SharpCraft.Coords"/>
            </summary>
            <param name="coords">the <see cref="T:SharpCraft.Coords"/> to be rotated at</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.Rotated(SharpCraft.Rotation)">
            <summary>
            Executes rotated
            </summary>
            <param name="rotation">the <see cref="T:SharpCraft.Rotation"/> to execute with</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.Rotated(SharpCraft.Selector)">
            <summary>
            Executes rotated as the given <see cref="F:SharpCraft.Function.Entity"/>
            </summary>
            <param name="entity">the <see cref="F:SharpCraft.Function.Entity"/> to execute rotated as</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.Dimension(SharpCraft.ID.Dimension)">
            <summary>
            Executes in the given dimension
            </summary>
            <param name="dimension">The dimension</param>
        </member>
        <member name="M:SharpCraft.Function.ExecuteCommands.Anchored(SharpCraft.ID.FacingAnchor)">
            <summary>
            The place to anchor local <see cref="T:SharpCraft.Coords"/> at 
            </summary>
            <param name="Anchor">The place</param>
        </member>
        <member name="T:SharpCraft.Function.FunctionCreater">
            <summary>
            Used to add commands to the given function
            </summary>
            <param name="function">the function to give the commands to</param>
        </member>
        <member name="T:SharpCraft.Function.FunctionWriter">
            <summary>
            A object used to write function files
            </summary>
        </member>
        <member name="F:SharpCraft.Function.FunctionWriter.LineWriter">
            <summary>
            The streamwriter used to write the commands
            </summary>
        </member>
        <member name="F:SharpCraft.Function.FunctionWriter.TempCommand">
            <summary>
            the command line being written right now.
            execute commands are written onto here before the command to execute has been specified.
            </summary>
        </member>
        <member name="F:SharpCraft.Function.FunctionWriter.HasExecute">
            <summary>
            If the tempcommand is an execute command
            (If this is false, the next time a execute command is added to the command being written right now, it will add "execute" to the command)
            (If this is true "run" will be added to the command the next time a none execute command is added)
            </summary>
        </member>
        <member name="F:SharpCraft.Function.FunctionWriter.LineNumber">
            <summary>
            The line being written to right now
            </summary>
        </member>
        <member name="F:SharpCraft.Function.FunctionWriter.FunctionName">
            <summary>
            The name of the function this <see cref="T:SharpCraft.Function.FunctionWriter"/> is in
            </summary>
        </member>
        <member name="F:SharpCraft.Function.FunctionWriter.NameSpaceName">
            <summary>
            The namespace of the function this <see cref="T:SharpCraft.Function.FunctionWriter"/> is in
            </summary>
        </member>
        <member name="M:SharpCraft.Function.FunctionWriter.Add(System.String,System.Boolean)">
            <summary>
            Adds the specifed command to the <see cref="F:SharpCraft.Function.FunctionWriter.TempCommand"/>
            </summary>
            <param name="Command">The command to add</param>
            <param name="Execute">If the command is an execute command or not</param>
        </member>
        <member name="M:SharpCraft.Function.FunctionWriter.NewLine">
            <summary>
            Writes the <see cref="F:SharpCraft.Function.FunctionWriter.TempCommand"/> to the function file and gets ready for a new command
            </summary>
        </member>
        <member name="M:SharpCraft.Function.FunctionWriter.CopyState">
            <summary>
            Copies the <see cref="T:SharpCraft.Function.FunctionWriter"/>'s <see cref="F:SharpCraft.Function.FunctionWriter.TempCommand"/> and <see cref="F:SharpCraft.Function.FunctionWriter.HasExecute"/>
            (This overwrites the last copied state)
            </summary>
        </member>
        <member name="M:SharpCraft.Function.FunctionWriter.PasteState">
            <summary>
            Pastes the state copied from <see cref="M:SharpCraft.Function.FunctionWriter.CopyState"/>
            Note this overwrites the <see cref="T:SharpCraft.Function.FunctionWriter"/>'s <see cref="F:SharpCraft.Function.FunctionWriter.TempCommand"/> and <see cref="F:SharpCraft.Function.FunctionWriter.HasExecute"/> with the copied things
            </summary>
        </member>
        <member name="F:SharpCraft.Function.Writer">
            <summary>
            The thing used to write this function
            </summary>
        </member>
        <member name="F:SharpCraft.Function.FunctionGroup">
            <summary>
            null if the function isnt a group of functions
            The name of the group which contaions functions
            </summary>
        </member>
        <member name="F:SharpCraft.Function.Parent">
            <summary>
            The parent function which made this function using <see cref="M:SharpCraft.Function.NewChild(System.String)"/> or <see cref="M:SharpCraft.Function.NewCousin(System.String)"/>
            </summary>
        </member>
        <member name="M:SharpCraft.Function.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:SharpCraft.Function"/> object with the given string
            Used to run <see cref="T:SharpCraft.Function"/> which doesnt have an object
            use <see cref="M:SharpCraft.Packspace.NewFunction(System.String)"/> to create a new <see cref="T:SharpCraft.Function"/> or <see cref="M:SharpCraft.Function.NewChild(System.String)"/> or <see cref="M:SharpCraft.Function.NewCousin(System.String)"/>
            </summary>
            <param name="function">An string path to and <see cref="T:SharpCraft.Function"/></param>
        </member>
        <member name="M:SharpCraft.Function.#ctor(SharpCraft.Group)">
            <summary>
            Converts a group of functions into a function which runs all the group's functions
            </summary>
            <param name="FunctionGroup">the function group to convert</param>
        </member>
        <member name="M:SharpCraft.Function.ToString">
            <summary>
            Returns the namespace path of this <see cref="T:SharpCraft.Function"/>
            </summary>
            <returns>this <see cref="T:SharpCraft.Function"/>'s name</returns>
        </member>
        <member name="F:SharpCraft.Function.Block">
            <summary>
            Commands run on blocks
            </summary>
        </member>
        <member name="F:SharpCraft.Function.Entity">
            <summary>
            Commands run on entities
            </summary>
        </member>
        <member name="F:SharpCraft.Function.Execute">
            <summary>
            Execute commands
            </summary>
        </member>
        <member name="F:SharpCraft.Function.Player">
            <summary>
            Commands run on players
            </summary>
        </member>
        <member name="F:SharpCraft.Function.World">
            <summary>
            Commands run on the world
            </summary>
        </member>
        <member name="M:SharpCraft.Function.NewChild(System.String)">
            <summary>
            Creates a folder with this function's name and creates a new <see cref="T:SharpCraft.Function"/> inside of it with the specified name
            </summary>
            <param name="Name">The name of the new <see cref="T:SharpCraft.Function"/></param>
            <returns>The new <see cref="T:SharpCraft.Function"/></returns>
        </member>
        <member name="M:SharpCraft.Function.NewChild(System.String,SharpCraft.Function.FunctionCreater)">
            <summary>
            Creates a folder with this function's name and creates a new <see cref="T:SharpCraft.Function"/> inside of it with the specified name
            </summary>
            <param name="Name">The name of the new <see cref="T:SharpCraft.Function"/></param>
            <param name="creater">a method creating the new <see cref="T:SharpCraft.Function"/></param>
            <returns>The new <see cref="T:SharpCraft.Function"/></returns>
        </member>
        <member name="M:SharpCraft.Function.NewCousin(System.String)">
            <summary>
            Creates a new <see cref="T:SharpCraft.Function"/> with the specified name in the same folder as this function
            </summary>
            <param name="Name">The name of the new <see cref="T:SharpCraft.Function"/></param>
            <returns>The new <see cref="T:SharpCraft.Function"/></returns>
        </member>
        <member name="M:SharpCraft.Function.NewCousin(System.String,SharpCraft.Function.FunctionCreater)">
            <summary>
            Creates a new <see cref="T:SharpCraft.Function"/> with the specified name in the same folder as this function
            </summary>
            <param name="Name">The name of the new <see cref="T:SharpCraft.Function"/></param>
            <param name="creater">a method creating the new <see cref="T:SharpCraft.Function"/></param>
            <returns>The new <see cref="T:SharpCraft.Function"/></returns>
        </member>
        <member name="T:SharpCraft.Function.PlayerCommands">
            <summary>
            All the player commands
            </summary>
        </member>
        <member name="F:SharpCraft.Function.PlayerCommands.XP">
            <summary>
            All commands for levels and xp
            </summary>
        </member>
        <member name="T:SharpCraft.Function.PlayerCommands.ClassXP">
            <summary>
            All commands for levels and xp
            </summary>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassXP.LevelsAdd(SharpCraft.Selector,System.Int32)">
            <summary>
            Adds the specified amount of levels to the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="levels">The amount of levels to add. If this is negative levels will be removed</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassXP.LevelsSet(SharpCraft.Selector,System.Int32)">
            <summary>
            Sets the selected players' levels to the specified amount
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="levels">The amount to set the levels to</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassXP.LevelsGet(SharpCraft.Selector)">
            <summary>
            Outputs the amount of levels the selected player has
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassXP.PointsAdd(SharpCraft.Selector,System.Int32)">
            <summary>
            Adds the specified amount of points to the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="points">The amount of points to add. If this is negative points will be removed</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassXP.PointsSet(SharpCraft.Selector,System.Int32)">
            <summary>
            Sets the selected players' points to the specified amount
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="points">The amount to set the points to</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassXP.PointsGet(SharpCraft.Selector)">
            <summary>
            Outputs the amount of points the selected player has
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.Gamemode(SharpCraft.Selector,SharpCraft.ID.Gamemode)">
            <summary>
            Changes the selected players gamemode
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="mode">the gamemode to change to</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.Trigger(SharpCraft.ScoreObject,System.Int32,System.Boolean)">
            <summary>
            Changes the executing player's score in the given <see cref="T:SharpCraft.ScoreObject"/>
            </summary>
            <param name="scoreObject">the <see cref="T:SharpCraft.ScoreObject"/> to change in</param>
            <param name="number">The number to add/set it to</param>
            <param name="set">If the score should be set to the given number. If false it will be added instead</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.Tell(SharpCraft.Selector,System.String)">
            <summary>
            Whispers the specified message to the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="message">The message to tell the player</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.Spawnpoint(SharpCraft.Selector,SharpCraft.Coords)">
            <summary>
            Changes the selected players' spawnpoint to the given location
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="spawn">The new spawnpoint location</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.EnableTrigger(SharpCraft.Selector,SharpCraft.ScoreObject)">
            <summary>
            Enables a trigger for the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="objective">The trigger (<see cref="T:SharpCraft.ScoreObject"/>) to enable</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.Tellraw(SharpCraft.Selector,SharpCraft.JSON[])">
            <summary>
            Tells the selected players a message in chat
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="message">The message to tell the players</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.Actionbar(SharpCraft.Selector,SharpCraft.JSON[])">
            <summary>
            Shows a message in the selected players actionbar
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="message">The message to show</param>
        </member>
        <member name="F:SharpCraft.Function.PlayerCommands.Particle">
            <summary>
            All commands for particles
            </summary>
        </member>
        <member name="T:SharpCraft.Function.PlayerCommands.ClassParticle">
            <summary>
            All commands for particles
            </summary>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassParticle.Normal(SharpCraft.ID.Particle,SharpCraft.Coords,SharpCraft.Coords,System.Double,System.Int32,System.Boolean,SharpCraft.Selector)">
            <summary>
            Makes particles appear in the world
            </summary>
            <param name="particle">The type of particles</param>
            <param name="displayCoords">The place to show the particles at</param>
            <param name="size">The radius to spread the particles in</param>
            <param name="speed">The speed of the particles</param>
            <param name="count">The amount of particles</param>
            <param name="force">If the particles should be shown no mater what</param>
            <param name="player">The players to show the particles to. If null the particles are shown to everyone</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassParticle.ColoredDust(SharpCraft.HexColor,System.Double,SharpCraft.Coords,SharpCraft.Coords,System.Double,System.Int32,System.Boolean,SharpCraft.Selector)">
            <summary>
            Makes dust particles appear in the world
            </summary>
            <param name="color">The color of the particles</param>
            <param name="particleSize">The size of the particles</param>
            <param name="displayCoords">The place to show the particles at</param>
            <param name="size">The radius to spread the particles in</param>
            <param name="speed">The speed of the particles</param>
            <param name="count">The amount of particles</param>
            <param name="force">If the particles should be shown no mater what</param>
            <param name="player">The players to show the particles to. If null the particles are shown to everyone</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassParticle.Block(SharpCraft.Block,SharpCraft.Coords,SharpCraft.Coords,System.Double,System.Int32,System.Boolean,System.Boolean,SharpCraft.Selector)">
            <summary>
            Makes block particles appear in the world
            </summary>
            <param name="block">The block's particles to show</param>
            <param name="displayCoords">The place to show the particles at</param>
            <param name="size">The radius to spread the particles in</param>
            <param name="speed">The speed of the particles</param>
            <param name="count">The amount of particles</param>
            <param name="dust">If it should be dust or squares</param>
            <param name="force">If the particles should be shown no mater what</param>
            <param name="player">The players to show the particles to. If null the particles are shown to everyone</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassParticle.Item(SharpCraft.Item,SharpCraft.Coords,SharpCraft.Coords,System.Double,System.Int32,System.Boolean,SharpCraft.Selector)">
            <summary>
            Makes item particles appear in the world
            </summary>
            <param name="item">The item's particles to show</param>
            <param name="displayCoords">The place to show the particles at</param>
            <param name="size">The radius to spread the particles in</param>
            <param name="speed">The speed of the particles</param>
            <param name="count">The amount of particles</param>
            <param name="force">If the particles should be shown no mater what</param>
            <param name="player">The players to show the particles to. If null the particles are shown to everyone</param>
        </member>
        <member name="F:SharpCraft.Function.PlayerCommands.Item">
            <summary>
            All commands for items
            </summary>
        </member>
        <member name="T:SharpCraft.Function.PlayerCommands.ClassItem">
            <summary>
            All commands for items
            </summary>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassItem.GiveItem(SharpCraft.Selector,SharpCraft.Item)">
            <summary>
            Gives an item to the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="giveItem">The <see cref="F:SharpCraft.Function.PlayerCommands.Item"/> to give to the players</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassItem.GiveItem(SharpCraft.Selector,SharpCraft.Loottable)">
            <summary>
            Gives the loot from a loottable to the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="loot">the <see cref="T:SharpCraft.Loottable"/> to give the player</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassItem.GiveItem(SharpCraft.Selector,SharpCraft.Selector)">
            <summary>
            Gives the loot which the selected entity would drop if killed to the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="kill">the selector selecting the entity whose loot should be dropped</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassItem.GiveItem(SharpCraft.Selector,SharpCraft.Coords,SharpCraft.Item)">
            <summary>
            Gives the loot which the block at the given coords would drop of broken to the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="breakBlock">the coords of the block</param>
            <param name="breakWith">the item used to break the block</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassItem.GiveEnderChest(SharpCraft.Selector,SharpCraft.Item)">
            <summary>
            Puts an item into the selected players' enderchests
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="giveItem">The item to insert into the enderchest. <see cref="F:SharpCraft.Item.Slot"/> choses the slot.</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassItem.GiveHotbar(SharpCraft.Selector,SharpCraft.Item)">
            <summary>
            Puts an item into the selected players' hotbars
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="giveItem">The item to insert into the hotbar. <see cref="F:SharpCraft.Item.Slot"/> choses the slot.</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassItem.GiveWeapon(SharpCraft.Selector,SharpCraft.Item,System.Boolean)">
            <summary>
            Inserts an item into the selected players' selected slot
            </summary>
            <param name="selector">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="giveItem">The item to insert</param>
            <param name="offHand">If it should insert into the offhand instead</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassItem.Clear(SharpCraft.Selector,SharpCraft.Item,System.Nullable{System.Int32})">
            <summary>
            Clears an item from the selected players' inventories
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="item">The item to clear</param>
            <param name="amount">The maximum amount of the item to clear. null clears all</param>
        </member>
        <member name="F:SharpCraft.Function.PlayerCommands.Sound">
            <summary>
            All commands for sounds
            </summary>
        </member>
        <member name="T:SharpCraft.Function.PlayerCommands.ClassSound">
            <summary>
            All commands for sounds
            </summary>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassSound.Play(SharpCraft.Selector,System.String,SharpCraft.ID.SoundSource,SharpCraft.Coords,System.Double,System.Double,System.Double)">
            <summary>
            Plays a sound for the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="sound">the sound to play</param>
            <param name="source">the source to play the sound as</param>
            <param name="location">the location to play the sound at</param>
            <param name="volume">the maximum volume of the sound</param>
            <param name="speed">the speed of the sound (0-2)</param>
            <param name="minValue">the minimum volume of the sound (0-2)</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassSound.Stop(SharpCraft.Selector,System.Nullable{SharpCraft.ID.SoundSource},System.String)">
            <summary>
            Stops sounds for the selected players
            (If no source and sound is specified it will stop all sounds)
            </summary>
            <param name="Player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="Source">the source to stop sounds at. Null will stop the sound from any source</param>
            <param name="sound">the sound to stop. Null will stop any sound in the given source</param>
        </member>
        <member name="F:SharpCraft.Function.PlayerCommands.Title">
            <summary>
            All commands for titles
            </summary>
        </member>
        <member name="T:SharpCraft.Function.PlayerCommands.ClassTitle">
            <summary>
            All commands for titles
            </summary>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassTitle.Title(SharpCraft.Selector,SharpCraft.JSON[])">
            <summary>
            displays a title for the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="message">The message to show the players</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassTitle.SubTitle(SharpCraft.Selector,SharpCraft.JSON[])">
            <summary>
            displays a subtitle for the selected players
            Note: the subtitle is first shown when the title command is ran
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="message">The message to show the players</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassTitle.Time(SharpCraft.Selector,System.Int32,System.Int32,System.Int32)">
            <summary>
            choses how long the titles should be shown for the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="startFade">The amount of ticks it takes for the title to fade in</param>
            <param name="stay">The amount of ticks the title stays on screen</param>
            <param name="endFade">The amount of ticks it takes for the title to fade out</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassTitle.Clear(SharpCraft.Selector)">
            <summary>
            clears the shown title on the selected players' screens
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassTitle.Reset(SharpCraft.Selector)">
            <summary>
            resets all the title values for the selected players' screens
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassTitle.FullTitle(SharpCraft.Selector,SharpCraft.JSON[],SharpCraft.JSON[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Displays a whole title for the selected players
            </summary>
            <param name="Player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="TopMessage">The main title message</param>
            <param name="BottomMessage">the bottom part of the title message</param>
            <param name="StartFade">The amount of ticks it takes for the title to fade in</param>
            <param name="Stay">The amount of ticks the title stays on screen</param>
            <param name="EndFade">The amount of ticks it takes for the title to fade out</param>
        </member>
        <member name="F:SharpCraft.Function.PlayerCommands.Recipe">
            <summary>
            All commands for recipes
            </summary>
        </member>
        <member name="T:SharpCraft.Function.PlayerCommands.ClassRecipe">
            <summary>
            All commands for recipes
            </summary>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassRecipe.Give(SharpCraft.Selector,SharpCraft.Recipe)">
            <summary>
            Give a recipe to the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="giveRecipe">The <see cref="F:SharpCraft.Function.PlayerCommands.Recipe"/> to give</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassRecipe.GiveAll(SharpCraft.Selector)">
            <summary>
            Gives all recipes to the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassRecipe.Remove(SharpCraft.Selector,SharpCraft.Recipe)">
            <summary>
            Removes a recipe from the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="giveRecipe">the <see cref="F:SharpCraft.Function.PlayerCommands.Recipe"/> to remove</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassRecipe.RemoveAll(SharpCraft.Selector)">
            <summary>
            removes all recipes from the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
        </member>
        <member name="F:SharpCraft.Function.PlayerCommands.Advancement">
            <summary>
            All commands for advancements
            </summary>
        </member>
        <member name="T:SharpCraft.Function.PlayerCommands.ClassAdvancement">
            <summary>
            All commands for advancements
            </summary>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassAdvancement.Everything(SharpCraft.Selector,System.Boolean)">
            <summary>
            grants/evokes all advancements for the selected players
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="revoke">if the advancement should be revoked instead of granted</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassAdvancement.Untill(SharpCraft.Selector,SharpCraft.Advancement,System.Boolean)">
            <summary>
            Grants/revokes all advancements up to the specified advancement for the selected players
            (it also grants/revokes the specified advancement)
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="advancement">the advancement to grant/revoke up to</param>
            <param name="revoke">if the advancement should be revoked instead of granted</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassAdvancement.From(SharpCraft.Selector,SharpCraft.Advancement,System.Boolean)">
            <summary>
            grants/revokes all advancements after the specified advancement for the selected players
            (it also grants/revokes the specified advancement)
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="advancement">the advancement to grant/revoke from</param>
            <param name="revoke">if the advancement should be revoked instead of granted</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassAdvancement.Branch(SharpCraft.Selector,SharpCraft.Advancement,System.Boolean)">
            <summary>
            grants/revokes all advancements in the same branch as the specified advancement for the selected players
            (it also grants/revokes the specified advancement)
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="advancement">an advancement in the branch to grant/revoke</param>
            <param name="revoke">if the advancement should be revoked instead of granted</param>
        </member>
        <member name="M:SharpCraft.Function.PlayerCommands.ClassAdvancement.Only(SharpCraft.Selector,SharpCraft.Advancement,System.Boolean,SharpCraft.Advancement.Trigger)">
            <summary>
            grants/revokes the specified the advancement for the selected players
            (it also grants/revokes the specified advancement)
            </summary>
            <param name="player">the <see cref="T:SharpCraft.Selector"/> to use</param>
            <param name="advancement">the advancement to grant/revoke</param>
            <param name="revoke">if the advancement should be revoked instead of granted</param>
            <param name="trigger">the trigger in the advancement to revoke/grant. Null means the advancement itself will be granted/revoked</param>
        </member>
        <member name="T:SharpCraft.Function.WorldCommands">
            <summary>
            All commands for the world
            </summary>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.Spawn(SharpCraft.Coords)">
            <summary>
            Changes the world's spawnpoint to the specified location
            </summary>
            <param name="coords">The new location of the world spawnpoint</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.Say(System.String)">
            <summary>
            Says a message in the chat
            </summary>
            <param name="text">the text to say in chat</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.DefaultGamemode(SharpCraft.ID.Gamemode)">
            <summary>
            Changes the default gamemode players are in when they spawn for the first time
            </summary>
            <param name="gamemode">the new default gamemode</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.Difficulty(SharpCraft.ID.Difficulty)">
            <summary>
            Changes the difficulty of the world
            </summary>
            <param name="difficulty">the new difficulty</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.Loot(SharpCraft.Coords,SharpCraft.Loottable)">
            <summary>
            Spawns loot into the world at the given location
            </summary>
            <param name="coords">The location to spawn the loot</param>
            <param name="loot">the <see cref="T:SharpCraft.Loottable"/> to spawn in</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.Loot(SharpCraft.Coords,SharpCraft.Selector)">
            <summary>
            Spawns loot into the world at the given location
            </summary>
            <param name="coords">The location to spawn the loot</param>
            <param name="kill">the entity whose "when killed loot" should be dropped</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.Loot(SharpCraft.Coords,SharpCraft.Coords,SharpCraft.Item)">
            <summary>
            Spawns loot into the world at the given location
            </summary>
            <param name="coords">The location to spawn the loot</param>
            <param name="breakBlock">the block whose "when mined loot" should be dropped</param>
            <param name="breakWith">the tool used to break the block</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.Function(SharpCraft.Function,SharpCraft.Time)">
            <summary>
            Runs the specified function
            </summary>
            <param name="runFunction">the function to run</param>
            <param name="delay">the amount of time to function execution should be delayed. null doesnt delay it. 
            (If value is other than null the function will ignore the arguments send in the execute command which executed it)</param>
            <returns>The ran function</returns>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.Weather(SharpCraft.ID.WeatherType,System.Nullable{System.Int32})">
            <summary>
            Changes the weather to the specified type
            </summary>
            <param name="SetTo">The new type of weather</param>
            <param name="WeatherTime">The number of ticks the weather should be going. Null means the game chose</param>
        </member>
        <member name="F:SharpCraft.Function.WorldCommands.Rule">
            <summary>
            All commands for gamemodes
            </summary>
        </member>
        <member name="T:SharpCraft.Function.WorldCommands.ClassRules">
            <summary>
            All commands for gamemodes
            </summary>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.AnnounceAdvancements(System.Nullable{System.Boolean})">
            <summary>
            Changes if advancements should be announced in chat or not
            </summary>
            <param name="setRule">if it should or not. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.CommandBlockOutput(System.Nullable{System.Boolean})">
            <summary>
            Changes if command blocks should say their executed commands in chat
            </summary>
            <param name="setRule">if it should or not. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.DisableElytraMovementCheck(System.Nullable{System.Boolean})">
            <summary>
            Makes the server not double check the players' flying speeds
            </summary>
            <param name="setRule">if it should or not. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.DoDaylightCycle(System.Nullable{System.Boolean})">
            <summary>
            Changes if the daylightcycle should be running or not
            </summary>
            <param name="setRule">if it should or not. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.DoEntityDrops(System.Nullable{System.Boolean})">
            <summary>
            Changes if entities which arent mobs should drop loot or not
            (so like armorstands and item frames)
            </summary>
            <param name="setRule">if it should or not. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.DoFireTick(System.Nullable{System.Boolean})">
            <summary>
            Changes if fire should spread or not
            </summary>
            <param name="setRule">if it should or not. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.DoLimitedCrafting(System.Nullable{System.Boolean})">
            <summary>
            Changes if players have to have the recipe to be able to craft the item
            </summary>
            <param name="setRule">if it should or not. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.DoMobLoot(System.Nullable{System.Boolean})">
            <summary>
            Changes if mobs should drop loot or not
            </summary>
            <param name="setRule">if it should or not. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.DoMobSpawning(System.Nullable{System.Boolean})">
            <summary>
            Changes if mobs should spawn in the world or not
            </summary>
            <param name="setRule">if it should or not. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.DoTileDrops(System.Nullable{System.Boolean})">
            <summary>
            Changes if blocks should drop loot or not
            </summary>
            <param name="setRule">if it should or not. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.DoWeatherCycle(System.Nullable{System.Boolean})">
            <summary>
            Changes if the weather cycle should be going or not
            </summary>
            <param name="setRule">if it should or not. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.KeepInventory(System.Nullable{System.Boolean})">
            <summary>
            Changes if players should keep their inventory on death
            </summary>
            <param name="setRule">if it should or not. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.LogAdminCommands(System.Nullable{System.Boolean})">
            <summary>
            Changes if ran commands should be logged in the server log or not
            </summary>
            <param name="setRule">if it should or not. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.MobGriefing(System.Nullable{System.Boolean})">
            <summary>
            Changes if mobs should be able to grief or not
            (fx if creepers blowing up breaks blocks and endermans should be able to pick up blocks)
            </summary>
            <param name="setRule">if it should or not. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.NaturalRegeneration(System.Nullable{System.Boolean})">
            <summary>
            Changes if players health should regenerate or not
            (Players can still heal with effects)
            </summary>
            <param name="setRule">if it should or not. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.ReducedDebugInfo(System.Nullable{System.Boolean})">
            <summary>
            Changes if the debug screen (f3) only should show a few things or not
            </summary>
            <param name="setRule">if it should or not. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.SendCommandFeedback(System.Nullable{System.Boolean})">
            <summary>
            Changes if executed commands should output their success in chat / in the command block's output text
            </summary>
            <param name="setRule">if it should or not. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.ShowDeathMessages(System.Nullable{System.Boolean})">
            <summary>
            Changes if death messages should be displayed in chat or not
            </summary>
            <param name="setRule">if it should or not. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.SpectatorsGenerateChunks(System.Nullable{System.Boolean})">
            <summary>
            Changes if players in spectator mode should be able to generate new chunks
            </summary>
            <param name="setRule">if it should or not. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.MaxCommandChainLength(System.Nullable{System.Int32})">
            <summary>
            Changes the maximum amount of commands to run each tick
            (default:65536)
            </summary>
            <param name="setRule">The new value. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.MaxEntityCramming(System.Nullable{System.Int32})">
            <summary>
            Changes the amount of entities there has to be in one block before they start to take damage
            (default:24)
            </summary>
            <param name="setRule">The new value. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.RandomTickSpeed(System.Nullable{System.Int32})">
            <summary>
            Changes the amount of random ticks which happens each tick
            (default: 3)
            (fx makes things grow faster and fire spreads faster)
            </summary>
            <param name="setRule">The new value. null if you want to get the gamerule's value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassRules.SpawnRadius(System.Nullable{System.Int32})">
            <summary>
            Changes the radius players maximum can spawn away from the world's spawnpoint
            (default: 10)
            </summary>
            <param name="setRule">The new value. null if you want to get the gamerule's value</param>
        </member>
        <member name="F:SharpCraft.Function.WorldCommands.Objective">
            <summary>
            All commands for scoreboards
            </summary>
        </member>
        <member name="T:SharpCraft.Function.WorldCommands.ClassObjective">
            <summary>
            All commands for scoreboards
            </summary>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassObjective.Add(System.String,System.String,SharpCraft.JSON[])">
            <summary>
            Adds the specified <see cref="T:SharpCraft.ScoreObject"/> to the world
            </summary>
            <param name="ScoreName">The name of the <see cref="T:SharpCraft.ScoreObject"/></param>
            <param name="Type">the type of the scoreboard. See <see cref="T:SharpCraft.ID.Objective"/> for a list of types</param>
            <param name="DisplayName">The name to display when the scoreboard is viewed in the sidebar</param>
            <returns>the newly created <see cref="T:SharpCraft.ScoreObject"/></returns>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassObjective.Remove(SharpCraft.ScoreObject)">
            <summary>
            Removes the specified <see cref="T:SharpCraft.ScoreObject"/> from the world
            </summary>
            <param name="Object">the <see cref="T:SharpCraft.ScoreObject"/> to remove</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassObjective.Display(SharpCraft.ScoreObject,SharpCraft.ID.ScoreDisplay,System.Nullable{SharpCraft.ID.MinecraftColor})">
            <summary>
            Displays the specified <see cref="T:SharpCraft.ScoreObject"/> in the specified display slot
            Note: each slot can only display one <see cref="T:SharpCraft.ScoreObject"/>
            </summary>
            <param name="Object">the <see cref="T:SharpCraft.ScoreObject"/> to display</param>
            <param name="Display">the display slot to display it in</param>
            <param name="TeamColor">only teams with this color can see it. Null makes everyone see it. Note: this only works with <see cref="F:SharpCraft.ID.ScoreDisplay.sidebar"/> as the <paramref name="Display"/></param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassObjective.ClearDisplay(SharpCraft.ID.ScoreDisplay,System.Nullable{SharpCraft.ID.MinecraftColor})">
            <summary>
            Clears a display slot
            </summary>
            <param name="Display">the display slot to clear</param>
            <param name="TeamColor">the team's sidebar slot to clear. Note: this only works with <see cref="F:SharpCraft.ID.ScoreDisplay.sidebar"/> as the <paramref name="Display"/></param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassObjective.DisplayName(SharpCraft.ScoreObject,SharpCraft.JSON[])">
            <summary>
            Changes the <see cref="T:SharpCraft.ScoreObject"/>'s displayed name
            </summary>
            <param name="Object">the <see cref="T:SharpCraft.ScoreObject"/> to change</param>
            <param name="Name">The new display name</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassObjective.Render(SharpCraft.ScoreObject,SharpCraft.ID.ObjectiveRender)">
            <summary>
            Changes the way the <see cref="T:SharpCraft.ScoreObject"/> is rendered in the <see cref="F:SharpCraft.ID.ScoreDisplay.list"/> display slot
            </summary>
            <param name="Object">the <see cref="T:SharpCraft.ScoreObject"/> to change</param>
            <param name="Render">The way it should be rendered</param>
        </member>
        <member name="F:SharpCraft.Function.WorldCommands.Team">
            <summary>
            All commands for teams
            </summary>
        </member>
        <member name="T:SharpCraft.Function.WorldCommands.ClassTeam">
            <summary>
            All commands for teams
            </summary>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassTeam.Add(System.String,SharpCraft.JSON[],System.Nullable{SharpCraft.ID.MinecraftColor})">
            <summary>
            Adds the specified <see cref="F:SharpCraft.Function.WorldCommands.Team"/> to the world
            </summary>
            <param name="TeamName">the <see cref="F:SharpCraft.Function.WorldCommands.Team"/>'s name</param>
            <param name="DisplayName">the displayed name of the <see cref="F:SharpCraft.Function.WorldCommands.Team"/></param>
            <param name="TeamColor">the color of the <see cref="F:SharpCraft.Function.WorldCommands.Team"/>. If null the <see cref="F:SharpCraft.Function.WorldCommands.Team"/> will have the default color (white)</param>
            <returns>the newly created <see cref="F:SharpCraft.Function.WorldCommands.Team"/></returns>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassTeam.Remove(SharpCraft.Team)">
            <summary>
            Removes the specified <see cref="F:SharpCraft.Function.WorldCommands.Team"/> from the world
            </summary>
            <param name="RemoveTeam">the <see cref="F:SharpCraft.Function.WorldCommands.Team"/> to remove</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassTeam.Color(SharpCraft.Team,SharpCraft.ID.MinecraftColor)">
            <summary>
            Changes the color of the specified <see cref="F:SharpCraft.Function.WorldCommands.Team"/>
            </summary>
            <param name="ChangeTeam">the <see cref="F:SharpCraft.Function.WorldCommands.Team"/> to change</param>
            <param name="Color">The new color</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassTeam.DeathMessage(SharpCraft.Team,SharpCraft.ID.TeamVisibility)">
            <summary>
            Changes how the specified <see cref="F:SharpCraft.Function.WorldCommands.Team"/>'s death messages are displayed
            </summary>
            <param name="ChangeTeam">the <see cref="F:SharpCraft.Function.WorldCommands.Team"/> to change</param>
            <param name="Visible">the visibility rule</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassTeam.Collision(SharpCraft.Team,SharpCraft.ID.TeamCollision)">
            <summary>
            Changes how the specified <see cref="F:SharpCraft.Function.WorldCommands.Team"/> collides things
            </summary>
            <param name="ChangeTeam">the <see cref="F:SharpCraft.Function.WorldCommands.Team"/> to change</param>
            <param name="Collision">the collision rule</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassTeam.FriendlyFire(SharpCraft.Team,System.Boolean)">
            <summary>
            Changes if the specified <see cref="F:SharpCraft.Function.WorldCommands.Team"/> can damage players on their own team or not
            </summary>
            <param name="ChangeTeam">the <see cref="F:SharpCraft.Function.WorldCommands.Team"/> to change</param>
            <param name="FriendlyFire">If the team should be able to damage their own team or not</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassTeam.SeeInvisibleFriends(SharpCraft.Team,System.Boolean)">
            <summary>
            Changes how the specified <see cref="F:SharpCraft.Function.WorldCommands.Team"/> is displayed when invisible
            </summary>
            <param name="ChangeTeam">the <see cref="F:SharpCraft.Function.WorldCommands.Team"/> to change</param>
            <param name="See">the visibility rule</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassTeam.Nametag(SharpCraft.Team,SharpCraft.ID.TeamVisibility)">
            <summary>
            Changes how the specified <see cref="F:SharpCraft.Function.WorldCommands.Team"/>'s nametags are visible
            </summary>
            <param name="ChangeTeam">the <see cref="F:SharpCraft.Function.WorldCommands.Team"/> to change</param>
            <param name="Visible">the visibility tule</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassTeam.DisplayName(SharpCraft.Team,SharpCraft.JSON[])">
            <summary>
            Changes the display name of the specified <see cref="F:SharpCraft.Function.WorldCommands.Team"/>
            </summary>
            <param name="ChangeTeam">the <see cref="F:SharpCraft.Function.WorldCommands.Team"/> to change</param>
            <param name="Name">The new name of the team</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassTeam.Clear(SharpCraft.Team)">
            <summary>
            Removes all players from the specified <see cref="F:SharpCraft.Function.WorldCommands.Team"/>
            </summary>
            <param name="ClearTeam">the <see cref="F:SharpCraft.Function.WorldCommands.Team"/> to remove players from</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassTeam.Prefix(SharpCraft.Team,SharpCraft.JSON[])">
            <summary>
            Changes the prefix shown before the name of players in the specified <see cref="F:SharpCraft.Function.WorldCommands.Team"/>
            </summary>
            <param name="ChangeTeam">the <see cref="F:SharpCraft.Function.WorldCommands.Team"/> to change</param>
            <param name="PrefixJson">The new prefix to show</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassTeam.Suffix(SharpCraft.Team,SharpCraft.JSON[])">
            <summary>
            Changes the suffix shown after the name of players in the specified <see cref="F:SharpCraft.Function.WorldCommands.Team"/>
            </summary>
            <param name="ChangeTeam">the <see cref="F:SharpCraft.Function.WorldCommands.Team"/> to change</param>
            <param name="SuffixJson">the new prefix to show</param>
        </member>
        <member name="F:SharpCraft.Function.WorldCommands.Datapack">
            <summary>
            All commands for datapacks
            </summary>
        </member>
        <member name="T:SharpCraft.Function.WorldCommands.ClassDatapack">
            <summary>
            All commands for datapacks
            </summary>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassDatapack.Disable(SharpCraft.Packspace)">
            <summary>
            Disables the specified <see cref="T:SharpCraft.Packspace"/>
            </summary>
            <param name="PackSpace">the <see cref="T:SharpCraft.Packspace"/> to disable</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassDatapack.Enable(SharpCraft.Packspace,System.Nullable{SharpCraft.ID.DatapackPlace},SharpCraft.Packspace)">
            <summary>
            Enables the specified <see cref="T:SharpCraft.Packspace"/>
            </summary>
            <param name="PackSpace">the <see cref="T:SharpCraft.Packspace"/> to enable</param>
            <param name="PlaceAt">choses where the <see cref="T:SharpCraft.Packspace"/> should be placed relative to other enabled <see cref="T:SharpCraft.Packspace"/>s</param>
            <param name="OtherPack">the <see cref="T:SharpCraft.Packspace"/> the <paramref name="PackSpace"/> is placed relative to</param>
        </member>
        <member name="F:SharpCraft.Function.WorldCommands.Time">
            <summary>
            All commands for time
            </summary>
        </member>
        <member name="T:SharpCraft.Function.WorldCommands.ClassTime">
            <summary>
            All commands for time
            </summary>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassTime.Add(SharpCraft.Time)">
            <summary>
            Adds the specified amount of <see cref="F:SharpCraft.Function.WorldCommands.Time"/> to the time of day
            </summary>
            <param name="time">the <see cref="F:SharpCraft.Function.WorldCommands.Time"/> to add</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassTime.Set(SharpCraft.Time)">
            <summary>
            Sets the time of day to the specified <see cref="F:SharpCraft.Function.WorldCommands.Time"/>
            </summary>
            <param name="time">the <see cref="F:SharpCraft.Function.WorldCommands.Time"/> to set it to</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassTime.GetDay">
            <summary>
            Gets the amount of days which has gone by
            </summary>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassTime.GetDayTime">
            <summary>
            Gets the time of day it is in ticks
            (0-24000)
            </summary>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassTime.GetTime">
            <summary>
            Gets the time of the world
            (Pretty much just <see cref="M:SharpCraft.Function.WorldCommands.ClassTime.GetDay"/> * 24000 + <see cref="M:SharpCraft.Function.WorldCommands.ClassTime.GetDayTime"/>)
            </summary>
        </member>
        <member name="F:SharpCraft.Function.WorldCommands.Border">
            <summary>
            All commands for the world border
            </summary>
        </member>
        <member name="T:SharpCraft.Function.WorldCommands.ClassBorder">
            <summary>
            All commands for the world border
            </summary>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassBorder.Add(System.Int32,System.Int32)">
            <summary>
            Adds blocks to the world border size
            </summary>
            <param name="Add">The amount of blocks to add. 
            Note: the blocks are spread out from the center, so adding 1 block adds a half block to all sides
            Note: if the number is negative blocks will be removed</param>
            <param name="time">The amount of time it should take to add the blocks</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassBorder.Center(SharpCraft.Coords)">
            <summary>
            Changes the center of the world border
            </summary>
            <param name="Coords">the location of the new center</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassBorder.Damage(System.Int32,System.Int32)">
            <summary>
            Changes the amount of damage the world border does
            </summary>
            <param name="AmountPerBlock">The amount of damage it does per block the player is too far outside</param>
            <param name="Buffer">The amount of blocks the player has to be outside the border before taking damage</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassBorder.Get">
            <summary>
            Gets the worldborder's current size in blocks
            </summary>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassBorder.Warning(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Changes when the worldborder starts to show red on the players' screens
            </summary>
            <param name="Distance">the maximum distance in blocks the player has be away from the border for the red to show</param>
            <param name="Time">The maximum amount of time the player is away from the border for the red to show.
            (Time as in: "the world border will be at the player in X seconds")</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassBorder.Set(System.Int32,System.Int32)">
            <summary>
            Sets the world border's size in blocks
            </summary>
            <param name="Set">The amount of blocks wide the border is</param>
            <param name="time">The time it should take for the border to get there</param>
        </member>
        <member name="F:SharpCraft.Function.WorldCommands.BossBar">
            <summary>
            All commands for boss bars
            </summary>
        </member>
        <member name="T:SharpCraft.Function.WorldCommands.ClassBossBar">
            <summary>
            All commands for boss bars
            </summary>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassBossBar.Add(System.String,SharpCraft.JSON[])">
            <summary>
            Adds a <see cref="T:SharpCraft.BossBar"/> with the specified name to the world
            </summary>
            <param name="Name">the name of the <see cref="T:SharpCraft.BossBar"/></param>
            <param name="ShowName">The name to show ontop of the <see cref="T:SharpCraft.BossBar"/></param>
            <returns>the newly created <see cref="T:SharpCraft.BossBar"/></returns>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassBossBar.Remove(SharpCraft.BossBar)">
            <summary>
            Removes the specified <see cref="T:SharpCraft.BossBar"/> from the world
            </summary>
            <param name="RemoveThis">the <see cref="T:SharpCraft.BossBar"/> to remove</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassBossBar.SetValue(SharpCraft.BossBar,System.Int32)">
            <summary>
            Sets the specified <see cref="T:SharpCraft.BossBar"/>'s value
            </summary>
            <param name="BossBar">the <see cref="T:SharpCraft.BossBar"/> to change</param>
            <param name="SetTo">the new value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassBossBar.SetMax(SharpCraft.BossBar,System.Int32)">
            <summary>
            Sets the maximum value the specified <see cref="T:SharpCraft.BossBar"/> can display
            </summary>
            <param name="BossBar">the <see cref="T:SharpCraft.BossBar"/> to change</param>
            <param name="SetTo">the new max value</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassBossBar.SetName(SharpCraft.BossBar,SharpCraft.JSON[])">
            <summary>
            Changes the specified <see cref="T:SharpCraft.BossBar"/>'s display name
            </summary>
            <param name="BossBar">the <see cref="T:SharpCraft.BossBar"/> to change</param>
            <param name="NewName">the new display name for the bar</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassBossBar.SetVisible(SharpCraft.BossBar,System.Boolean)">
            <summary>
            Changes if the specified <see cref="T:SharpCraft.BossBar"/> is visible
            </summary>
            <param name="BossBar">the <see cref="T:SharpCraft.BossBar"/> to change</param>
            <param name="Visible">If it should be visible or not</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassBossBar.SetStyle(SharpCraft.BossBar,SharpCraft.ID.BossBarStyle)">
            <summary>
            Changes the style of the specified <see cref="T:SharpCraft.BossBar"/>
            </summary>
            <param name="BossBar">the <see cref="T:SharpCraft.BossBar"/> to change</param>
            <param name="Style">the new style of the <see cref="T:SharpCraft.BossBar"/></param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassBossBar.SetColor(SharpCraft.BossBar,SharpCraft.ID.BossBarColor)">
            <summary>
            Changes the color of the specified <see cref="T:SharpCraft.BossBar"/>
            </summary>
            <param name="BossBar">the <see cref="T:SharpCraft.BossBar"/> to change</param>
            <param name="Color">the new color</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassBossBar.SetPlayers(SharpCraft.BossBar,SharpCraft.Selector)">
            <summary>
            Makes the selected players see the specified <see cref="T:SharpCraft.BossBar"/>
            </summary>
            <param name="BossBar">the <see cref="T:SharpCraft.BossBar"/> to show</param>
            <param name="Players">the <see cref="T:SharpCraft.Selector"/> to use</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassBossBar.GetValue(SharpCraft.BossBar)">
            <summary>
            Gets the specified <see cref="T:SharpCraft.BossBar"/>'s value
            </summary>
            <param name="BossBar">the <see cref="T:SharpCraft.BossBar"/> to get from</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassBossBar.GetMax(SharpCraft.BossBar)">
            <summary>
            Gets the specified <see cref="T:SharpCraft.BossBar"/>'s max value
            </summary>
            <param name="BossBar">the <see cref="T:SharpCraft.BossBar"/> to get from</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassBossBar.GetVisible(SharpCraft.BossBar)">
            <summary>
            Gets the specified <see cref="T:SharpCraft.BossBar"/>'s visibility value
            </summary>
            <param name="BossBar">the <see cref="T:SharpCraft.BossBar"/> to get from</param>
        </member>
        <member name="M:SharpCraft.Function.WorldCommands.ClassBossBar.GetPlayers(SharpCraft.BossBar)">
            <summary>
            Gets a number stating how many players can see the specified <see cref="T:SharpCraft.BossBar"/>
            </summary>
            <param name="BossBar">the <see cref="T:SharpCraft.BossBar"/> to get from</param>
        </member>
        <member name="T:SharpCraft.Group">
            <summary>
            A <see cref="T:SharpCraft.Group"/> for <see cref="T:SharpCraft.Function"/>s, <see cref="T:SharpCraft.Item"/>, <see cref="T:SharpCraft.Block"/> or <see cref="T:SharpCraft.Selector.EntityType"/>
            </summary>
        </member>
        <member name="M:SharpCraft.Group.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:SharpCraft.Group"/> object with the given string
            Used to use a <see cref="T:SharpCraft.Group"/> which doesnt have an object
            use <see cref="M:SharpCraft.Packspace.NewGroup(System.String,SharpCraft.Function[],System.Boolean,SharpCraft.Group[])"/> to create a new <see cref="T:SharpCraft.Group"/>
            </summary>
            <param name="Group">An string path to and <see cref="T:SharpCraft.Group"/></param>
        </member>
        <member name="M:SharpCraft.Group.ToString">
            <summary>
            Returns the namespace path of this <see cref="T:SharpCraft.Group"/>
            </summary>
            <returns>this <see cref="T:SharpCraft.Group"/>'s name</returns>
        </member>
        <member name="M:SharpCraft.Group.op_Implicit(SharpCraft.Group)~SharpCraft.Block">
            <summary>
            Converts a <see cref="T:SharpCraft.Group"/> into a <see cref="T:SharpCraft.Block"/> so it can be used
            </summary>
            <param name="group">the <see cref="T:SharpCraft.Group"/> to convert</param>
        </member>
        <member name="M:SharpCraft.Group.op_Implicit(SharpCraft.Group)~SharpCraft.Function">
            <summary>
            Converts a <see cref="T:SharpCraft.Group"/> into a <see cref="T:SharpCraft.Function"/> so it can be used
            </summary>
            <param name="group">the <see cref="T:SharpCraft.Group"/> to convert</param>
        </member>
        <member name="M:SharpCraft.Group.op_Implicit(SharpCraft.Group)~SharpCraft.Item">
            <summary>
            Converts a <see cref="T:SharpCraft.Group"/> into an <see cref="T:SharpCraft.Item"/> so it can be used
            </summary>
            <param name="group">the <see cref="T:SharpCraft.Group"/> to convert</param>
        </member>
        <member name="M:SharpCraft.Group.op_Implicit(SharpCraft.Group)~SharpCraft.Selector.EntityType">
            <summary>
            Converts a <see cref="T:SharpCraft.Group"/> into a <see cref="T:SharpCraft.Selector.EntityType"/> so it can be used
            </summary>
            <param name="group">the <see cref="T:SharpCraft.Group"/> to convert</param>
        </member>
        <member name="M:SharpCraft.Group.op_Implicit(SharpCraft.ID.Files.Groups.Blocks.Normal)~SharpCraft.Group">
            <summary>
            Creates a <see cref="T:SharpCraft.Group"/> object out of the group string so it can be used
            </summary>
            <param name="blockGroup">the group string</param>
        </member>
        <member name="M:SharpCraft.Group.op_Implicit(SharpCraft.ID.Files.Groups.Blocks.Special)~SharpCraft.Group">
            <summary>
            Creates a <see cref="T:SharpCraft.Group"/> object out of the group string so it can be used
            </summary>
            <param name="blockGroup">the group string</param>
        </member>
        <member name="M:SharpCraft.Group.op_Implicit(SharpCraft.ID.Files.Groups.Items.Normal)~SharpCraft.Group">
            <summary>
            Creates a <see cref="T:SharpCraft.Group"/> object out of the group string so it can be used
            </summary>
            <param name="itemGroup">the group string</param>
        </member>
        <member name="M:SharpCraft.Group.op_Implicit(SharpCraft.ID.Files.Groups.Items.Special)~SharpCraft.Group">
            <summary>
            Creates a <see cref="T:SharpCraft.Group"/> object out of the group string so it can be used
            </summary>
            <param name="itemGroup">the group string</param>
        </member>
        <member name="M:SharpCraft.Group.op_Implicit(SharpCraft.ID.Files.Groups.Function)~SharpCraft.Group">
            <summary>
            Creates a <see cref="T:SharpCraft.Group"/> object out of the group string so it can be used
            </summary>
            <param name="functionGroup">the group string</param>
        </member>
        <member name="M:SharpCraft.Group.op_Implicit(SharpCraft.ID.Files.Groups.Fluid)~SharpCraft.Group">
            <summary>
            Creates a <see cref="T:SharpCraft.Group"/> object out of the group string so it can be used
            </summary>
            <param name="fluidGroup">the group string</param>
        </member>
        <member name="T:SharpCraft.Loottable">
            <summary>
            A minecraft Loot Table
            </summary>
        </member>
        <member name="M:SharpCraft.Loottable.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:SharpCraft.Loottable"/> object with the given string
            Used to use a <see cref="T:SharpCraft.Loottable"/> which doesnt have an object
            use <see cref="M:SharpCraft.Packspace.NewLoottable(System.String,SharpCraft.Loottable.Pool[])"/> to create a new <see cref="T:SharpCraft.Loottable"/>
            </summary>
            <param name="loottable">An string path to and <see cref="T:SharpCraft.Loottable"/></param>
        </member>
        <member name="M:SharpCraft.Loottable.ToString">
            <summary>
            Returns the namespace path of this <see cref="T:SharpCraft.Loottable"/>
            </summary>
            <returns>this <see cref="T:SharpCraft.Loottable"/>'s name</returns>
        </member>
        <member name="T:SharpCraft.Loottable.Pool">
            <summary>
            A loot table <see cref="T:SharpCraft.Loottable.Pool"/> of <see cref="T:SharpCraft.Entity"/>s
            </summary>
        </member>
        <member name="M:SharpCraft.Loottable.Pool.#ctor(SharpCraft.Range,SharpCraft.Loottable.Entry[],SharpCraft.Loottable.Condition[])">
            <summary>
            Creates an new <see cref="T:SharpCraft.Loottable.Pool"/> with the given parameters
            </summary>
            <param name="Rolls">the amount of times the <see cref="T:SharpCraft.Loottable.Pool"/> should run</param>
            <param name="Entries">the <see cref="T:SharpCraft.Loottable.Entry"/>s in the <see cref="T:SharpCraft.Loottable.Pool"/></param>
            <param name="conditions"><see cref="T:SharpCraft.Loottable.Condition"/> chosing if the <see cref="T:SharpCraft.Loottable.Pool"/> should run or not</param>
        </member>
        <member name="M:SharpCraft.Loottable.Pool.#ctor(SharpCraft.Range,SharpCraft.Range,SharpCraft.Loottable.Entry[],SharpCraft.Loottable.Condition[])">
            <summary>
            Creates an new <see cref="T:SharpCraft.Loottable.Pool"/> with the given parameters
            </summary>
            <param name="Rolls">the amount of times the <see cref="T:SharpCraft.Loottable.Pool"/> should run</param>
            <param name="LuckRolls">the amount of extra rolls per luck point</param>
            <param name="Entries">the <see cref="T:SharpCraft.Loottable.Entry"/>s in the <see cref="T:SharpCraft.Loottable.Pool"/></param>
            <param name="conditions"><see cref="T:SharpCraft.Loottable.Condition"/> chosing if the <see cref="T:SharpCraft.Loottable.Pool"/> should run or not</param>
        </member>
        <member name="M:SharpCraft.Loottable.Pool.ToString">
            <summary>
            Outputs this <see cref="T:SharpCraft.Loottable.Pool"/> data in string format
            </summary>
            <returns>this <see cref="T:SharpCraft.Loottable.Pool"/>'s data</returns>
        </member>
        <member name="T:SharpCraft.Loottable.Entry">
            <summary>
            A <see cref="T:SharpCraft.Loottable"/> <see cref="T:SharpCraft.Loottable.Entry"/>
            </summary>
        </member>
        <member name="T:SharpCraft.Loottable.Entry.DynamicType">
            <summary>
            the place to get the items from
            </summary>
        </member>
        <member name="F:SharpCraft.Loottable.Entry.DynamicType.contents">
            <summary>
            drops the <see cref="T:SharpCraft.Loottable.Entry"/>/<see cref="T:SharpCraft.Block"/>'s content
            </summary>
        </member>
        <member name="F:SharpCraft.Loottable.Entry.DynamicType.self">
            <summary>
            drops itself
            </summary>
        </member>
        <member name="M:SharpCraft.Loottable.Entry.Normal(System.Int32,SharpCraft.ID.Item,SharpCraft.Loottable.Condition[])">
            <summary>
            creates an <see cref="T:SharpCraft.Loottable.Entry"/> which drops a single <see cref="T:SharpCraft.Item"/>
            </summary>
            <param name="weight">the <see cref="T:SharpCraft.Loottable.Entry"/>'s weight</param>
            <param name="item">the <see cref="T:SharpCraft.Item"/> to drop</param>
            <param name="conditions">the <see cref="T:SharpCraft.Loottable.Condition"/>s for running this entry</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Entry"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Entry.Normal(System.Int32,SharpCraft.Loottable,SharpCraft.Loottable.Condition[])">
            <summary>
            creates an <see cref="T:SharpCraft.Loottable.Entry"/> which drops a <see cref="T:SharpCraft.Loottable"/>
            </summary>
            <param name="weight">the <see cref="T:SharpCraft.Loottable.Entry"/>'s weight</param>
            <param name="loottable">the <see cref="T:SharpCraft.Loottable"/> to drop</param>
            <param name="conditions">the <see cref="T:SharpCraft.Loottable.Condition"/>s for running this entry</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Entry"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Entry.Normal(System.Int32,SharpCraft.Loottable.Condition[])">
            <summary>
            creates an <see cref="T:SharpCraft.Loottable.Entry"/> which drops nothing
            </summary>
            <param name="weight">the <see cref="T:SharpCraft.Loottable.Entry"/>'s weight</param>
            <param name="conditions">the <see cref="T:SharpCraft.Loottable.Condition"/>s for running this entry</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Entry"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Entry.Changes(System.Int32,SharpCraft.Loottable.Change[],SharpCraft.ID.Item)">
            <summary>
            creates an <see cref="T:SharpCraft.Loottable.Entry"/> which drops an <see cref="T:SharpCraft.Item"/> with changes
            </summary>
            <param name="weight">the <see cref="T:SharpCraft.Loottable.Entry"/>'s weight</param>
            <param name="item">the <see cref="T:SharpCraft.Item"/> to drop</param>
            <param name="changes">the <see cref="T:SharpCraft.Loottable.Change"/>s to make on the item</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Entry"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Entry.Changes(System.Int32,SharpCraft.Loottable.Change[],SharpCraft.Loottable)">
            <summary>
            creates an <see cref="T:SharpCraft.Loottable.Entry"/> which drops <see cref="T:SharpCraft.Loottable"/> with changes
            </summary>
            <param name="weight">the <see cref="T:SharpCraft.Loottable.Entry"/>'s weight</param>
            <param name="loottable">the <see cref="T:SharpCraft.Loottable"/> to drop</param>
            <param name="changes">the <see cref="T:SharpCraft.Loottable.Change"/>s to make on the item</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Entry"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Entry.Changes(System.Int32,SharpCraft.Loottable.Change[])">
            <summary>
            creates an <see cref="T:SharpCraft.Loottable.Entry"/> which drops nothing... with changes! (don't ask)
            </summary>
            <param name="weight">the <see cref="T:SharpCraft.Loottable.Entry"/>'s weight</param>
            <param name="changes">the <see cref="T:SharpCraft.Loottable.Change"/>s to make on the nothingness... (I still don't know)</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Entry"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Entry.Alternatives(System.Int32,SharpCraft.Loottable.Entry[])">
            <summary>
            Runs the first entry which can run
            </summary>
            <param name="weight">the <see cref="T:SharpCraft.Loottable.Entry"/>'s weight</param>
            <param name="entries">the <see cref="T:SharpCraft.Loottable.Entry"/>s to pick from</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Entry"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Entry.Dynamic(System.Int32,SharpCraft.Loottable.Entry.DynamicType)">
            <summary>
            Gets block specific drops
            </summary>
            <param name="weight">the <see cref="T:SharpCraft.Loottable.Entry"/>'s weight</param>
            <param name="dynamicType">the place to get the drops from</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Entry"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Entry.Group(System.Int32,SharpCraft.Loottable.Condition[],SharpCraft.Loottable.Entry[])">
            <summary>
            Runs the <paramref name="entries"/> if the <paramref name="conditions"/> are met
            </summary>
            <param name="weight">the <see cref="T:SharpCraft.Loottable.Entry"/>'s weight</param>
            <param name="conditions">the <see cref="T:SharpCraft.Loottable.Condition"/>s for running this entry</param>
            <param name="entries">the <see cref="T:SharpCraft.Loottable.Entry"/>s to run</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Entry"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Entry.Sequence(System.Int32,SharpCraft.Loottable.Entry[])">
            <summary>
            Runs through the <paramref name="entries"/> untill one doesn't execute
            </summary>
            <param name="weight">the <see cref="T:SharpCraft.Loottable.Entry"/>'s weight</param>
            <param name="entries">the <see cref="T:SharpCraft.Loottable.Entry"/>s to run</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Entry"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Entry.ToString">
            <summary>
            Outputs this <see cref="T:SharpCraft.Loottable.Entry"/> data in string format
            </summary>
            <returns>this <see cref="T:SharpCraft.Loottable.Entry"/>'s data</returns>
        </member>
        <member name="T:SharpCraft.Loottable.Change">
            <summary>
            A <see cref="T:SharpCraft.Loottable.Change"/> which is made on an <see cref="T:SharpCraft.Item"/>
            </summary>
        </member>
        <member name="M:SharpCraft.Loottable.Change.#ctor(SharpCraft.Loottable.Condition[])">
            <summary>
            Creates a new <see cref="T:SharpCraft.Loottable.Change"/>
            </summary>
            <param name="Conditions">The <see cref="T:SharpCraft.Loottable.Condition"/>s which has to be true to run</param>
        </member>
        <member name="M:SharpCraft.Loottable.Change.EnchantRandom(SharpCraft.ID.Enchant[])">
            <summary>
            enchants the <see cref="T:SharpCraft.Item"/> with one of the enchantments
            </summary>
            <param name="enchants">a list of enchantments</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Change"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Change.Enchant(SharpCraft.Range,System.Boolean)">
            <summary>
            enchants the <see cref="T:SharpCraft.Item"/> with the levels
            </summary>
            <param name="levels">the amount of levels to enchant with</param>
            <param name="allowTrasure">if treasure enchants are allowed or not</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Change"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Change.Map(SharpCraft.ID.Structure,SharpCraft.ID.MapMarker,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            adds map information to the <see cref="T:SharpCraft.Item"/>
            </summary>
            <param name="structure">the structure the map should find</param>
            <param name="marker">the marker icon used on the map</param>
            <param name="onlyNewChunks">if it only should search in unloaded chunks</param>
            <param name="zoom">how much zoomed in the map is</param>
            <param name="searchRadius">how far it should search</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Change"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Change.Smelt">
            <summary>
            runs the <see cref="T:SharpCraft.Item"/> through a furnace
            </summary>
            <returns>this <see cref="T:SharpCraft.Loottable.Change"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Change.Looting(SharpCraft.Range,System.Nullable{System.Int32})">
            <summary>
            adds extra items per level of looting
            </summary>
            <param name="countPerLevel">the amount of <see cref="T:SharpCraft.Item"/>s to add</param>
            <param name="limit">the maximum amount of <see cref="T:SharpCraft.Item"/>s it can drop</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Change"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Change.Attribute(SharpCraft.ID.AttributeType,SharpCraft.ID.AttributeOperation,SharpCraft.Range,SharpCraft.ID.AttributeSlot[])">
            <summary>
            adds an <see cref="T:SharpCraft.MCAttribute"/> to the <see cref="T:SharpCraft.Item"/>
            </summary>
            <param name="attribute">the <see cref="T:SharpCraft.MCAttribute"/> name</param>
            <param name="operation">the operation to use</param>
            <param name="value">the value of the <see cref="T:SharpCraft.MCAttribute"/></param>
            <param name="slots">the slots the item has to be in to be activated</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Change"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Change.Name(SharpCraft.JSON[])">
            <summary>
            Sets the <see cref="T:SharpCraft.Item"/>'s name
            </summary>
            <param name="name">the name of the <see cref="T:SharpCraft.Item"/></param>
            <returns>this <see cref="T:SharpCraft.Loottable.Change"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Change.Count(SharpCraft.Range)">
            <summary>
            Sets the <see cref="T:SharpCraft.Item"/>'s count
            </summary>
            <param name="count">the amount of <see cref="T:SharpCraft.Item"/>s</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Change"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Change.Damage(SharpCraft.Range)">
            <summary>
            Sets the <see cref="T:SharpCraft.Item"/>s damage
            </summary>
            <param name="damage">the damage</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Change"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Change.NBT(SharpCraft.Item)">
            <summary>
            Changes the <see cref="T:SharpCraft.Item"/>'s nbt
            </summary>
            <param name="item">the nbt to add to the <see cref="T:SharpCraft.Item"/></param>
            <returns>this <see cref="T:SharpCraft.Loottable.Change"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Change.Bonus(SharpCraft.ID.Enchant)">
            <summary>
            change the <see cref="T:SharpCraft.Item"/>'s count to drop <see cref="T:SharpCraft.Item"/>s in the same way ores does with fortune
            count*(max(0, random(0, 1)-1)+1)
            </summary>
            <param name="enchant">the enchantment to look at</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Change"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Change.Bonus(SharpCraft.ID.Enchant,System.Int32)">
            <summary>
            uniform adds to <see cref="T:SharpCraft.Item"/>'s count
            multiplier*enchantment_level
            </summary>
            <param name="enchant">the enchantment to look at</param>
            <param name="multiplier">the amount to multiply by</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Change"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Change.Bonus(SharpCraft.ID.Enchant,System.Double,System.Int32)">
            <summary>
            I have no idea what this does...
            </summary>
            <param name="enchant"></param>
            <param name="probability"></param>
            <param name="rounds"></param>
            <returns>this <see cref="T:SharpCraft.Loottable.Change"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Change.CopyName">
            <summary>
            copies the <see cref="T:SharpCraft.Block"/>'s name onto the <see cref="T:SharpCraft.Item"/>
            </summary>
            <returns>this <see cref="T:SharpCraft.Loottable.Change"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Change.ExplosionDecay">
            <summary>
            destroys items based on explosion which happened
            </summary>
            <returns>this <see cref="T:SharpCraft.Loottable.Change"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Change.LimitStacks(SharpCraft.Range)">
            <summary>
            limits how small/big a stack in a chest might get
            </summary>
            <param name="count">the </param>
            <returns>this <see cref="T:SharpCraft.Loottable.Change"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Change.SetContent(SharpCraft.Loottable.Entry[])">
            <summary>
            Add items to the item's BlockEntityTag
            </summary>
            <param name="entries">the entries of the items to drop</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Change"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Change.SetLootTable(SharpCraft.Loottable,System.Int64)">
            <summary>
            Adds a loottable and a seed to the item
            </summary>
            <param name="loottable">the loottable to put into the item</param>
            <param name="seed">the seed to put into the item</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Change"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Change.FillPlayerHead(SharpCraft.JSONObjects.Entity)">
            <summary>
            Fills the player head with the specified entity's data
            (Only supports player entities)
            </summary>
            <param name="entity">The entity whose data to use</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Change"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Change.ToString">
            <summary>
            Ourputs raw data used by the game
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="T:SharpCraft.Loottable.Condition">
            <summary>
            A <see cref="T:SharpCraft.Loottable.Condition"/> which has to be true for the thing to happen
            </summary>
        </member>
        <member name="M:SharpCraft.Loottable.Condition.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:SharpCraft.Loottable"/> condition
            </summary>
            <param name="inverted">If the condition should be false instead of true</param>
        </member>
        <member name="M:SharpCraft.Loottable.Condition.EntityProperties(SharpCraft.JSONObjects.Entity,SharpCraft.ID.LootCheckEntity)">
            <summary>
            Tests if the entity is the specified entity
            </summary>
            <param name="entity">the entity its supposed to be</param>
            <param name="select">the entity to check</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Condition"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Condition.EntityScore(SharpCraft.ScoreObject,SharpCraft.Range,SharpCraft.ID.LootCheckEntity)">
            <summary>
            Tests if the entity has the specified score
            </summary>
            <param name="scoreObject">the <see cref="T:SharpCraft.ScoreObject"/> to look in</param>
            <param name="range">the range the score has to be in</param>
            <param name="select">the entity to check</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Condition"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Condition.KilledByPlayer">
            <summary>
            Tests if it was a player who killed the entity
            </summary>
            <returns>this <see cref="T:SharpCraft.Loottable.Condition"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Condition.RandomChance(System.Double)">
            <summary>
            Tests if a random number is less than the specified number
            </summary>
            <param name="chance">The number the random number has to be less than</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Condition"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Condition.RandomLootChance(System.Double,System.Double)">
            <summary>
            Tests if a random number is less than the specified number multiplied by the looting multiplier
            <paramref name="chance"/> + ( [looting level] + <paramref name="lootMultiplier"/>)
            </summary>
            <param name="chance">The number the random number has to be less than</param>
            <param name="lootMultiplier">the amount to multiply with per looting level</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Condition"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Condition.BlockState(SharpCraft.JSONObjects.Block)">
            <summary>
            Tests if the broken block has the specified block state
            </summary>
            <param name="block">the block the block has to be</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Condition"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Condition.DamageSource(SharpCraft.JSONObjects.Damage)">
            <summary>
            Tests if the damage is of the specified damage type
            </summary>
            <param name="damage">the type of damage</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Condition"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Condition.EntityPresent(SharpCraft.JSONObjects.Entity)">
            <summary>
            Tests if the specified entity is loaded and exists in the world
            </summary>
            <param name="entity">the entity to test for</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Condition"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Condition.Location(SharpCraft.JSONObjects.Location)">
            <summary>
            Tests if the location of the looted thing
            </summary>
            <param name="location">the location the looted thing has to be at</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Condition"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Condition.UsedItem(SharpCraft.JSONObjects.Item)">
            <summary>
            Tests if the player used the specified item to loot the thing
            </summary>
            <param name="item">the item which has to be used</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Condition"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Condition.SurvivesExplosion">
            <summary>
            Tests if the item would survive the explosion
            </summary>
            <returns>this <see cref="T:SharpCraft.Loottable.Condition"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Condition.RandomEnchantmentChance(SharpCraft.ID.Enchant,System.Double[])">
            <summary>
            Tests if a random number is less than the number in <paramref name="chancesPerLevel"/> indexed at the item's <paramref name="enchant"/>'s level
            </summary>
            <param name="enchant">the enchantment to get the index from</param>
            <param name="chancesPerLevel">the chance each level should give</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Condition"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Condition.Weather(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Tests the weather
            </summary>
            <param name="rain">true if the weather should be raining</param>
            <param name="thunder">true if the weather should be thundering</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Condition"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Condition.Or(SharpCraft.Loottable.Condition[])">
            <summary>
            Tests if any of the given <see cref="T:SharpCraft.Loottable.Condition"/>s are true
            </summary>
            <param name="conditions">the <see cref="T:SharpCraft.Loottable.Condition"/> to test</param>
            <returns>this <see cref="T:SharpCraft.Loottable.Condition"/></returns>
        </member>
        <member name="M:SharpCraft.Loottable.Condition.ToString">
            <summary>
            Outputs the raw data used by the game
            </summary>
            <returns>Raw data used by Minecraft</returns>
        </member>
        <member name="M:SharpCraft.Loottable.Condition.op_Implicit(SharpCraft.Loottable.Condition)~SharpCraft.Loottable.Condition[]">
            <summary>
            Converts a single <see cref="T:SharpCraft.Loottable.Condition"/> into an array containing only that one <see cref="T:SharpCraft.Loottable.Condition"/>
            </summary>
            <param name="condition">the <see cref="T:SharpCraft.Loottable.Condition"/> to convert into an array</param>
        </member>
        <member name="T:SharpCraft.Packspace">
            <summary>
            A datapack and namespace object
            </summary>
        </member>
        <member name="P:SharpCraft.Packspace.Name">
            <summary>
            The name of the datapack
            </summary>
        </member>
        <member name="P:SharpCraft.Packspace.PackName">
            <summary>
            The name of the namespace
            </summary>
        </member>
        <member name="M:SharpCraft.Packspace.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpCraft.Packspace"/> with the given parameters
            </summary>
            <param name="setWorldPath">The path to the world's save file (not the datapack folder)</param>
            <param name="setNamespace">The namespace of the pack</param>
            <param name="setPackName">The datapack's name</param>
            <param name="description">The datapack's description</param>
            <param name="packFormat">The datapack's format</param>
        </member>
        <member name="M:SharpCraft.Packspace.Minecraft(System.String)">
            <summary>
            Outputs a <see cref="T:SharpCraft.Packspace"/> with the same datapack name but another namespace
            </summary>
            <param name="newNamespace">The namespace to change it to</param>
            <returns>A new <see cref="T:SharpCraft.Packspace"/> with the new namespace</returns>
        </member>
        <member name="M:SharpCraft.Packspace.NewFunction(System.String)">
            <summary>
            Creates a new function with the given name
            </summary>
            <param name="functionName">The function's name</param>
            <returns>The newly created function</returns>
        </member>
        <member name="M:SharpCraft.Packspace.NewFunction(System.String,SharpCraft.Function.FunctionCreater)">
            <summary>
            Creates a new function with the given name and add commands to the function
            </summary>
            <param name="functionName">The function's name</param>
            <param name="creater">a method creating the function</param>
            <returns>The newly created function</returns>
        </member>
        <member name="M:SharpCraft.Packspace.NewRecipe(System.String,SharpCraft.Item[0:,0:],SharpCraft.Item,System.String)">
            <summary>
            Creates a new crafting table <see cref="T:SharpCraft.Recipe"/> with the given parameters
            </summary>
            <param name="name">The <see cref="T:SharpCraft.Recipe"/>'s name</param>
            <param name="recipe">A multidimensional array describing how the <see cref="T:SharpCraft.Item"/>s should be layed out in the crafting table</param>
            <param name="output">The output <see cref="T:SharpCraft.Item"/></param>
            <param name="group">The string id of the group this <see cref="T:SharpCraft.Recipe"/> is in</param>
            <returns>The newly created recipe</returns>
        </member>
        <member name="M:SharpCraft.Packspace.NewRecipe(System.String,SharpCraft.Item[],SharpCraft.Item,System.String)">
            <summary>
            Creates a new crafting table shapeless <see cref="T:SharpCraft.Recipe"/> with the given parameters
            </summary>
            <param name="name">The <see cref="T:SharpCraft.Recipe"/>'s name</param>
            <param name="recipe">The <see cref="T:SharpCraft.Item"/>s needed to craft the <see cref="T:SharpCraft.Recipe"/></param>
            <param name="output">The output <see cref="T:SharpCraft.Item"/></param>
            <param name="group">The string id of the group this <see cref="T:SharpCraft.Recipe"/> is in</param>
            <returns>The newly created recipe</returns>
        </member>
        <member name="M:SharpCraft.Packspace.NewRecipe(System.String,SharpCraft.Item,SharpCraft.ID.Item,System.Double,System.Int32)">
            <summary>
            Creates a new furnace <see cref="T:SharpCraft.Recipe"/> with the given parameters
            </summary>
            <param name="name">The <see cref="T:SharpCraft.Recipe"/>'s name</param>
            <param name="input">The input <see cref="T:SharpCraft.Item"/></param>
            <param name="output">the output <see cref="T:SharpCraft.Item"/></param>
            <param name="xpDrop">the amount of xp the <see cref="T:SharpCraft.Recipe"/> should output</param>
            <param name="cookTime">the amount of time the <see cref="T:SharpCraft.Recipe"/> takes</param>
            <returns>The newly created recipe</returns>
        </member>
        <member name="M:SharpCraft.Packspace.HideRecipe(System.String)">
            <summary>
            Overwrites the <see cref="T:SharpCraft.Recipe"/> with that name with an invalid <see cref="T:SharpCraft.Recipe"/>
            </summary>
            <param name="name">The <see cref="T:SharpCraft.Recipe"/>'s name</param>
        </member>
        <member name="M:SharpCraft.Packspace.NewLoottable(System.String,SharpCraft.Loottable.Pool[])">
            <summary>
            Creates a new <see cref="T:SharpCraft.Loottable"/> with the <paramref name="lootPools"/>
            </summary>
            <param name="tableName">The <see cref="T:SharpCraft.Loottable"/>'s name</param>
            <param name="lootPools">The <see cref="T:SharpCraft.Loottable.Pool"/>s in the <see cref="T:SharpCraft.Loottable"/></param>
            <returns>The newly created <see cref="T:SharpCraft.Recipe"/></returns>
        </member>
        <member name="M:SharpCraft.Packspace.NewAdvancement(System.String,SharpCraft.JSON[],SharpCraft.JSON[],SharpCraft.JSONObjects.Item,SharpCraft.Advancement,SharpCraft.Advancement.Requirement,SharpCraft.Advancement.Reward,SharpCraft.ID.AdvancementFrame,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SharpCraft.Advancement"/> with the given parameters
            </summary>
            <param name="advancementName">The <see cref="T:SharpCraft.Advancement"/>'s name</param>
            <param name="ingameName">the shown ingame name</param>
            <param name="description">the shown ingame description</param>
            <param name="icon">the icon for the <see cref="T:SharpCraft.Advancement"/> - Leave empty to make advancement invisible</param>
            <param name="parent">the <see cref="T:SharpCraft.Advancement"/>'s parent <see cref="T:SharpCraft.Advancement"/></param>
            <param name="requirement">the <see cref="T:SharpCraft.Advancement.Requirement"/> needed to get the <see cref="T:SharpCraft.Advancement"/></param>
            <param name="reward">the <see cref="T:SharpCraft.Advancement.Reward"/> given by getting the <see cref="T:SharpCraft.Advancement"/></param>
            <param name="frame">the frame</param>
            <param name="showToast">if a toast should be shown when the player gets the <see cref="T:SharpCraft.Advancement"/></param>
            <param name="chatAnnounce">if it should be announced to chat when the player gets the <see cref="T:SharpCraft.Advancement"/></param>
            <param name="hidden">if the <see cref="T:SharpCraft.Advancement"/> shouldn't be shown in the advancement menu before you get it</param>
            <returns>the newly created <see cref="T:SharpCraft.Advancement"/></returns>
        </member>
        <member name="M:SharpCraft.Packspace.NewAdvancement(System.String,SharpCraft.JSON[],SharpCraft.JSON[],SharpCraft.JSONObjects.Item,System.String,SharpCraft.Advancement.Requirement,SharpCraft.Advancement.Reward,SharpCraft.ID.AdvancementFrame,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SharpCraft.Advancement"/> with the given parameters
            </summary>
            <param name="advancementName">The <see cref="T:SharpCraft.Advancement"/>'s name</param>
            <param name="ingameName">the shown ingame name</param>
            <param name="description">the shown ingame description</param>
            <param name="icon">the icon for the <see cref="T:SharpCraft.Advancement"/> - Leave empty to make advancement invisible</param>
            <param name="background">the background shown in the advancement menu</param>
            <param name="requirement">the <see cref="T:SharpCraft.Advancement.Requirement"/> needed to get the <see cref="T:SharpCraft.Advancement"/></param>
            <param name="reward">the <see cref="T:SharpCraft.Advancement.Reward"/> given by getting the <see cref="T:SharpCraft.Advancement"/></param>
            <param name="frame">the frame</param>
            <param name="showToast">if a toast should be shown when the player gets the <see cref="T:SharpCraft.Advancement"/></param>
            <param name="chatAnnounce">if it should be announced to chat when the player gets the <see cref="T:SharpCraft.Advancement"/></param>
            <param name="hidden">if the <see cref="T:SharpCraft.Advancement"/> shouldn't be shown in the advancement menu before you get it</param>
            <returns>the newly created <see cref="T:SharpCraft.Advancement"/></returns>
        </member>
        <member name="M:SharpCraft.Packspace.HideAdvancement(System.String)">
            <summary>
            Overwrites the <see cref="T:SharpCraft.Advancement"/> with that name with an invalid <see cref="T:SharpCraft.Advancement"/>
            </summary>
            <param name="advancementName">The <see cref="T:SharpCraft.Advancement"/>'s name</param>
        </member>
        <member name="M:SharpCraft.Packspace.NewGroup(System.String,SharpCraft.Function[],System.Boolean,SharpCraft.Group[])">
            <summary>
            Creates a new <see cref="T:SharpCraft.Function"/> <see cref="T:SharpCraft.Group"/>
            </summary>
            <param name="GroupName">the <see cref="T:SharpCraft.Group"/> name</param>
            <param name="FunctionList">a <see cref="T:SharpCraft.Function"/> array containing the <see cref="T:SharpCraft.Group"/>'s <see cref="T:SharpCraft.Function"/>s</param>
            <param name="Replace">true if this <see cref="T:SharpCraft.Group"/> should override other <see cref="T:SharpCraft.Group"/>s in the same namespace with the same name</param>
            <param name="InsertGroups">a <see cref="T:SharpCraft.Group"/> array containing <see cref="T:SharpCraft.Group"/>s to add to this <see cref="T:SharpCraft.Group"/></param>
            <returns>The newly created <see cref="T:SharpCraft.Group"/></returns>
        </member>
        <member name="M:SharpCraft.Packspace.NewGroup(System.String,SharpCraft.ID.Block[],System.Boolean,SharpCraft.Group[])">
            <summary>
            Creates a new <see cref="T:SharpCraft.Block"/> <see cref="T:SharpCraft.Group"/>
            </summary>
            <param name="GroupName">the <see cref="T:SharpCraft.Group"/> name</param>
            <param name="BlockList">a <see cref="T:SharpCraft.Block"/> array containing the <see cref="T:SharpCraft.Group"/>'s <see cref="T:SharpCraft.Block"/>s</param>
            <param name="Replace">true if this <see cref="T:SharpCraft.Group"/> should override other <see cref="T:SharpCraft.Group"/>s in the same namespace with the same name</param>
            <param name="InsertGroups">a <see cref="T:SharpCraft.Group"/> array containing <see cref="T:SharpCraft.Group"/>s to add to this <see cref="T:SharpCraft.Group"/></param>
            <returns>The newly created <see cref="T:SharpCraft.Group"/></returns>
        </member>
        <member name="M:SharpCraft.Packspace.NewGroup(System.String,SharpCraft.ID.Item[],System.Boolean,SharpCraft.Group[])">
            <summary>
            Creates a new <see cref="T:SharpCraft.Item"/> <see cref="T:SharpCraft.Group"/>
            </summary>
            <param name="GroupName">the <see cref="T:SharpCraft.Group"/> name</param>
            <param name="ItemList">a <see cref="T:SharpCraft.Item"/> array containing the <see cref="T:SharpCraft.Group"/>'s <see cref="T:SharpCraft.Item"/>s</param>
            <param name="Replace">true if this <see cref="T:SharpCraft.Group"/> should override other <see cref="T:SharpCraft.Group"/>s in the same namespace with the same name</param>
            <param name="InsertGroups">a <see cref="T:SharpCraft.Group"/> array containing <see cref="T:SharpCraft.Group"/>s to add to this <see cref="T:SharpCraft.Group"/></param>
            <returns>The newly created <see cref="T:SharpCraft.Group"/></returns>
        </member>
        <member name="M:SharpCraft.Packspace.NewGroup(System.String,SharpCraft.ID.Entity[],System.Boolean,SharpCraft.Group[])">
            <summary>
            Creates a new <see cref="T:SharpCraft.Entity"/> <see cref="T:SharpCraft.Group"/>
            </summary>
            <param name="GroupName">the <see cref="T:SharpCraft.Group"/> name</param>
            <param name="EntityList">a <see cref="T:SharpCraft.Entity"/> array containing the <see cref="T:SharpCraft.Group"/>'s <see cref="T:SharpCraft.Entity"/>s</param>
            <param name="Replace">true if this <see cref="T:SharpCraft.Group"/> should override other <see cref="T:SharpCraft.Group"/>s in the same namespace with the same name</param>
            <param name="InsertGroups">a <see cref="T:SharpCraft.Group"/> array containing <see cref="T:SharpCraft.Group"/>s to add to this <see cref="T:SharpCraft.Group"/></param>
            <returns>The newly created <see cref="T:SharpCraft.Group"/></returns>
        </member>
        <member name="M:SharpCraft.Packspace.NewReloadFunctionGroup(SharpCraft.Function[],System.Boolean,SharpCraft.Group[])">
            <summary>
            Creates a new <see cref="T:SharpCraft.Group"/> with <see cref="T:SharpCraft.Function"/>s which should run on world (re)load
            </summary>
            <param name="FunctionList">the <see cref="T:SharpCraft.Function"/>s</param>
            <param name="Replace">true if this <see cref="T:SharpCraft.Group"/> should override other <see cref="T:SharpCraft.Group"/>s in the same namespace with the same name</param>
            <param name="InsertGroups">a <see cref="T:SharpCraft.Group"/> array containing <see cref="T:SharpCraft.Group"/>s to add to this <see cref="T:SharpCraft.Group"/></param>
            <returns>The newly created <see cref="T:SharpCraft.Group"/></returns>
        </member>
        <member name="M:SharpCraft.Packspace.NewTickFunctionGroup(SharpCraft.Function[],System.Boolean,SharpCraft.Group[])">
            <summary>
            Creates a new <see cref="T:SharpCraft.Group"/> with <see cref="T:SharpCraft.Function"/>s which should run every tick
            </summary>
            <param name="FunctionList">the <see cref="T:SharpCraft.Function"/>s</param>
            <param name="Replace">true if this <see cref="T:SharpCraft.Group"/> should override other <see cref="T:SharpCraft.Group"/>s in the same namespace with the same name</param>
            <param name="InsertGroups">a <see cref="T:SharpCraft.Group"/> array containing <see cref="T:SharpCraft.Group"/>s to add to this <see cref="T:SharpCraft.Group"/></param>
            <returns>The newly created <see cref="T:SharpCraft.Group"/></returns>
        </member>
        <member name="T:SharpCraft.Recipe">
            <summary>
            A object used to create <see cref="T:SharpCraft.Recipe"/>s
            </summary>
        </member>
        <member name="M:SharpCraft.Recipe.#ctor(System.String)">
            <summary>
            Creates an <see cref="T:SharpCraft.Recipe"/> object with the given string
            Used to give <see cref="T:SharpCraft.Recipe"/>s which doesnt have an object
            use fx <see cref="M:SharpCraft.Packspace.NewRecipe(System.String,SharpCraft.Item,SharpCraft.ID.Item,System.Double,System.Int32)"/> to create a new <see cref="T:SharpCraft.Recipe"/>
            </summary>
            <param name="recipe">An string path to and <see cref="T:SharpCraft.Recipe"/></param>
        </member>
        <member name="M:SharpCraft.Recipe.ToString">
            <summary>
            Returns the namespace path of this <see cref="T:SharpCraft.Recipe"/>
            </summary>
            <returns>this <see cref="T:SharpCraft.Recipe"/>'s name</returns>
        </member>
    </members>
</doc>
